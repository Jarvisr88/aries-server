"""
Recurring Order Processing Procedure

Processes recurring sales orders by creating new orders and updating source items.
"""
from datetime import datetime
from typing import Dict, Any, Optional, List
from sqlalchemy import select, and_, or_, insert, update, func
from sqlalchemy.orm import Session

from app.models.order import Order, OrderDetail
from app.models.inventory import InventoryItem
from app.models.customer import Customer
from app.procedures.base import BaseProcedure
from app.utils.date import get_next_dos_from, get_next_dos_to
from app.utils.order import (
    ordered_qty_to_billed_qty,
    ordered_qty_to_delivery_qty
)


class ProcessRecurringOrder(BaseProcedure):
    """
    Processes recurring sales orders.
    
    This procedure:
    1. Creates new orders from recurring items
    2. Updates quantities and dates
    3. Maintains billing cycles
    4. Updates source items
    """

    async def _execute(
        self,
        order_id: int,
        billed_when: str,
        bill_item_on: str
    ) -> Dict[str, Any]:
        """Execute the recurring order processing procedure"""
        if not all([order_id, billed_when, bill_item_on]):
            return {
                'success': False,
                'error': 'Order ID, Billed When, and Bill Item On required'
            }

        # Get recurring details count and new order date
        details = await self._get_recurring_details(
            order_id,
            billed_when,
            bill_item_on
        )
        if not details['count']:
            return {
                'success': True,
                'message': 'No recurring items found'
            }

        # Create new order
        new_order_id = await self._create_new_order(
            order_id,
            details['new_order_date']
        )

        # Create order details
        await self._create_order_details(
            order_id,
            new_order_id,
            billed_when,
            bill_item_on
        )

        # Update source items
        await self._update_source_items(
            order_id,
            billed_when,
            bill_item_on
        )

        return {
            'success': True,
            'new_order_id': new_order_id
        }

    async def _get_recurring_details(
        self,
        order_id: int,
        billed_when: str,
        bill_item_on: str
    ) -> Dict[str, Any]:
        """Get recurring details count and new order date"""
        query = (
            select(
                func.count().label('count'),
                func.max(
                    func.case(
                        (
                            OrderDetail.billing_month <= 1,
                            get_next_dos_from(
                                OrderDetail.dos_from,
                                OrderDetail.dos_to,
                                OrderDetail.actual_billed_when
                            )
                        ),
                        else_=OrderDetail.dos_from
                    )
                ).label('new_order_date')
            )
            .select_from(OrderDetail)
            .join(Order)
            .where(
                and_(
                    OrderDetail.order_id == order_id,
                    OrderDetail.billed_when == billed_when,
                    OrderDetail.billed_when != 'One Time',
                    OrderDetail.actual_bill_item_on == bill_item_on,
                    OrderDetail.sale_rent_type == 'Re-occurring Sale'
                )
            )
        )
        result = await self.db.execute(query)
        row = result.one()
        return {
            'count': row.count,
            'new_order_date': row.new_order_date
        }

    async def _create_new_order(
        self,
        source_order_id: int,
        new_order_date: datetime
    ) -> int:
        """Create new order from source order"""
        # Get source order
        query = (
            select(Order)
            .where(Order.id == source_order_id)
        )
        result = await self.db.execute(query)
        source_order = result.scalar_one()

        # Create new order
        new_order = Order(
            customer_id=source_order.customer_id,
            approved=False,
            order_date=new_order_date,
            taken_by='AutoGenerated',
            shipping_method_id=source_order.shipping_method_id,
            special_instructions=source_order.special_instructions,
            customer_insurance1_id=source_order.customer_insurance1_id,
            customer_insurance2_id=source_order.customer_insurance2_id,
            customer_insurance3_id=source_order.customer_insurance3_id,
            customer_insurance4_id=source_order.customer_insurance4_id,
            icd9_1=source_order.icd9_1,
            icd9_2=source_order.icd9_2,
            icd9_3=source_order.icd9_3,
            icd9_4=source_order.icd9_4,
            icd10_01=source_order.icd10_01,
            icd10_02=source_order.icd10_02,
            icd10_03=source_order.icd10_03,
            icd10_04=source_order.icd10_04,
            icd10_05=source_order.icd10_05,
            icd10_06=source_order.icd10_06,
            icd10_07=source_order.icd10_07,
            icd10_08=source_order.icd10_08,
            icd10_09=source_order.icd10_09,
            icd10_10=source_order.icd10_10,
            icd10_11=source_order.icd10_11,
            icd10_12=source_order.icd10_12,
            doctor_id=source_order.doctor_id,
            pos_type_id=source_order.pos_type_id,
            facility_id=source_order.facility_id,
            referral_id=source_order.referral_id,
            salesrep_id=source_order.salesrep_id,
            location_id=source_order.location_id,
            claim_note=source_order.claim_note,
            user_field1=source_order.user_field1,
            user_field2=source_order.user_field2,
            last_update_user_id=1
        )
        self.db.add(new_order)
        await self.db.flush()
        return new_order.id

    async def _create_order_details(
        self,
        source_order_id: int,
        new_order_id: int,
        billed_when: str,
        bill_item_on: str
    ) -> None:
        """Create order details for new order"""
        # Get source details
        query = (
            select(OrderDetail)
            .join(Order)
            .where(
                and_(
                    OrderDetail.order_id == source_order_id,
                    OrderDetail.billed_when == billed_when,
                    OrderDetail.billed_when != 'One Time',
                    OrderDetail.actual_bill_item_on == bill_item_on,
                    OrderDetail.sale_rent_type == 'Re-occurring Sale'
                )
            )
        )
        result = await self.db.execute(query)
        source_details = result.scalars().all()

        # Create new details
        for detail in source_details:
            new_dos_from = (
                get_next_dos_from(
                    detail.dos_from,
                    detail.dos_to,
                    detail.actual_billed_when
                )
                if detail.billing_month <= 1
                else detail.dos_from
            )
            new_dos_to = (
                get_next_dos_to(
                    detail.dos_from,
                    detail.dos_to,
                    detail.actual_billed_when
                )
                if detail.billing_month <= 1
                else detail.dos_to
            )

            new_detail = OrderDetail(
                customer_id=detail.customer_id,
                order_id=new_order_id,
                inventory_item_id=detail.inventory_item_id,
                price_code_id=detail.price_code_id,
                sale_rent_type='Re-occurring Sale',
                billable_price=detail.billable_price,
                allowable_price=detail.allowable_price,
                taxable=detail.taxable,
                flat_rate=detail.flat_rate,
                dos_from=new_dos_from,
                dos_to=new_dos_to,
                show_span_dates=detail.show_span_dates,
                ordered_quantity=detail.ordered_quantity,
                ordered_units=detail.ordered_units,
                ordered_when=detail.ordered_when,
                ordered_converter=detail.ordered_converter,
                billed_quantity=ordered_qty_to_billed_qty(
                    new_dos_from,
                    new_dos_to,
                    detail.ordered_quantity,
                    detail.ordered_when,
                    detail.billed_when,
                    detail.ordered_converter,
                    detail.delivery_converter,
                    detail.billed_converter
                ),
                billed_units=detail.billed_units,
                billed_when=detail.billed_when,
                billed_converter=detail.billed_converter,
                delivery_quantity=ordered_qty_to_delivery_qty(
                    new_dos_from,
                    new_dos_to,
                    detail.ordered_quantity,
                    detail.ordered_when,
                    detail.billed_when,
                    detail.ordered_converter,
                    detail.delivery_converter,
                    detail.billed_converter
                ),
                delivery_units=detail.delivery_units,
                delivery_converter=detail.delivery_converter,
                billing_month=1,
                billing_code=detail.billing_code,
                modifier1=detail.modifier1,
                modifier2=detail.modifier2,
                modifier3=detail.modifier3,
                modifier4=detail.modifier4,
                dx_pointer=detail.dx_pointer,
                dx_pointer10=detail.dx_pointer10,
                drug_note_field=detail.drug_note_field,
                drug_control_number=detail.drug_control_number,
                bill_item_on=detail.bill_item_on,
                authorization_number=detail.authorization_number,
                authorization_type_id=detail.authorization_type_id,
                authorization_expiration_date=detail.authorization_expiration_date,
                send_cmn_rx_w_invoice=detail.send_cmn_rx_w_invoice,
                medically_unnecessary=detail.medically_unnecessary,
                special_code=detail.special_code,
                review_code=detail.review_code,
                reoccuring_id=detail.id,
                hao_description=detail.hao_description,
                cmn_form_id=detail.cmn_form_id,
                warehouse_id=detail.warehouse_id,
                bill_ins1=detail.bill_ins1,
                bill_ins2=detail.bill_ins2,
                bill_ins3=detail.bill_ins3,
                bill_ins4=detail.bill_ins4,
                nopay_ins1=detail.nopay_ins1,
                accept_assignment=detail.accept_assignment,
                user_field1=detail.user_field1,
                user_field2=detail.user_field2
            )
            self.db.add(new_detail)

        await self.db.flush()

    async def _update_source_items(
        self,
        order_id: int,
        billed_when: str,
        bill_item_on: str
    ) -> None:
        """Update source items to one time sales"""
        update_stmt = (
            update(OrderDetail)
            .where(
                and_(
                    OrderDetail.order_id == order_id,
                    OrderDetail.billed_when == billed_when,
                    OrderDetail.actual_bill_item_on == bill_item_on,
                    OrderDetail.sale_rent_type == 'Re-occurring Sale'
                )
            )
            .values(sale_rent_type='One Time Sale')
        )
        await self.db.execute(update_stmt)
