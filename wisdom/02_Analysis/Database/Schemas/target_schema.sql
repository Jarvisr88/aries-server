-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.ability_eligibility_requests
(
    id integer NOT NULL DEFAULT nextval('ability_eligibility_request_id_seq'::regclass),
    customerid integer NOT NULL,
    customerinsuranceid integer NOT NULL,
    requesttime timestamp without time zone NOT NULL,
    requesttext text COLLATE pg_catalog."default" NOT NULL,
    responsetime timestamp without time zone,
    responsetext text COLLATE pg_catalog."default",
    submissiontime timestamp without time zone,
    submissiontext text COLLATE pg_catalog."default",
    CONSTRAINT ability_eligibility_request_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.alembic_versions
(
    version_num character varying(32) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num)
);

CREATE TABLE IF NOT EXISTS public.appointment_reminders
(
    id integer NOT NULL DEFAULT nextval('appointment_reminder_id_seq'::regclass),
    appointmentid integer NOT NULL,
    remindertype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    remindertime timestamp without time zone NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Pending'::character varying,
    lastsendattempt timestamp without time zone,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT appointment_reminder_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.appointment_reminders
    IS 'Appointment reminders and their status';

CREATE TABLE IF NOT EXISTS public.appointment_types
(
    id integer NOT NULL DEFAULT nextval('appointment_type_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    duration integer NOT NULL DEFAULT 30,
    color character varying(7) COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT appointment_type_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.appointment_types
    IS 'Types of appointments available';

CREATE TABLE IF NOT EXISTS public.appointments
(
    id integer NOT NULL DEFAULT nextval('appointment_id_seq'::regclass),
    customerid integer NOT NULL,
    appointmenttypeid integer NOT NULL,
    doctorid integer,
    starttime timestamp without time zone NOT NULL,
    endtime timestamp without time zone NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Scheduled'::character varying,
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT appointment_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.appointments
    IS 'Customer appointments';

CREATE TABLE IF NOT EXISTS public.audit_action_types
(
    id integer NOT NULL DEFAULT nextval('audit_action_type_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT audit_action_type_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.audit_action_types
    IS 'Types of audit actions';

CREATE TABLE IF NOT EXISTS public.audit_logs
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    action character varying(50) COLLATE pg_catalog."default" NOT NULL,
    resource character varying(50) COLLATE pg_catalog."default" NOT NULL,
    resource_id integer,
    details character varying(1000) COLLATE pg_catalog."default",
    ip_address character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT audit_logs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.authorization_types
(
    id serial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    requires_number boolean,
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT authorization_types_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.backup_logs
(
    id integer NOT NULL DEFAULT nextval('backup_log_id_seq'::regclass),
    backuptype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    starttime timestamp without time zone NOT NULL,
    endtime timestamp without time zone,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'In Progress'::character varying,
    filesize bigint,
    filepath character varying(500) COLLATE pg_catalog."default",
    checksum character varying(64) COLLATE pg_catalog."default",
    compressiontype character varying(20) COLLATE pg_catalog."default",
    retentiondays integer NOT NULL,
    success boolean,
    errormessage text COLLATE pg_catalog."default",
    metadata jsonb,
    initiatedby integer,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT backup_log_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.backup_logs
    IS 'System backup history and metadata';

CREATE TABLE IF NOT EXISTS public.batch_logs
(
    id integer NOT NULL DEFAULT nextval('batch_log_id_seq'::regclass),
    batchid character varying(50) COLLATE pg_catalog."default" NOT NULL,
    processname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    starttime timestamp without time zone NOT NULL,
    endtime timestamp without time zone,
    recordsprocessed integer NOT NULL DEFAULT 0,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    errormessage text COLLATE pg_catalog."default",
    lastupdateuserid smallint,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT batch_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.batch_status
(
    id serial NOT NULL,
    batchid character varying(50) COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    message text COLLATE pg_catalog."default",
    createdat timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    lastupdateuserid smallint,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT batch_status_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.batchpayments
(
    id integer NOT NULL DEFAULT nextval('batchpayment_id_seq'::regclass),
    insurancecompanyid integer NOT NULL,
    checknumber character varying(14) COLLATE pg_catalog."default" NOT NULL,
    checkdate date NOT NULL,
    checkamount numeric(18, 2) NOT NULL,
    amountused numeric(18, 2) NOT NULL,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT batchpayment_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.billing_codes
(
    id serial NOT NULL,
    code character varying(20) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    code_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    effective_date date NOT NULL,
    end_date date,
    default_price numeric(10, 2),
    unit_type character varying(20) COLLATE pg_catalog."default",
    is_active boolean,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT billing_codes_pkey PRIMARY KEY (id),
    CONSTRAINT billing_codes_code_key UNIQUE (code)
);

CREATE TABLE IF NOT EXISTS public.billingtypes
(
    id integer NOT NULL DEFAULT nextval('billingtype_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    lastupdateuserid smallint,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT billingtype_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.changes
(
    tablename character varying(64) COLLATE pg_catalog."default" NOT NULL,
    sessionid integer NOT NULL,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT changes_pkey PRIMARY KEY (tablename, sessionid)
);

CREATE TABLE IF NOT EXISTS public.claim_line_items
(
    id serial NOT NULL,
    claim_id integer NOT NULL,
    order_detail_id integer NOT NULL,
    sequence_number integer NOT NULL,
    service_date date NOT NULL,
    hcpcs_code character varying(20) COLLATE pg_catalog."default" NOT NULL,
    modifier1 character varying(2) COLLATE pg_catalog."default",
    modifier2 character varying(2) COLLATE pg_catalog."default",
    modifier3 character varying(2) COLLATE pg_catalog."default",
    modifier4 character varying(2) COLLATE pg_catalog."default",
    units integer NOT NULL,
    billed_amount numeric(10, 2) NOT NULL,
    allowed_amount numeric(10, 2),
    paid_amount numeric(10, 2),
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT claim_line_items_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.claim_status_histories
(
    id integer NOT NULL DEFAULT nextval('claim_status_history_id_seq'::regclass),
    claim_id integer NOT NULL,
    status claimstatus NOT NULL,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT claim_status_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.claims
(
    id serial NOT NULL,
    order_id integer NOT NULL,
    insurance_id integer NOT NULL,
    claim_number character varying(50) COLLATE pg_catalog."default",
    status claimstatus NOT NULL,
    filing_date date,
    service_from_date date NOT NULL,
    service_to_date date,
    billed_amount numeric(10, 2) NOT NULL,
    allowed_amount numeric(10, 2),
    paid_amount numeric(10, 2),
    patient_responsibility numeric(10, 2),
    diagnosis_codes character varying(500) COLLATE pg_catalog."default",
    authorization_number character varying(50) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT claims_pkey PRIMARY KEY (id),
    CONSTRAINT claims_claim_number_key UNIQUE (claim_number)
);

CREATE TABLE IF NOT EXISTS public.cmnform_0404bs
(
    cmnformid integer NOT NULL,
    answer6a answer_enum NOT NULL DEFAULT 'D'::answer_enum,
    answer6b integer NOT NULL DEFAULT 0,
    answer7a answer_enum NOT NULL DEFAULT 'D'::answer_enum,
    answer7b integer NOT NULL DEFAULT 0,
    CONSTRAINT cmnform_0404b_pkey PRIMARY KEY (cmnformid)
);

CREATE TABLE IF NOT EXISTS public.cmnform_0484s
(
    cmnformid integer NOT NULL,
    answer1_hcpcs character varying(5) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::character varying,
    answer1_mg integer,
    answer1_times integer,
    answer1_hours integer,
    CONSTRAINT cmnform_0484_pkey PRIMARY KEY (cmnformid)
);

CREATE TABLE IF NOT EXISTS public.cmnforms
(
    id integer NOT NULL DEFAULT nextval('cmnform_id_seq'::regclass),
    cmntype cmn_type_enum NOT NULL DEFAULT 'DME 484.03'::cmn_type_enum,
    initialdate date,
    reviseddate date,
    customerid integer NOT NULL,
    doctorid integer NOT NULL,
    supplierid integer NOT NULL,
    lengthofneed integer,
    CONSTRAINT cmnform_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.communication_logs
(
    id integer NOT NULL DEFAULT nextval('communication_log_id_seq'::regclass),
    notificationid integer,
    communicationtype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    recipienttype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    recipientid integer NOT NULL,
    subject character varying(200) COLLATE pg_catalog."default",
    body text COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    error text COLLATE pg_catalog."default",
    createddatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT communication_log_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.communication_logs
    IS 'Communication history log';

CREATE TABLE IF NOT EXISTS public.companies
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    odbc_dsn character varying(50) COLLATE pg_catalog."default",
    server character varying(50) COLLATE pg_catalog."default",
    port integer,
    database character varying(50) COLLATE pg_catalog."default",
    active boolean NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT companies_pkey PRIMARY KEY (id),
    CONSTRAINT companies_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.compliance_audit_items
(
    id integer NOT NULL DEFAULT nextval('compliance_audit_item_id_seq'::regclass),
    auditid integer NOT NULL,
    checklistitemid integer NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Pending'::character varying,
    comments text COLLATE pg_catalog."default",
    completeddate date,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT compliance_audit_item_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.compliance_audit_items
    IS 'Individual compliance audit findings';

CREATE TABLE IF NOT EXISTS public.compliance_audits
(
    id integer NOT NULL DEFAULT nextval('compliance_audit_id_seq'::regclass),
    checklistid integer NOT NULL,
    auditdate date NOT NULL,
    auditorid smallint NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'In Progress'::character varying,
    notes text COLLATE pg_catalog."default",
    completeddate date,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT compliance_audit_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.compliance_audits
    IS 'Compliance audit records';

CREATE TABLE IF NOT EXISTS public.compliance_checklist_items
(
    id integer NOT NULL DEFAULT nextval('compliance_checklist_item_id_seq'::regclass),
    checklistid integer NOT NULL,
    itemtext text COLLATE pg_catalog."default" NOT NULL,
    isrequired boolean NOT NULL DEFAULT true,
    ordinal integer NOT NULL,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT compliance_checklist_item_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.compliance_checklist_items
    IS 'Individual items in compliance checklists';

CREATE TABLE IF NOT EXISTS public.compliance_checklists
(
    id integer NOT NULL DEFAULT nextval('compliance_checklist_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    frequency character varying(20) COLLATE pg_catalog."default" NOT NULL,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT compliance_checklist_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.compliance_checklists
    IS 'Compliance checklists for audits';

CREATE TABLE IF NOT EXISTS public.configuration_audits
(
    id integer NOT NULL DEFAULT nextval('configuration_audit_id_seq'::regclass),
    settingid integer NOT NULL,
    oldvalue text COLLATE pg_catalog."default",
    newvalue text COLLATE pg_catalog."default",
    changeuserid smallint NOT NULL,
    changedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT configuration_audit_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.configuration_audits
    IS 'Audit trail for configuration changes';

CREATE TABLE IF NOT EXISTS public.configuration_categories
(
    id integer NOT NULL DEFAULT nextval('configuration_category_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT configuration_category_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.configuration_categories
    IS 'System configuration categories';

CREATE TABLE IF NOT EXISTS public.configuration_settings
(
    id integer NOT NULL DEFAULT nextval('configuration_setting_id_seq'::regclass),
    categoryid integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default" NOT NULL,
    datatype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    isencrypted boolean NOT NULL DEFAULT false,
    isreadonly boolean NOT NULL DEFAULT false,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT configuration_setting_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.configuration_settings
    IS 'System configuration settings';

CREATE TABLE IF NOT EXISTS public.customer_address
(
    id serial NOT NULL,
    customerid integer NOT NULL,
    addresstype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    address1 character varying(100) COLLATE pg_catalog."default" NOT NULL,
    address2 character varying(100) COLLATE pg_catalog."default",
    city character varying(50) COLLATE pg_catalog."default" NOT NULL,
    state character varying(2) COLLATE pg_catalog."default" NOT NULL,
    zipcode character varying(10) COLLATE pg_catalog."default" NOT NULL,
    isprimary boolean NOT NULL DEFAULT false,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_address_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.customer_address
    IS 'Customer shipping and billing addresses';

CREATE TABLE IF NOT EXISTS public.customer_addresses
(
    id serial NOT NULL,
    customer_id integer NOT NULL,
    address_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    address1 character varying(100) COLLATE pg_catalog."default" NOT NULL,
    address2 character varying(100) COLLATE pg_catalog."default",
    city character varying(50) COLLATE pg_catalog."default" NOT NULL,
    state character varying(2) COLLATE pg_catalog."default" NOT NULL,
    zip_code character varying(10) COLLATE pg_catalog."default" NOT NULL,
    is_primary boolean,
    is_billing boolean,
    is_shipping boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT customer_addresses_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.customer_contacts
(
    id integer NOT NULL DEFAULT nextval('customer_contact_id_seq'::regclass),
    customerid integer NOT NULL,
    contacttype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    contactvalue character varying(100) COLLATE pg_catalog."default" NOT NULL,
    isprimary boolean NOT NULL DEFAULT false,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_contact_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.customer_contacts
    IS 'Customer contact information (phone, email, etc)';

CREATE TABLE IF NOT EXISTS public.customer_doctors
(
    customer_id integer NOT NULL,
    doctor_id integer NOT NULL,
    CONSTRAINT customer_doctors_pkey PRIMARY KEY (customer_id, doctor_id)
);

CREATE TABLE IF NOT EXISTS public.customer_documents
(
    id integer NOT NULL DEFAULT nextval('customer_document_id_seq'::regclass),
    customerid integer NOT NULL,
    documenttypeid integer NOT NULL,
    filename character varying(255) COLLATE pg_catalog."default" NOT NULL,
    filepath character varying(500) COLLATE pg_catalog."default" NOT NULL,
    filesize integer NOT NULL,
    mimetype character varying(100) COLLATE pg_catalog."default" NOT NULL,
    uploaddate timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expirydate date,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Active'::character varying,
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_document_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.customer_documents
    IS 'Customer-related documents and files';

CREATE TABLE IF NOT EXISTS public.customer_facilities
(
    customer_id integer NOT NULL,
    facility_id integer NOT NULL,
    CONSTRAINT customer_facilities_pkey PRIMARY KEY (customer_id, facility_id)
);

CREATE TABLE IF NOT EXISTS public.customer_feedbacks
(
    id integer NOT NULL DEFAULT nextval('customer_feedback_id_seq'::regclass),
    customerid integer NOT NULL,
    categoryid integer NOT NULL,
    servicerequestid integer,
    rating smallint NOT NULL,
    comments text COLLATE pg_catalog."default",
    submissiondate timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'New'::character varying,
    response text COLLATE pg_catalog."default",
    responseuserid integer,
    responsedatetime timestamp without time zone,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_feedback_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.customer_feedbacks
    IS 'Customer feedback and ratings';

CREATE TABLE IF NOT EXISTS public.customer_insurances
(
    id serial NOT NULL,
    customer_id integer NOT NULL,
    insurance_company_id integer NOT NULL,
    policy_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    group_number character varying(50) COLLATE pg_catalog."default",
    effective_date date,
    termination_date date,
    is_primary boolean,
    is_active boolean,
    verification_date timestamp without time zone,
    verification_method character varying(50) COLLATE pg_catalog."default",
    verification_reference character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT customer_insurances_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.customer_notes
(
    id integer NOT NULL DEFAULT nextval('customer_note_id_seq'::regclass),
    customerid integer NOT NULL,
    notetype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    notetext text COLLATE pg_catalog."default" NOT NULL,
    createduserid smallint NOT NULL,
    createddatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_note_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.customer_notes
    IS 'Customer-related notes and comments';

CREATE TABLE IF NOT EXISTS public.customer_orders
(
    id integer NOT NULL DEFAULT nextval('customer_order_id_seq'::regclass),
    customerid integer NOT NULL,
    orderdate timestamp without time zone NOT NULL,
    statusid integer NOT NULL,
    shippingaddressid integer NOT NULL,
    billingaddressid integer NOT NULL,
    subtotal numeric(18, 2) NOT NULL,
    taxamount numeric(18, 2) NOT NULL,
    totalamount numeric(18, 2) NOT NULL,
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_order_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.customer_orders
    IS 'Customer orders';

CREATE TABLE IF NOT EXISTS public.customers
(
    id serial NOT NULL,
    company_id integer NOT NULL,
    first_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    middle_name character varying(50) COLLATE pg_catalog."default",
    date_of_birth date NOT NULL,
    ssn character varying(11) COLLATE pg_catalog."default",
    gender gender NOT NULL,
    marital_status maritalstatus,
    email character varying(100) COLLATE pg_catalog."default",
    phone_home character varying(20) COLLATE pg_catalog."default",
    phone_work character varying(20) COLLATE pg_catalog."default",
    phone_mobile character varying(20) COLLATE pg_catalog."default",
    is_active boolean NOT NULL,
    status_date timestamp without time zone,
    height integer,
    weight integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT customers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.delivery_schedules
(
    id serial NOT NULL,
    order_id integer NOT NULL,
    scheduled_date timestamp without time zone NOT NULL,
    delivery_window_start timestamp without time zone NOT NULL,
    delivery_window_end timestamp without time zone NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    driver_notes text COLLATE pg_catalog."default",
    customer_notes text COLLATE pg_catalog."default",
    actual_delivery_date timestamp without time zone,
    signature_required boolean,
    signature_obtained boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT delivery_schedules_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.departments
(
    id integer NOT NULL DEFAULT nextval('department_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    managerid smallint,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT department_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.departments
    IS 'Company departments';

CREATE TABLE IF NOT EXISTS public.doctors
(
    id serial NOT NULL,
    first_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    middle_name character varying(1) COLLATE pg_catalog."default",
    suffix character varying(10) COLLATE pg_catalog."default",
    npi character varying(10) COLLATE pg_catalog."default" NOT NULL,
    license_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    license_expiry date,
    upin_number character varying(20) COLLATE pg_catalog."default",
    medicaid_number character varying(20) COLLATE pg_catalog."default",
    address1 character varying(100) COLLATE pg_catalog."default" NOT NULL,
    address2 character varying(100) COLLATE pg_catalog."default",
    city character varying(50) COLLATE pg_catalog."default" NOT NULL,
    state character varying(2) COLLATE pg_catalog."default" NOT NULL,
    zip_code character varying(10) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(20) COLLATE pg_catalog."default",
    fax character varying(20) COLLATE pg_catalog."default",
    email character varying(100) COLLATE pg_catalog."default",
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT doctors_pkey PRIMARY KEY (id),
    CONSTRAINT doctors_npi_key UNIQUE (npi)
);

CREATE TABLE IF NOT EXISTS public.document_types
(
    id integer NOT NULL DEFAULT nextval('document_type_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    retentionperiod integer,
    isrequired boolean NOT NULL DEFAULT false,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT document_type_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.document_types
    IS 'Types of documents that can be stored';

CREATE TABLE IF NOT EXISTS public.employee_role_assignments
(
    id integer NOT NULL DEFAULT nextval('employee_role_assignment_id_seq'::regclass),
    employeeid integer NOT NULL,
    roleid integer NOT NULL,
    startdate date NOT NULL,
    enddate date,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT employee_role_assignment_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.employee_role_assignments
    IS 'Role assignments for employees';

CREATE TABLE IF NOT EXISTS public.employee_roles
(
    id integer NOT NULL DEFAULT nextval('employee_role_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    permissions text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT employee_role_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.employee_roles
    IS 'Employee roles and permissions';

CREATE TABLE IF NOT EXISTS public.employee_schedules
(
    id integer NOT NULL DEFAULT nextval('employee_schedule_id_seq'::regclass),
    employeeid integer NOT NULL,
    dayofweek smallint NOT NULL,
    starttime time without time zone NOT NULL,
    endtime time without time zone NOT NULL,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT employee_schedule_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.employee_schedules
    IS 'Employee work schedules';

CREATE TABLE IF NOT EXISTS public.employees
(
    id integer NOT NULL DEFAULT nextval('employee_id_seq'::regclass),
    departmentid integer NOT NULL,
    employeenumber character varying(20) COLLATE pg_catalog."default" NOT NULL,
    firstname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    lastname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(20) COLLATE pg_catalog."default",
    hiredate date NOT NULL,
    terminationdate date,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT employee_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.employees
    IS 'Employee information';

CREATE TABLE IF NOT EXISTS public.equipment_maintenances
(
    id integer NOT NULL DEFAULT nextval('equipment_maintenance_id_seq'::regclass),
    equipmentid integer NOT NULL,
    maintenancetype character varying(50) COLLATE pg_catalog."default" NOT NULL,
    maintenancedate date NOT NULL,
    performedby character varying(100) COLLATE pg_catalog."default" NOT NULL,
    cost numeric(18, 2),
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT equipment_maintenance_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.equipment_maintenances
    IS 'Equipment maintenance records';

CREATE TABLE IF NOT EXISTS public.equipment_types
(
    id integer NOT NULL DEFAULT nextval('equipment_type_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    manufacturer character varying(100) COLLATE pg_catalog."default",
    model character varying(50) COLLATE pg_catalog."default",
    hcpcs character varying(5) COLLATE pg_catalog."default",
    defaultprice numeric(18, 2),
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT equipment_type_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.equipment_types
    IS 'Equipment categories and default settings';

CREATE TABLE IF NOT EXISTS public.equipments
(
    id integer NOT NULL DEFAULT nextval('equipment_id_seq'::regclass),
    equipmenttypeid integer NOT NULL,
    serialnumber character varying(50) COLLATE pg_catalog."default" NOT NULL,
    purchasedate date,
    purchaseprice numeric(18, 2),
    warrantyexpiration date,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Available'::character varying,
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT equipment_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.equipments
    IS 'Medical equipment inventory';

CREATE TABLE IF NOT EXISTS public.facilities
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    facility_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    address1 character varying(100) COLLATE pg_catalog."default" NOT NULL,
    address2 character varying(100) COLLATE pg_catalog."default",
    city character varying(50) COLLATE pg_catalog."default" NOT NULL,
    state character varying(2) COLLATE pg_catalog."default" NOT NULL,
    zip_code character varying(10) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(20) COLLATE pg_catalog."default",
    fax character varying(20) COLLATE pg_catalog."default",
    email character varying(100) COLLATE pg_catalog."default",
    npi character varying(10) COLLATE pg_catalog."default",
    tax_id character varying(20) COLLATE pg_catalog."default",
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT facilities_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.feedback_categories
(
    id integer NOT NULL DEFAULT nextval('feedback_category_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT feedback_category_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.feedback_categories
    IS 'Categories for customer feedback';

CREATE TABLE IF NOT EXISTS public.insurance_companies
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    payer_id character varying(50) COLLATE pg_catalog."default" NOT NULL,
    address1 character varying(100) COLLATE pg_catalog."default",
    address2 character varying(100) COLLATE pg_catalog."default",
    city character varying(50) COLLATE pg_catalog."default",
    state character varying(2) COLLATE pg_catalog."default",
    zip_code character varying(10) COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default",
    fax character varying(20) COLLATE pg_catalog."default",
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT insurance_companies_pkey PRIMARY KEY (id),
    CONSTRAINT insurance_companies_payer_id_key UNIQUE (payer_id)
);

CREATE TABLE IF NOT EXISTS public.insurance_fee_schedules
(
    id serial NOT NULL,
    insurance_plan_id integer NOT NULL,
    billing_code_id integer NOT NULL,
    allowed_amount numeric(10, 2) NOT NULL,
    effective_date date NOT NULL,
    end_date date,
    notes text COLLATE pg_catalog."default",
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT insurance_fee_schedules_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.insurance_plans
(
    id serial NOT NULL,
    insurance_company_id integer NOT NULL,
    plan_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    plan_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    plan_number character varying(50) COLLATE pg_catalog."default",
    claims_address character varying(255) COLLATE pg_catalog."default",
    claims_phone character varying(20) COLLATE pg_catalog."default",
    claims_email character varying(255) COLLATE pg_catalog."default",
    payer_id character varying(50) COLLATE pg_catalog."default",
    supports_electronic_filing boolean,
    notes text COLLATE pg_catalog."default",
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT insurance_plans_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.integration_endpoints
(
    id integer NOT NULL DEFAULT nextval('integration_endpoint_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    url character varying(500) COLLATE pg_catalog."default" NOT NULL,
    authtype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    authcredentials text COLLATE pg_catalog."default",
    headers jsonb,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT integration_endpoint_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.integration_endpoints
    IS 'External system integration endpoints';

CREATE TABLE IF NOT EXISTS public.integration_logs
(
    id integer NOT NULL DEFAULT nextval('integration_log_id_seq'::regclass),
    endpointid integer NOT NULL,
    direction character varying(10) COLLATE pg_catalog."default" NOT NULL,
    requestdata text COLLATE pg_catalog."default",
    responsedata text COLLATE pg_catalog."default",
    statuscode integer,
    success boolean NOT NULL,
    errormessage text COLLATE pg_catalog."default",
    starttime timestamp without time zone NOT NULL,
    endtime timestamp without time zone NOT NULL,
    CONSTRAINT integration_log_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.integration_logs
    IS 'Integration execution history';

CREATE TABLE IF NOT EXISTS public.integration_mappings
(
    id integer NOT NULL DEFAULT nextval('integration_mapping_id_seq'::regclass),
    endpointid integer NOT NULL,
    sourcefield character varying(100) COLLATE pg_catalog."default" NOT NULL,
    targetfield character varying(100) COLLATE pg_catalog."default" NOT NULL,
    transformationrule text COLLATE pg_catalog."default",
    defaultvalue text COLLATE pg_catalog."default",
    isrequired boolean NOT NULL DEFAULT true,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT integration_mapping_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.integration_mappings
    IS 'Field mappings for integrations';

CREATE TABLE IF NOT EXISTS public.integration_schedules
(
    id integer NOT NULL DEFAULT nextval('integration_schedule_id_seq'::regclass),
    endpointid integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    cronexpression character varying(100) COLLATE pg_catalog."default" NOT NULL,
    lastruntime timestamp without time zone,
    nextruntime timestamp without time zone,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT integration_schedule_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.integration_schedules
    IS 'Scheduled integration jobs';

CREATE TABLE IF NOT EXISTS public.inventories
(
    id integer NOT NULL DEFAULT nextval('inventory_id_seq'::regclass),
    warehouseid integer NOT NULL,
    equipmenttypeid integer NOT NULL,
    quantity integer NOT NULL DEFAULT 0,
    reorderpoint integer NOT NULL DEFAULT 0,
    reorderquantity integer NOT NULL DEFAULT 0,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT inventory_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.inventories
    IS 'Equipment inventory by warehouse';

CREATE TABLE IF NOT EXISTS public.inventory_categories
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    parent_id integer,
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT inventory_categories_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.inventory_items
(
    id serial NOT NULL,
    category_id integer NOT NULL,
    manufacturer_id integer NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    model_number character varying(100) COLLATE pg_catalog."default" NOT NULL,
    item_type itemtype NOT NULL,
    purchase_price numeric(10, 2),
    rental_price numeric(10, 2),
    msrp numeric(10, 2),
    reorder_point integer,
    reorder_quantity integer,
    minimum_stock integer,
    hcpcs_code character varying(20) COLLATE pg_catalog."default",
    billing_description character varying(255) COLLATE pg_catalog."default",
    is_active boolean,
    is_serialized boolean,
    is_rentable boolean,
    requires_maintenance boolean,
    maintenance_interval_days integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT inventory_items_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.inventory_transactions
(
    id integer NOT NULL DEFAULT nextval('inventory_transaction_id_seq'::regclass),
    inventoryid integer NOT NULL,
    transactiontype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    quantity integer NOT NULL,
    referencetype character varying(20) COLLATE pg_catalog."default",
    referenceid integer,
    notes text COLLATE pg_catalog."default",
    createduserid smallint NOT NULL,
    createddatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT inventory_transaction_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.inventory_transactions
    IS 'Inventory movement transactions';

CREATE TABLE IF NOT EXISTS public.invoice_items
(
    id integer NOT NULL DEFAULT nextval('invoice_item_id_seq'::regclass),
    invoiceid integer NOT NULL,
    itemtype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    itemid integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    quantity integer NOT NULL,
    unitprice numeric(18, 2) NOT NULL,
    discount numeric(18, 2) NOT NULL DEFAULT 0,
    taxrate numeric(5, 2) NOT NULL DEFAULT 0,
    total numeric(18, 2) NOT NULL,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT invoice_item_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.invoice_items
    IS 'Individual line items in invoices';

CREATE TABLE IF NOT EXISTS public.invoices
(
    id integer NOT NULL DEFAULT nextval('invoice_id_seq'::regclass),
    customerid integer NOT NULL,
    invoicenumber character varying(20) COLLATE pg_catalog."default" NOT NULL,
    invoicedate date NOT NULL,
    duedate date NOT NULL,
    subtotal numeric(18, 2) NOT NULL,
    taxamount numeric(18, 2) NOT NULL,
    totalamount numeric(18, 2) NOT NULL,
    paidamount numeric(18, 2) NOT NULL DEFAULT 0,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Pending'::character varying,
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT invoice_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.invoices
    IS 'Customer invoices';

CREATE TABLE IF NOT EXISTS public.kb_article_feedbacks
(
    id integer NOT NULL DEFAULT nextval('kb_article_feedback_id_seq'::regclass),
    articleid integer NOT NULL,
    userid integer,
    rating smallint NOT NULL,
    comments text COLLATE pg_catalog."default",
    submissiondate timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT kb_article_feedback_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.kb_article_feedbacks
    IS 'Feedback on knowledge base articles';

CREATE TABLE IF NOT EXISTS public.kb_articles
(
    id integer NOT NULL DEFAULT nextval('kb_article_id_seq'::regclass),
    title character varying(200) COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    categoryid integer NOT NULL,
    authorid integer NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Draft'::character varying,
    tags text COLLATE pg_catalog."default",
    viewcount integer NOT NULL DEFAULT 0,
    publisheddate timestamp without time zone,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT kb_article_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.kb_articles
    IS 'Knowledge base articles';

CREATE TABLE IF NOT EXISTS public.kb_categories
(
    id integer NOT NULL DEFAULT nextval('kb_category_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    parentcategoryid integer,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT kb_category_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.kb_categories
    IS 'Knowledge base article categories';

CREATE TABLE IF NOT EXISTS public.maintenance_checklist_items
(
    id integer NOT NULL DEFAULT nextval('maintenance_checklist_item_id_seq'::regclass),
    checklistid integer NOT NULL,
    itemorder smallint NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    requiredaction text COLLATE pg_catalog."default",
    expectedvalue text COLLATE pg_catalog."default",
    isrequired boolean NOT NULL DEFAULT true,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT maintenance_checklist_item_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.maintenance_checklist_items
    IS 'Individual items in maintenance checklists';

CREATE TABLE IF NOT EXISTS public.maintenance_checklists
(
    id integer NOT NULL DEFAULT nextval('maintenance_checklist_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    equipmenttypeid integer NOT NULL,
    version character varying(10) COLLATE pg_catalog."default" NOT NULL,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT maintenance_checklist_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.maintenance_checklists
    IS 'Maintenance checklists by equipment type';

CREATE TABLE IF NOT EXISTS public.maintenance_log_items
(
    id integer NOT NULL DEFAULT nextval('maintenance_log_item_id_seq'::regclass),
    maintenancelogid integer NOT NULL,
    checklistitemid integer NOT NULL,
    actualvalue text COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT maintenance_log_item_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.maintenance_log_items
    IS 'Individual maintenance checklist item results';

CREATE TABLE IF NOT EXISTS public.maintenance_logs
(
    id serial NOT NULL,
    stock_item_id integer NOT NULL,
    maintenance_schedule_id integer,
    maintenance_date timestamp without time zone NOT NULL,
    completed_by character varying(100) COLLATE pg_catalog."default" NOT NULL,
    duration_minutes integer,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    notes text COLLATE pg_catalog."default",
    checklist_results text COLLATE pg_catalog."default",
    parts_replaced text COLLATE pg_catalog."default",
    labor_cost numeric(10, 2),
    parts_cost numeric(10, 2),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT maintenance_logs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.maintenance_schedules
(
    id serial NOT NULL,
    inventory_item_id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    interval_days integer NOT NULL,
    checklist text COLLATE pg_catalog."default",
    estimated_duration_minutes integer,
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT maintenance_schedules_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.manufacturers
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    contact_name character varying(100) COLLATE pg_catalog."default",
    contact_email character varying(255) COLLATE pg_catalog."default",
    contact_phone character varying(20) COLLATE pg_catalog."default",
    website character varying(255) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT manufacturers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.metric_types
(
    id integer NOT NULL DEFAULT nextval('metric_type_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    unit character varying(20) COLLATE pg_catalog."default",
    datatype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT metric_type_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.metric_types
    IS 'Types of system metrics';

CREATE TABLE IF NOT EXISTS public.notification_templates
(
    id integer NOT NULL DEFAULT nextval('notification_template_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    subject character varying(200) COLLATE pg_catalog."default",
    bodytemplate text COLLATE pg_catalog."default" NOT NULL,
    templatetype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    parameters text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notification_template_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.notification_templates
    IS 'Templates for system notifications';

CREATE TABLE IF NOT EXISTS public.notifications
(
    id integer NOT NULL DEFAULT nextval('notification_id_seq'::regclass),
    templateid integer NOT NULL,
    recipienttype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    recipientid integer NOT NULL,
    subject character varying(200) COLLATE pg_catalog."default",
    body text COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Pending'::character varying,
    sentattempts integer NOT NULL DEFAULT 0,
    lasterror text COLLATE pg_catalog."default",
    createddatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    sentdatetime timestamp without time zone,
    CONSTRAINT notification_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.notifications
    IS 'System notifications';

CREATE TABLE IF NOT EXISTS public.order_details
(
    id serial NOT NULL,
    order_id integer NOT NULL,
    inventory_item_id integer NOT NULL,
    sale_rent_type salerenttype NOT NULL,
    serial_number character varying(50) COLLATE pg_catalog."default",
    quantity integer NOT NULL,
    unit_price numeric(10, 2) NOT NULL,
    billable_price numeric(10, 2) NOT NULL,
    allowable_price numeric(10, 2),
    billing_code character varying(20) COLLATE pg_catalog."default" NOT NULL,
    modifier1 character varying(2) COLLATE pg_catalog."default",
    modifier2 character varying(2) COLLATE pg_catalog."default",
    modifier3 character varying(2) COLLATE pg_catalog."default",
    modifier4 character varying(2) COLLATE pg_catalog."default",
    dos_from date NOT NULL,
    dos_to date,
    pickup_date date,
    authorization_number character varying(50) COLLATE pg_catalog."default",
    authorization_type_id integer,
    is_completed boolean,
    is_cancelled boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT order_details_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.order_items
(
    id integer NOT NULL DEFAULT nextval('order_item_id_seq'::regclass),
    orderid integer NOT NULL,
    equipmenttypeid integer NOT NULL,
    quantity integer NOT NULL,
    unitprice numeric(18, 2) NOT NULL,
    discount numeric(18, 2) NOT NULL DEFAULT 0,
    total numeric(18, 2) NOT NULL,
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT order_item_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.order_items
    IS 'Individual items in customer orders';

CREATE TABLE IF NOT EXISTS public.order_status
(
    id serial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT order_status_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.order_status
    IS 'Order status types';

CREATE TABLE IF NOT EXISTS public.order_status_histories
(
    id integer NOT NULL DEFAULT nextval('order_status_history_id_seq'::regclass),
    order_id integer NOT NULL,
    status orderstatus NOT NULL,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT order_status_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.order_trackings
(
    id integer NOT NULL DEFAULT nextval('order_tracking_id_seq'::regclass),
    orderid integer NOT NULL,
    statusid integer NOT NULL,
    notes text COLLATE pg_catalog."default",
    createduserid smallint NOT NULL,
    createddatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT order_tracking_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.order_trackings
    IS 'Order status history';

CREATE TABLE IF NOT EXISTS public.orders
(
    id serial NOT NULL,
    customer_id integer NOT NULL,
    order_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    order_date timestamp without time zone NOT NULL,
    status orderstatus NOT NULL,
    delivery_date timestamp without time zone,
    shipping_method_id integer,
    tracking_number character varying(100) COLLATE pg_catalog."default",
    bill_date timestamp without time zone,
    total_amount numeric(10, 2) NOT NULL,
    insurance1_id integer,
    insurance2_id integer,
    icd10_codes character varying(500) COLLATE pg_catalog."default",
    prescribing_doctor_id integer,
    special_instructions text COLLATE pg_catalog."default",
    internal_notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT orders_pkey PRIMARY KEY (id),
    CONSTRAINT orders_order_number_key UNIQUE (order_number)
);

CREATE TABLE IF NOT EXISTS public.payment_adjustments
(
    id serial NOT NULL,
    payment_id integer NOT NULL,
    adjustment_type adjustmenttype NOT NULL,
    amount numeric(10, 2) NOT NULL,
    reason_code character varying(20) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT payment_adjustments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.payment_methods
(
    id integer NOT NULL DEFAULT nextval('payment_method_id_seq'::regclass),
    customerid integer NOT NULL,
    methodtype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    accountnumber character varying(50) COLLATE pg_catalog."default",
    expirydate date,
    nameonaccount character varying(100) COLLATE pg_catalog."default",
    billingaddress character varying(200) COLLATE pg_catalog."default",
    isprimary boolean NOT NULL DEFAULT false,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT payment_method_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.payment_methods
    IS 'Customer payment methods';

CREATE TABLE IF NOT EXISTS public.payments
(
    id serial NOT NULL,
    claim_id integer,
    order_id integer NOT NULL,
    payment_number character varying(50) COLLATE pg_catalog."default",
    payment_date timestamp without time zone NOT NULL,
    payment_type paymenttype NOT NULL,
    status paymentstatus NOT NULL,
    amount numeric(10, 2) NOT NULL,
    reference_number character varying(50) COLLATE pg_catalog."default",
    payment_method character varying(50) COLLATE pg_catalog."default",
    payment_source character varying(100) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT payments_pkey PRIMARY KEY (id),
    CONSTRAINT payments_payment_number_key UNIQUE (payment_number)
);

CREATE TABLE IF NOT EXISTS public.performance_logs
(
    id integer NOT NULL DEFAULT nextval('performance_log_id_seq'::regclass),
    component character varying(100) COLLATE pg_catalog."default" NOT NULL,
    operation character varying(100) COLLATE pg_catalog."default" NOT NULL,
    starttime timestamp without time zone NOT NULL,
    endtime timestamp without time zone NOT NULL,
    duration integer NOT NULL,
    success boolean NOT NULL,
    errordetails text COLLATE pg_catalog."default",
    metadata jsonb,
    CONSTRAINT performance_log_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.performance_logs
    IS 'System performance monitoring';

CREATE TABLE IF NOT EXISTS public.permissions
(
    id serial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    resource character varying(50) COLLATE pg_catalog."default" NOT NULL,
    action character varying(50) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT permissions_pkey PRIMARY KEY (id),
    CONSTRAINT permissions_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.quality_checklist_items
(
    id integer NOT NULL DEFAULT nextval('quality_checklist_item_id_seq'::regclass),
    checklistid integer NOT NULL,
    itemorder smallint NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    testmethod text COLLATE pg_catalog."default",
    acceptancecriteria text COLLATE pg_catalog."default" NOT NULL,
    isrequired boolean NOT NULL DEFAULT true,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT quality_checklist_item_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.quality_checklist_items
    IS 'Quality control checklist items';

CREATE TABLE IF NOT EXISTS public.quality_checklists
(
    id integer NOT NULL DEFAULT nextval('quality_checklist_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    equipmenttypeid integer NOT NULL,
    version character varying(10) COLLATE pg_catalog."default" NOT NULL,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT quality_checklist_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.quality_checklists
    IS 'Quality control checklists';

CREATE TABLE IF NOT EXISTS public.quality_inspections
(
    id integer NOT NULL DEFAULT nextval('quality_inspection_id_seq'::regclass),
    equipmentid integer NOT NULL,
    checklistid integer NOT NULL,
    inspectiondate timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    inspectorid integer NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'In Progress'::character varying,
    notes text COLLATE pg_catalog."default",
    completiondate timestamp without time zone,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT quality_inspection_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.quality_inspections
    IS 'Quality control inspection records';

CREATE TABLE IF NOT EXISTS public.report_definitions
(
    id integer NOT NULL DEFAULT nextval('report_definition_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default" NOT NULL,
    query text COLLATE pg_catalog."default" NOT NULL,
    parameters text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT report_definition_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.report_definitions
    IS 'Report definitions and queries';

CREATE TABLE IF NOT EXISTS public.report_executions
(
    id integer NOT NULL DEFAULT nextval('report_execution_id_seq'::regclass),
    reportid integer NOT NULL,
    scheduleid integer,
    starttime timestamp without time zone NOT NULL,
    endtime timestamp without time zone,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Running'::character varying,
    parameters text COLLATE pg_catalog."default",
    outputpath character varying(500) COLLATE pg_catalog."default",
    error text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT report_execution_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.report_executions
    IS 'Report execution history';

CREATE TABLE IF NOT EXISTS public.report_schedules
(
    id integer NOT NULL DEFAULT nextval('report_schedule_id_seq'::regclass),
    reportid integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    frequency character varying(20) COLLATE pg_catalog."default" NOT NULL,
    parameters text COLLATE pg_catalog."default",
    recipients text COLLATE pg_catalog."default" NOT NULL,
    isactive boolean NOT NULL DEFAULT true,
    lastruntime timestamp without time zone,
    nextruntime timestamp without time zone,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT report_schedule_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.report_schedules
    IS 'Scheduled report executions';

CREATE TABLE IF NOT EXISTS public.role_permissions
(
    role_id integer NOT NULL,
    permission_id integer NOT NULL,
    CONSTRAINT role_permissions_pkey PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id serial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT roles_pkey PRIMARY KEY (id),
    CONSTRAINT roles_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.service_histories
(
    id integer NOT NULL DEFAULT nextval('service_history_id_seq'::regclass),
    servicerequestid integer NOT NULL,
    actiondate timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    actiontype character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    technicianid integer NOT NULL,
    hours numeric(5, 2),
    parts text COLLATE pg_catalog."default",
    cost numeric(10, 2),
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT service_history_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.service_histories
    IS 'Service request history and actions';

CREATE TABLE IF NOT EXISTS public.service_requests
(
    id integer NOT NULL DEFAULT nextval('service_request_id_seq'::regclass),
    customerid integer NOT NULL,
    equipmentid integer NOT NULL,
    requestdate timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    priority character varying(20) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Pending'::character varying,
    assignedtechnicianid integer,
    scheduleddate timestamp without time zone,
    completiondate timestamp without time zone,
    resolution text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT service_request_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.service_requests
    IS 'Customer service requests';

CREATE TABLE IF NOT EXISTS public.shipping_methods
(
    id serial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    carrier character varying(50) COLLATE pg_catalog."default" NOT NULL,
    is_active boolean,
    tracking_url_template character varying(255) COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT shipping_methods_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.stock_items
(
    id serial NOT NULL,
    inventory_item_id integer NOT NULL,
    serial_number character varying(100) COLLATE pg_catalog."default",
    lot_number character varying(100) COLLATE pg_catalog."default",
    status itemstatus NOT NULL,
    warehouse_id integer NOT NULL,
    location_code character varying(50) COLLATE pg_catalog."default",
    purchase_date timestamp without time zone,
    purchase_order_number character varying(50) COLLATE pg_catalog."default",
    purchase_cost numeric(10, 2),
    notes text COLLATE pg_catalog."default",
    last_maintenance_date timestamp without time zone,
    next_maintenance_date timestamp without time zone,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT stock_items_pkey PRIMARY KEY (id),
    CONSTRAINT stock_items_serial_number_key UNIQUE (serial_number)
);

CREATE TABLE IF NOT EXISTS public.system_configs
(
    id serial NOT NULL,
    company_id integer NOT NULL,
    key character varying(100) COLLATE pg_catalog."default" NOT NULL,
    value character varying(500) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    is_encrypted boolean NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT system_configs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.system_metrics
(
    id integer NOT NULL DEFAULT nextval('system_metric_id_seq'::regclass),
    metrictypeid integer NOT NULL,
    value text COLLATE pg_catalog."default" NOT NULL,
    "timestamp" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    notes text COLLATE pg_catalog."default",
    CONSTRAINT system_metric_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.system_metrics
    IS 'System metric measurements';

CREATE TABLE IF NOT EXISTS public.table_backup_log
(
    id serial NOT NULL,
    original_schema character varying(255) COLLATE pg_catalog."default",
    original_table character varying(255) COLLATE pg_catalog."default",
    backup_schema character varying(255) COLLATE pg_catalog."default",
    backup_table character varying(255) COLLATE pg_catalog."default",
    backup_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    row_count integer,
    CONSTRAINT table_backup_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.table_rename_log
(
    id serial NOT NULL,
    schema_name character varying(255) COLLATE pg_catalog."default",
    old_name character varying(255) COLLATE pg_catalog."default",
    new_name character varying(255) COLLATE pg_catalog."default",
    validation_type character varying(50) COLLATE pg_catalog."default",
    message text COLLATE pg_catalog."default",
    status character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT table_rename_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.task_categories
(
    id integer NOT NULL DEFAULT nextval('task_category_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT task_category_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.task_categories
    IS 'Categories for tasks';

CREATE TABLE IF NOT EXISTS public.task_priorities
(
    id integer NOT NULL DEFAULT nextval('task_priority_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    sla_hours integer,
    color_code character varying(7) COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT task_priority_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.task_priorities
    IS 'Priority levels for tasks';

CREATE TABLE IF NOT EXISTS public.tasks
(
    id integer NOT NULL DEFAULT nextval('task_id_seq'::regclass),
    title character varying(200) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    categoryid integer NOT NULL,
    priorityid integer NOT NULL,
    assigneeid integer,
    createdbyid integer NOT NULL,
    duedate timestamp without time zone,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'New'::character varying,
    progress smallint NOT NULL DEFAULT 0,
    parenttaskid integer,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT task_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.tasks
    IS 'Task management system';

CREATE TABLE IF NOT EXISTS public.user_roles
(
    user_id integer NOT NULL,
    role_id integer NOT NULL,
    CONSTRAINT user_roles_pkey PRIMARY KEY (user_id, role_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    hashed_password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    full_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    is_active boolean NOT NULL,
    company_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email),
    CONSTRAINT users_username_key UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS public.warehouses
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    code character varying(20) COLLATE pg_catalog."default" NOT NULL,
    address_line1 character varying(255) COLLATE pg_catalog."default" NOT NULL,
    address_line2 character varying(255) COLLATE pg_catalog."default",
    city character varying(100) COLLATE pg_catalog."default" NOT NULL,
    state character varying(2) COLLATE pg_catalog."default" NOT NULL,
    zip_code character varying(10) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(20) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    manager_name character varying(100) COLLATE pg_catalog."default",
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT warehouses_pkey PRIMARY KEY (id),
    CONSTRAINT warehouses_code_key UNIQUE (code)
);

ALTER TABLE IF EXISTS public.appointment_reminders
    ADD CONSTRAINT fk_appointment_reminder_appointment FOREIGN KEY (appointmentid)
    REFERENCES public.appointments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.appointments
    ADD CONSTRAINT fk_appointment_type FOREIGN KEY (appointmenttypeid)
    REFERENCES public.appointment_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.audit_logs
    ADD CONSTRAINT audit_logs_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.backup_logs
    ADD CONSTRAINT fk_backup_log_initiated_by FOREIGN KEY (initiatedby)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.claim_line_items
    ADD CONSTRAINT claim_line_items_claim_id_fkey FOREIGN KEY (claim_id)
    REFERENCES public.claims (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.claim_line_items
    ADD CONSTRAINT claim_line_items_order_detail_id_fkey FOREIGN KEY (order_detail_id)
    REFERENCES public.order_details (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.claim_status_histories
    ADD CONSTRAINT claim_status_history_claim_id_fkey FOREIGN KEY (claim_id)
    REFERENCES public.claims (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.claims
    ADD CONSTRAINT claims_insurance_id_fkey FOREIGN KEY (insurance_id)
    REFERENCES public.customer_insurances (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.claims
    ADD CONSTRAINT claims_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.cmnform_0404bs
    ADD CONSTRAINT fk_cmnform_0404b_cmnform FOREIGN KEY (cmnformid)
    REFERENCES public.cmnforms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS cmnform_0404b_pkey
    ON public.cmnform_0404bs(cmnformid);


ALTER TABLE IF EXISTS public.cmnform_0484s
    ADD CONSTRAINT fk_cmnform_0484_cmnform FOREIGN KEY (cmnformid)
    REFERENCES public.cmnforms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS cmnform_0484_pkey
    ON public.cmnform_0484s(cmnformid);


ALTER TABLE IF EXISTS public.communication_logs
    ADD CONSTRAINT fk_communication_log_notification FOREIGN KEY (notificationid)
    REFERENCES public.notifications (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.compliance_audit_items
    ADD CONSTRAINT fk_compliance_audit_item_audit FOREIGN KEY (auditid)
    REFERENCES public.compliance_audits (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.compliance_audit_items
    ADD CONSTRAINT fk_compliance_audit_item_checklist_item FOREIGN KEY (checklistitemid)
    REFERENCES public.compliance_checklist_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.compliance_audits
    ADD CONSTRAINT fk_compliance_audit_checklist FOREIGN KEY (checklistid)
    REFERENCES public.compliance_checklists (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.compliance_checklist_items
    ADD CONSTRAINT fk_compliance_checklist_item_checklist FOREIGN KEY (checklistid)
    REFERENCES public.compliance_checklists (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.configuration_audits
    ADD CONSTRAINT fk_configuration_audit_setting FOREIGN KEY (settingid)
    REFERENCES public.configuration_settings (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.configuration_settings
    ADD CONSTRAINT fk_configuration_setting_category FOREIGN KEY (categoryid)
    REFERENCES public.configuration_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_addresses
    ADD CONSTRAINT customer_addresses_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_doctors
    ADD CONSTRAINT customer_doctors_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_doctors
    ADD CONSTRAINT customer_doctors_doctor_id_fkey FOREIGN KEY (doctor_id)
    REFERENCES public.doctors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_documents
    ADD CONSTRAINT fk_customer_document_type FOREIGN KEY (documenttypeid)
    REFERENCES public.document_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_facilities
    ADD CONSTRAINT customer_facilities_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_facilities
    ADD CONSTRAINT customer_facilities_facility_id_fkey FOREIGN KEY (facility_id)
    REFERENCES public.facilities (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_feedbacks
    ADD CONSTRAINT fk_customer_feedback_category FOREIGN KEY (categoryid)
    REFERENCES public.feedback_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_feedbacks
    ADD CONSTRAINT fk_customer_feedback_response_user FOREIGN KEY (responseuserid)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_feedbacks
    ADD CONSTRAINT fk_customer_feedback_service_request FOREIGN KEY (servicerequestid)
    REFERENCES public.service_requests (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_insurances
    ADD CONSTRAINT customer_insurances_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_insurances
    ADD CONSTRAINT customer_insurances_insurance_company_id_fkey FOREIGN KEY (insurance_company_id)
    REFERENCES public.insurance_companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_orders
    ADD CONSTRAINT fk_customer_order_billing_address FOREIGN KEY (billingaddressid)
    REFERENCES public.customer_address (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_orders
    ADD CONSTRAINT fk_customer_order_shipping_address FOREIGN KEY (shippingaddressid)
    REFERENCES public.customer_address (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_orders
    ADD CONSTRAINT fk_customer_order_status FOREIGN KEY (statusid)
    REFERENCES public.order_status (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customers
    ADD CONSTRAINT customers_company_id_fkey FOREIGN KEY (company_id)
    REFERENCES public.companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.delivery_schedules
    ADD CONSTRAINT delivery_schedules_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_role_assignments
    ADD CONSTRAINT fk_employee_role_assignment_employee FOREIGN KEY (employeeid)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_role_assignments
    ADD CONSTRAINT fk_employee_role_assignment_role FOREIGN KEY (roleid)
    REFERENCES public.employee_roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_schedules
    ADD CONSTRAINT fk_employee_schedule_employee FOREIGN KEY (employeeid)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employees
    ADD CONSTRAINT fk_employee_department FOREIGN KEY (departmentid)
    REFERENCES public.departments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.equipment_maintenances
    ADD CONSTRAINT fk_equipment_maintenance_equipment FOREIGN KEY (equipmentid)
    REFERENCES public.equipments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.equipments
    ADD CONSTRAINT fk_equipment_type FOREIGN KEY (equipmenttypeid)
    REFERENCES public.equipment_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.insurance_fee_schedules
    ADD CONSTRAINT insurance_fee_schedules_billing_code_id_fkey FOREIGN KEY (billing_code_id)
    REFERENCES public.billing_codes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.insurance_fee_schedules
    ADD CONSTRAINT insurance_fee_schedules_insurance_plan_id_fkey FOREIGN KEY (insurance_plan_id)
    REFERENCES public.insurance_plans (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.insurance_plans
    ADD CONSTRAINT insurance_plans_insurance_company_id_fkey FOREIGN KEY (insurance_company_id)
    REFERENCES public.insurance_companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.integration_logs
    ADD CONSTRAINT fk_integration_log_endpoint FOREIGN KEY (endpointid)
    REFERENCES public.integration_endpoints (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.integration_mappings
    ADD CONSTRAINT fk_integration_mapping_endpoint FOREIGN KEY (endpointid)
    REFERENCES public.integration_endpoints (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.integration_schedules
    ADD CONSTRAINT fk_integration_schedule_endpoint FOREIGN KEY (endpointid)
    REFERENCES public.integration_endpoints (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventories
    ADD CONSTRAINT fk_inventory_equipment_type FOREIGN KEY (equipmenttypeid)
    REFERENCES public.equipment_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory_categories
    ADD CONSTRAINT inventory_categories_parent_id_fkey FOREIGN KEY (parent_id)
    REFERENCES public.inventory_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory_items
    ADD CONSTRAINT inventory_items_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES public.inventory_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory_items
    ADD CONSTRAINT inventory_items_manufacturer_id_fkey FOREIGN KEY (manufacturer_id)
    REFERENCES public.manufacturers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory_transactions
    ADD CONSTRAINT fk_inventory_transaction_inventory FOREIGN KEY (inventoryid)
    REFERENCES public.inventories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.invoice_items
    ADD CONSTRAINT fk_invoice_item_invoice FOREIGN KEY (invoiceid)
    REFERENCES public.invoices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.kb_article_feedbacks
    ADD CONSTRAINT fk_kb_article_feedback_article FOREIGN KEY (articleid)
    REFERENCES public.kb_articles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.kb_article_feedbacks
    ADD CONSTRAINT fk_kb_article_feedback_user FOREIGN KEY (userid)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.kb_articles
    ADD CONSTRAINT fk_kb_article_author FOREIGN KEY (authorid)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.kb_articles
    ADD CONSTRAINT fk_kb_article_category FOREIGN KEY (categoryid)
    REFERENCES public.kb_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.kb_categories
    ADD CONSTRAINT fk_kb_category_parent FOREIGN KEY (parentcategoryid)
    REFERENCES public.kb_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.maintenance_checklist_items
    ADD CONSTRAINT fk_maintenance_checklist_item_checklist FOREIGN KEY (checklistid)
    REFERENCES public.maintenance_checklists (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.maintenance_checklists
    ADD CONSTRAINT fk_maintenance_checklist_equipment_type FOREIGN KEY (equipmenttypeid)
    REFERENCES public.equipment_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.maintenance_log_items
    ADD CONSTRAINT fk_maintenance_log_item_checklist_item FOREIGN KEY (checklistitemid)
    REFERENCES public.maintenance_checklist_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.maintenance_logs
    ADD CONSTRAINT maintenance_logs_maintenance_schedule_id_fkey FOREIGN KEY (maintenance_schedule_id)
    REFERENCES public.maintenance_schedules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.maintenance_logs
    ADD CONSTRAINT maintenance_logs_stock_item_id_fkey FOREIGN KEY (stock_item_id)
    REFERENCES public.stock_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.maintenance_schedules
    ADD CONSTRAINT maintenance_schedules_inventory_item_id_fkey FOREIGN KEY (inventory_item_id)
    REFERENCES public.inventory_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT fk_notification_template FOREIGN KEY (templateid)
    REFERENCES public.notification_templates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_details
    ADD CONSTRAINT order_details_authorization_type_id_fkey FOREIGN KEY (authorization_type_id)
    REFERENCES public.authorization_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_details
    ADD CONSTRAINT order_details_inventory_item_id_fkey FOREIGN KEY (inventory_item_id)
    REFERENCES public.inventory_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_details
    ADD CONSTRAINT order_details_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_items
    ADD CONSTRAINT fk_order_item_equipment_type FOREIGN KEY (equipmenttypeid)
    REFERENCES public.equipment_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_items
    ADD CONSTRAINT fk_order_item_order FOREIGN KEY (orderid)
    REFERENCES public.customer_orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_status_histories
    ADD CONSTRAINT order_status_history_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_trackings
    ADD CONSTRAINT fk_order_tracking_order FOREIGN KEY (orderid)
    REFERENCES public.customer_orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_trackings
    ADD CONSTRAINT fk_order_tracking_status FOREIGN KEY (statusid)
    REFERENCES public.order_status (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT orders_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT orders_insurance1_id_fkey FOREIGN KEY (insurance1_id)
    REFERENCES public.customer_insurances (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT orders_insurance2_id_fkey FOREIGN KEY (insurance2_id)
    REFERENCES public.customer_insurances (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT orders_prescribing_doctor_id_fkey FOREIGN KEY (prescribing_doctor_id)
    REFERENCES public.doctors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT orders_shipping_method_id_fkey FOREIGN KEY (shipping_method_id)
    REFERENCES public.shipping_methods (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.payment_adjustments
    ADD CONSTRAINT payment_adjustments_payment_id_fkey FOREIGN KEY (payment_id)
    REFERENCES public.payments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_claim_id_fkey FOREIGN KEY (claim_id)
    REFERENCES public.claims (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.quality_checklist_items
    ADD CONSTRAINT fk_quality_checklist_item_checklist FOREIGN KEY (checklistid)
    REFERENCES public.quality_checklists (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.quality_checklists
    ADD CONSTRAINT fk_quality_checklist_equipment_type FOREIGN KEY (equipmenttypeid)
    REFERENCES public.equipment_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.quality_inspections
    ADD CONSTRAINT fk_quality_inspection_checklist FOREIGN KEY (checklistid)
    REFERENCES public.quality_checklists (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.quality_inspections
    ADD CONSTRAINT fk_quality_inspection_equipment FOREIGN KEY (equipmentid)
    REFERENCES public.equipments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.quality_inspections
    ADD CONSTRAINT fk_quality_inspection_inspector FOREIGN KEY (inspectorid)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.report_executions
    ADD CONSTRAINT fk_report_execution_report FOREIGN KEY (reportid)
    REFERENCES public.report_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.report_executions
    ADD CONSTRAINT fk_report_execution_schedule FOREIGN KEY (scheduleid)
    REFERENCES public.report_schedules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.report_schedules
    ADD CONSTRAINT fk_report_schedule_report FOREIGN KEY (reportid)
    REFERENCES public.report_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.role_permissions
    ADD CONSTRAINT role_permissions_permission_id_fkey FOREIGN KEY (permission_id)
    REFERENCES public.permissions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.role_permissions
    ADD CONSTRAINT role_permissions_role_id_fkey FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.service_histories
    ADD CONSTRAINT fk_service_history_service_request FOREIGN KEY (servicerequestid)
    REFERENCES public.service_requests (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.service_histories
    ADD CONSTRAINT fk_service_history_technician FOREIGN KEY (technicianid)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.service_requests
    ADD CONSTRAINT fk_service_request_equipment FOREIGN KEY (equipmentid)
    REFERENCES public.equipments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.service_requests
    ADD CONSTRAINT fk_service_request_technician FOREIGN KEY (assignedtechnicianid)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.stock_items
    ADD CONSTRAINT stock_items_inventory_item_id_fkey FOREIGN KEY (inventory_item_id)
    REFERENCES public.inventory_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.stock_items
    ADD CONSTRAINT stock_items_warehouse_id_fkey FOREIGN KEY (warehouse_id)
    REFERENCES public.warehouses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.system_configs
    ADD CONSTRAINT system_configs_company_id_fkey FOREIGN KEY (company_id)
    REFERENCES public.companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.system_metrics
    ADD CONSTRAINT fk_system_metric_type FOREIGN KEY (metrictypeid)
    REFERENCES public.metric_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT fk_task_assignee FOREIGN KEY (assigneeid)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT fk_task_category FOREIGN KEY (categoryid)
    REFERENCES public.task_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT fk_task_created_by FOREIGN KEY (createdbyid)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT fk_task_parent FOREIGN KEY (parenttaskid)
    REFERENCES public.tasks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT fk_task_priority FOREIGN KEY (priorityid)
    REFERENCES public.task_priorities (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_roles
    ADD CONSTRAINT user_roles_role_id_fkey FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_roles
    ADD CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT users_company_id_fkey FOREIGN KEY (company_id)
    REFERENCES public.companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;