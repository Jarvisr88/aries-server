-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.ability_eligibility_requests
(
    id integer NOT NULL DEFAULT nextval('ability_eligibility_request_id_seq'::regclass),
    customerid integer NOT NULL,
    customerinsuranceid integer NOT NULL,
    requesttime timestamp without time zone NOT NULL,
    requesttext text COLLATE pg_catalog."default" NOT NULL,
    responsetime timestamp without time zone,
    responsetext text COLLATE pg_catalog."default",
    submissiontime timestamp without time zone,
    submissiontext text COLLATE pg_catalog."default",
    CONSTRAINT ability_eligibility_request_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.accounting_periods
(
    id serial NOT NULL,
    period_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'open'::character varying,
    is_adjustment_period boolean DEFAULT false,
    notes text COLLATE pg_catalog."default",
    closed_date timestamp without time zone,
    closed_by character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT accounting_periods_pkey PRIMARY KEY (id),
    CONSTRAINT uq_accounting_period_dates UNIQUE (start_date, end_date)
);

COMMENT ON TABLE public.accounting_periods
    IS 'Accounting period definitions';

CREATE TABLE IF NOT EXISTS public.activity_logs
(
    id serial NOT NULL,
    activity_type_id integer NOT NULL,
    user_id integer,
    entity_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    entity_id integer NOT NULL,
    action character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    ip_address character varying(45) COLLATE pg_catalog."default",
    user_agent text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT activity_logs_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.activity_logs
    IS 'User activity tracking';

CREATE TABLE IF NOT EXISTS public.activity_types
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    requires_notes boolean DEFAULT false,
    is_system_type boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT activity_types_pkey PRIMARY KEY (id),
    CONSTRAINT uq_activity_type_name UNIQUE (name)
);

COMMENT ON TABLE public.activity_types
    IS 'Predefined types of system activities';

CREATE TABLE IF NOT EXISTS public.addresses
(
    id serial NOT NULL,
    address_type character varying(50) COLLATE pg_catalog."default",
    address_line1 character varying(200) COLLATE pg_catalog."default" NOT NULL,
    address_line2 character varying(200) COLLATE pg_catalog."default",
    city character varying(100) COLLATE pg_catalog."default" NOT NULL,
    state character varying(50) COLLATE pg_catalog."default" NOT NULL,
    postal_code character varying(20) COLLATE pg_catalog."default" NOT NULL,
    country character varying(100) COLLATE pg_catalog."default" DEFAULT 'USA'::character varying,
    latitude numeric(10, 8),
    longitude numeric(11, 8),
    is_verified boolean DEFAULT false,
    is_primary boolean DEFAULT false,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT addresses_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.addresses
    IS 'Physical and mailing addresses';

CREATE TABLE IF NOT EXISTS public.alembic_versions
(
    version_num character varying(32) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num)
);

CREATE TABLE IF NOT EXISTS public.api_keys
(
    id serial NOT NULL,
    key_identifier character varying(100) COLLATE pg_catalog."default" NOT NULL,
    key_secret character varying(100) COLLATE pg_catalog."default" NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    owner_id integer,
    permissions jsonb,
    rate_limit integer,
    rate_limit_period character varying(20) COLLATE pg_catalog."default",
    ip_whitelist text[] COLLATE pg_catalog."default",
    valid_from timestamp without time zone NOT NULL,
    valid_until timestamp without time zone,
    last_used_at timestamp without time zone,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT api_keys_pkey PRIMARY KEY (id),
    CONSTRAINT api_keys_key_identifier_key UNIQUE (key_identifier)
);

COMMENT ON TABLE public.api_keys
    IS 'API key management';

CREATE TABLE IF NOT EXISTS public.api_logs
(
    id serial NOT NULL,
    api_key_id integer,
    endpoint_id integer,
    request_id character varying(50) COLLATE pg_catalog."default" NOT NULL,
    request_method character varying(10) COLLATE pg_catalog."default" NOT NULL,
    request_path character varying(500) COLLATE pg_catalog."default" NOT NULL,
    request_headers jsonb,
    request_body jsonb,
    response_status integer,
    response_headers jsonb,
    response_body jsonb,
    ip_address character varying(45) COLLATE pg_catalog."default",
    user_agent text COLLATE pg_catalog."default",
    duration integer,
    error_type character varying(50) COLLATE pg_catalog."default",
    error_message text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT api_logs_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.api_logs
    IS 'API request/response logs';

CREATE TABLE IF NOT EXISTS public.api_metrics
(
    id serial NOT NULL,
    api_key_id integer,
    endpoint_id integer,
    "timestamp" timestamp without time zone NOT NULL,
    requests_count integer DEFAULT 0,
    success_count integer DEFAULT 0,
    error_count integer DEFAULT 0,
    total_duration bigint DEFAULT 0,
    avg_duration integer,
    min_duration integer,
    max_duration integer,
    status_codes jsonb,
    error_types jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT api_metrics_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.api_metrics
    IS 'API usage metrics';

CREATE TABLE IF NOT EXISTS public.appointment_attendees
(
    id serial NOT NULL,
    appointment_id integer NOT NULL,
    attendee_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    attendee_id integer NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    response_date timestamp without time zone,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT appointment_attendees_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.appointment_attendees
    IS 'Appointment participants and their responses';

CREATE TABLE IF NOT EXISTS public.appointment_reminders
(
    id integer NOT NULL DEFAULT nextval('appointment_reminder_id_seq'::regclass),
    appointmentid integer NOT NULL,
    remindertype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    remindertime timestamp without time zone NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Pending'::character varying,
    lastsendattempt timestamp without time zone,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT appointment_reminder_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.appointment_reminders
    IS 'Appointment reminders and their status';

CREATE TABLE IF NOT EXISTS public.appointment_types
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    duration integer NOT NULL,
    color character varying(7) COLLATE pg_catalog."default",
    requires_approval boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT appointment_types_pkey PRIMARY KEY (id),
    CONSTRAINT uq_appointment_type_name UNIQUE (name)
);

COMMENT ON TABLE public.appointment_types
    IS 'Predefined types of appointments';

CREATE TABLE IF NOT EXISTS public.appointments
(
    id serial NOT NULL,
    calendar_id integer NOT NULL,
    appointment_type_id integer NOT NULL,
    title character varying(200) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    start_time timestamp without time zone NOT NULL,
    end_time timestamp without time zone NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'scheduled'::character varying,
    location character varying(200) COLLATE pg_catalog."default",
    is_all_day boolean DEFAULT false,
    is_recurring boolean DEFAULT false,
    recurrence_rule text COLLATE pg_catalog."default",
    reminder_before integer,
    customer_id integer,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT appointments_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.appointments
    IS 'Main appointment scheduling table';

CREATE TABLE IF NOT EXISTS public.audit_action_types
(
    id integer NOT NULL DEFAULT nextval('audit_action_type_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT audit_action_type_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.audit_action_types
    IS 'Types of audit actions';

CREATE TABLE IF NOT EXISTS public.audit_field_changes
(
    id serial NOT NULL,
    audit_log_id integer NOT NULL,
    field_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    old_value text COLLATE pg_catalog."default",
    new_value text COLLATE pg_catalog."default",
    change_type character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT audit_field_changes_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.audit_field_changes
    IS 'Detailed field-level changes';

CREATE TABLE IF NOT EXISTS public.audit_logs
(
    id serial NOT NULL,
    table_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    record_id integer NOT NULL,
    action character varying(50) COLLATE pg_catalog."default" NOT NULL,
    user_id integer,
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    old_data jsonb,
    new_data jsonb,
    ip_address character varying(45) COLLATE pg_catalog."default",
    user_agent text COLLATE pg_catalog."default",
    CONSTRAINT audit_logs_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.audit_logs
    IS 'System-wide audit logging';

CREATE TABLE IF NOT EXISTS public.authorization_types
(
    id serial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    requires_number boolean,
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT authorization_types_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.availability_exceptions
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    exception_date date NOT NULL,
    start_time time without time zone,
    end_time time without time zone,
    is_unavailable boolean DEFAULT true,
    reason character varying(200) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT availability_exceptions_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.availability_exceptions
    IS 'Exceptions to regular availability';

CREATE TABLE IF NOT EXISTS public.availability_schedules
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    schedule_name character varying(100) COLLATE pg_catalog."default",
    day_of_week integer NOT NULL,
    start_time time without time zone NOT NULL,
    end_time time without time zone NOT NULL,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT availability_schedules_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.availability_schedules
    IS 'Regular availability schedules';

CREATE TABLE IF NOT EXISTS public.backup_logs
(
    id integer NOT NULL DEFAULT nextval('backup_log_id_seq'::regclass),
    backuptype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    starttime timestamp without time zone NOT NULL,
    endtime timestamp without time zone,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'In Progress'::character varying,
    filesize bigint,
    filepath character varying(500) COLLATE pg_catalog."default",
    checksum character varying(64) COLLATE pg_catalog."default",
    compressiontype character varying(20) COLLATE pg_catalog."default",
    retentiondays integer NOT NULL,
    success boolean,
    errormessage text COLLATE pg_catalog."default",
    metadata jsonb,
    initiatedby integer,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT backup_log_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.backup_logs
    IS 'System backup history and metadata';

CREATE TABLE IF NOT EXISTS public.batch_logs
(
    id integer NOT NULL DEFAULT nextval('batch_log_id_seq'::regclass),
    batchid character varying(50) COLLATE pg_catalog."default" NOT NULL,
    processname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    starttime timestamp without time zone NOT NULL,
    endtime timestamp without time zone,
    recordsprocessed integer NOT NULL DEFAULT 0,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    errormessage text COLLATE pg_catalog."default",
    lastupdateuserid smallint,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT batch_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.batch_status
(
    id serial NOT NULL,
    batchid character varying(50) COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    message text COLLATE pg_catalog."default",
    createdat timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    lastupdateuserid smallint,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT batch_status_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.batchpayments
(
    id integer NOT NULL DEFAULT nextval('batchpayment_id_seq'::regclass),
    insurancecompanyid integer NOT NULL,
    checknumber character varying(14) COLLATE pg_catalog."default" NOT NULL,
    checkdate date NOT NULL,
    checkamount numeric(18, 2) NOT NULL,
    amountused numeric(18, 2) NOT NULL,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT batchpayment_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.billing_accounts
(
    id serial NOT NULL,
    customer_id integer NOT NULL,
    account_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    billing_cycle_id integer NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    credit_limit numeric(10, 2),
    current_balance numeric(10, 2) DEFAULT 0,
    last_invoice_date date,
    next_invoice_date date,
    payment_terms character varying(50) COLLATE pg_catalog."default",
    payment_due_days integer,
    auto_pay boolean DEFAULT false,
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT billing_accounts_pkey PRIMARY KEY (id),
    CONSTRAINT billing_accounts_account_number_key UNIQUE (account_number)
);

COMMENT ON TABLE public.billing_accounts
    IS 'Customer billing accounts';

CREATE TABLE IF NOT EXISTS public.billing_codes
(
    id serial NOT NULL,
    code character varying(20) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    code_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    effective_date date NOT NULL,
    end_date date,
    default_price numeric(10, 2),
    unit_type character varying(20) COLLATE pg_catalog."default",
    is_active boolean,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT billing_codes_pkey PRIMARY KEY (id),
    CONSTRAINT billing_codes_code_key UNIQUE (code)
);

CREATE TABLE IF NOT EXISTS public.billing_cycles
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    frequency_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    frequency_interval integer NOT NULL,
    description text COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT billing_cycles_pkey PRIMARY KEY (id),
    CONSTRAINT uq_billing_cycle_name UNIQUE (name)
);

COMMENT ON TABLE public.billing_cycles
    IS 'Billing cycle configurations';

CREATE TABLE IF NOT EXISTS public.billing_schedules
(
    id serial NOT NULL,
    billing_account_id integer NOT NULL,
    schedule_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    start_date date NOT NULL,
    end_date date,
    next_run_date date NOT NULL,
    frequency character varying(20) COLLATE pg_catalog."default" NOT NULL,
    day_of_month integer,
    day_of_week integer,
    amount numeric(10, 2),
    description text COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    last_run_date date,
    last_run_status character varying(20) COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT billing_schedules_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.billing_schedules
    IS 'Automated billing schedules';

CREATE TABLE IF NOT EXISTS public.billingtypes
(
    id integer NOT NULL DEFAULT nextval('billingtype_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    lastupdateuserid smallint,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT billingtype_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.calendar_sharing
(
    id serial NOT NULL,
    calendar_id integer NOT NULL,
    user_id integer NOT NULL,
    permission_level character varying(20) COLLATE pg_catalog."default" DEFAULT 'read'::character varying,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT calendar_sharing_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.calendar_sharing
    IS 'Calendar sharing permissions';

CREATE TABLE IF NOT EXISTS public.calendars
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    calendar_type character varying(50) COLLATE pg_catalog."default",
    owner_type character varying(50) COLLATE pg_catalog."default",
    owner_id integer,
    color character varying(7) COLLATE pg_catalog."default",
    is_public boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT calendars_pkey PRIMARY KEY (id),
    CONSTRAINT uq_calendar_name_owner UNIQUE (name, owner_type, owner_id)
);

COMMENT ON TABLE public.calendars
    IS 'Calendar management for different entities';

CREATE TABLE IF NOT EXISTS public.changes
(
    tablename character varying(64) COLLATE pg_catalog."default" NOT NULL,
    sessionid integer NOT NULL,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT changes_pkey PRIMARY KEY (tablename, sessionid)
);

CREATE TABLE IF NOT EXISTS public.chart_of_accounts
(
    id serial NOT NULL,
    account_number character varying(20) COLLATE pg_catalog."default" NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    account_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    parent_account_id integer,
    is_header boolean DEFAULT false,
    is_control_account boolean DEFAULT false,
    normal_balance character varying(10) COLLATE pg_catalog."default" NOT NULL,
    current_balance numeric(15, 2) DEFAULT 0,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT chart_of_accounts_pkey PRIMARY KEY (id),
    CONSTRAINT chart_of_accounts_account_number_key UNIQUE (account_number)
);

COMMENT ON TABLE public.chart_of_accounts
    IS 'Chart of accounts structure';

CREATE TABLE IF NOT EXISTS public.claim_denials
(
    id serial NOT NULL,
    claim_id integer NOT NULL,
    reason_id integer NOT NULL,
    denial_date date NOT NULL,
    appeal_deadline date,
    appeal_status character varying(20) COLLATE pg_catalog."default",
    appeal_date date,
    resolution_date date,
    resolution_notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT claim_denials_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.claim_line_items
(
    id serial NOT NULL,
    claim_id integer NOT NULL,
    order_detail_id integer NOT NULL,
    sequence_number integer NOT NULL,
    service_date date NOT NULL,
    hcpcs_code character varying(20) COLLATE pg_catalog."default" NOT NULL,
    modifier1 character varying(2) COLLATE pg_catalog."default",
    modifier2 character varying(2) COLLATE pg_catalog."default",
    modifier3 character varying(2) COLLATE pg_catalog."default",
    modifier4 character varying(2) COLLATE pg_catalog."default",
    units integer NOT NULL,
    billed_amount numeric(10, 2) NOT NULL,
    allowed_amount numeric(10, 2),
    paid_amount numeric(10, 2),
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT claim_line_items_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.claim_status_histories
(
    id integer NOT NULL DEFAULT nextval('claim_status_history_id_seq'::regclass),
    claim_id integer NOT NULL,
    status claimstatus NOT NULL,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT claim_status_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.claims
(
    id serial NOT NULL,
    order_id integer NOT NULL,
    insurance_id integer NOT NULL,
    claim_number character varying(50) COLLATE pg_catalog."default",
    status claimstatus NOT NULL,
    filing_date date,
    service_from_date date NOT NULL,
    service_to_date date,
    billed_amount numeric(10, 2) NOT NULL,
    allowed_amount numeric(10, 2),
    paid_amount numeric(10, 2),
    patient_responsibility numeric(10, 2),
    diagnosis_codes character varying(500) COLLATE pg_catalog."default",
    authorization_number character varying(50) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT claims_pkey PRIMARY KEY (id),
    CONSTRAINT claims_claim_number_key UNIQUE (claim_number)
);

CREATE TABLE IF NOT EXISTS public.cmn_form_fields
(
    id serial NOT NULL,
    section_id integer NOT NULL,
    field_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    field_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    label text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    default_value text COLLATE pg_catalog."default",
    validation_rules jsonb,
    display_order integer NOT NULL,
    is_required boolean DEFAULT false,
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT cmn_form_fields_pkey PRIMARY KEY (id),
    CONSTRAINT uq_cmn_field UNIQUE (section_id, field_name)
);

COMMENT ON TABLE public.cmn_form_fields
    IS 'Field definitions for CMN form sections';

CREATE TABLE IF NOT EXISTS public.cmn_form_responses
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    patient_id integer NOT NULL,
    doctor_id integer,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'draft'::character varying,
    responses jsonb NOT NULL,
    submitted_at timestamp without time zone,
    reviewed_at timestamp without time zone,
    reviewed_by character varying(50) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT cmn_form_responses_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_form_responses
    IS 'Completed CMN form responses';

CREATE TABLE IF NOT EXISTS public.cmn_form_sections
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    section_type character(1) COLLATE pg_catalog."default" NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    display_order integer NOT NULL,
    is_required boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT cmn_form_sections_pkey PRIMARY KEY (id),
    CONSTRAINT uq_cmn_section UNIQUE (form_id, section_type)
);

COMMENT ON TABLE public.cmn_form_sections
    IS 'Sections within CMN forms';

CREATE TABLE IF NOT EXISTS public.cmn_forms
(
    id serial NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    form_version character varying(10) COLLATE pg_catalog."default" NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT cmn_forms_pkey PRIMARY KEY (id),
    CONSTRAINT uq_cmn_form UNIQUE (form_type, form_version)
);

COMMENT ON TABLE public.cmn_forms
    IS 'Certificate of Medical Necessity form definitions';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0102a
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0102a_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0102a
    IS 'CMN Form Type 01.02 Part A';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0102b
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0102b_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0102b
    IS 'CMN Form Type 01.02 Part B';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0203a
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0203a_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0203a
    IS 'CMN Form Type 02.03 Part A';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0203b
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0203b_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0203b
    IS 'CMN Form Type 02.03 Part B';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0302
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0302_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0302
    IS 'CMN Form Type 03.02';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0403b
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0403b_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0403b
    IS 'CMN Form Type 04.03 Part B';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0403c
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0403c_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0403c
    IS 'CMN Form Type 04.03 Part C';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0404c
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0404c_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0404c
    IS 'CMN Form Type 04.04 Part C';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0602b
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0602b_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0602b
    IS 'CMN Form Type 06.02 Part B';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0603b
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0603b_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0603b
    IS 'CMN Form Type 06.03 Part B';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0702a
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0702a_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0702a
    IS 'CMN Form Type 07.02 Part A';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0702b
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0702b_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0702b
    IS 'CMN Form Type 07.02 Part B';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0703a
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0703a_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0703a
    IS 'CMN Form Type 07.03 Part A';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0802
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0802_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0802
    IS 'CMN Form Type 08.02';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0902
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0902_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0902
    IS 'CMN Form Type 09.02';

CREATE TABLE IF NOT EXISTS public.cmn_forms_0903
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_0903_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_0903
    IS 'CMN Form Type 09.03';

CREATE TABLE IF NOT EXISTS public.cmn_forms_1003
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_1003_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_1003
    IS 'CMN Form Type 10.03';

CREATE TABLE IF NOT EXISTS public.cmn_forms_4842
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_4842_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_4842
    IS 'CMN Form Type 4842';

CREATE TABLE IF NOT EXISTS public.cmn_forms_drorder
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    doctor_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_drorder_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_drorder
    IS 'CMN Form Doctor Order Type';

CREATE TABLE IF NOT EXISTS public.cmn_forms_uro
(
    id serial NOT NULL,
    form_id integer NOT NULL,
    form_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    medical_condition_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    form_data jsonb,
    CONSTRAINT cmn_forms_uro_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.cmn_forms_uro
    IS 'CMN Form Urology Type';

CREATE TABLE IF NOT EXISTS public.cmnform_0404bs
(
    cmnformid integer NOT NULL,
    answer6a answer_enum NOT NULL DEFAULT 'D'::answer_enum,
    answer6b integer NOT NULL DEFAULT 0,
    answer7a answer_enum NOT NULL DEFAULT 'D'::answer_enum,
    answer7b integer NOT NULL DEFAULT 0,
    CONSTRAINT cmnform_0404b_pkey PRIMARY KEY (cmnformid)
);

CREATE TABLE IF NOT EXISTS public.cmnform_0484s
(
    cmnformid integer NOT NULL,
    answer1_hcpcs character varying(5) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::character varying,
    answer1_mg integer,
    answer1_times integer,
    answer1_hours integer,
    CONSTRAINT cmnform_0484_pkey PRIMARY KEY (cmnformid)
);

CREATE TABLE IF NOT EXISTS public.cmnforms
(
    id integer NOT NULL DEFAULT nextval('cmnform_id_seq'::regclass),
    cmntype cmn_type_enum NOT NULL DEFAULT 'DME 484.03'::cmn_type_enum,
    initialdate date,
    reviseddate date,
    customerid integer NOT NULL,
    doctorid integer NOT NULL,
    supplierid integer NOT NULL,
    lengthofneed integer,
    CONSTRAINT cmnform_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.communication_logs
(
    id integer NOT NULL DEFAULT nextval('communication_log_id_seq'::regclass),
    notificationid integer,
    communicationtype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    recipienttype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    recipientid integer NOT NULL,
    subject character varying(200) COLLATE pg_catalog."default",
    body text COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    error text COLLATE pg_catalog."default",
    createddatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT communication_log_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.communication_logs
    IS 'Communication history log';

CREATE TABLE IF NOT EXISTS public.communication_templates
(
    id serial NOT NULL,
    category_id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    template_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    subject_template text COLLATE pg_catalog."default",
    body_template text COLLATE pg_catalog."default" NOT NULL,
    format character varying(20) COLLATE pg_catalog."default" DEFAULT 'text'::character varying,
    variables jsonb,
    metadata jsonb,
    is_system_template boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT communication_templates_pkey PRIMARY KEY (id),
    CONSTRAINT uq_communication_template_name UNIQUE (name)
);

COMMENT ON TABLE public.communication_templates
    IS 'Communication template definitions';

CREATE TABLE IF NOT EXISTS public.companies
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    odbc_dsn character varying(50) COLLATE pg_catalog."default",
    server character varying(50) COLLATE pg_catalog."default",
    port integer,
    database character varying(50) COLLATE pg_catalog."default",
    active boolean NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT companies_pkey PRIMARY KEY (id),
    CONSTRAINT companies_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.company_types
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    parent_id integer,
    display_order integer,
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT company_types_pkey PRIMARY KEY (id),
    CONSTRAINT uq_company_type_name UNIQUE (name)
);

COMMENT ON TABLE public.company_types
    IS 'Company classification types';

CREATE TABLE IF NOT EXISTS public.compliance
(
    id serial NOT NULL,
    company_id integer NOT NULL,
    customer_id integer,
    form_type character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    compliance_date date,
    expiry_date date,
    last_review_date date,
    next_review_date date,
    is_compliant boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT compliance_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.compliance
    IS 'Tracks compliance status for companies and customers';

CREATE TABLE IF NOT EXISTS public.compliance_audit_items
(
    id integer NOT NULL DEFAULT nextval('compliance_audit_item_id_seq'::regclass),
    auditid integer NOT NULL,
    checklistitemid integer NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Pending'::character varying,
    comments text COLLATE pg_catalog."default",
    completeddate date,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT compliance_audit_item_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.compliance_audit_items
    IS 'Individual compliance audit findings';

CREATE TABLE IF NOT EXISTS public.compliance_audits
(
    id integer NOT NULL DEFAULT nextval('compliance_audit_id_seq'::regclass),
    checklistid integer NOT NULL,
    auditdate date NOT NULL,
    auditorid smallint NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'In Progress'::character varying,
    notes text COLLATE pg_catalog."default",
    completeddate date,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT compliance_audit_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.compliance_audits
    IS 'Compliance audit records';

CREATE TABLE IF NOT EXISTS public.compliance_checklist_items
(
    id integer NOT NULL DEFAULT nextval('compliance_checklist_item_id_seq'::regclass),
    checklistid integer NOT NULL,
    itemtext text COLLATE pg_catalog."default" NOT NULL,
    isrequired boolean NOT NULL DEFAULT true,
    ordinal integer NOT NULL,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT compliance_checklist_item_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.compliance_checklist_items
    IS 'Individual items in compliance checklists';

CREATE TABLE IF NOT EXISTS public.compliance_checklists
(
    id integer NOT NULL DEFAULT nextval('compliance_checklist_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    frequency character varying(20) COLLATE pg_catalog."default" NOT NULL,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT compliance_checklist_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.compliance_checklists
    IS 'Compliance checklists for audits';

CREATE TABLE IF NOT EXISTS public.compliance_notes
(
    id serial NOT NULL,
    compliance_id integer NOT NULL,
    note_type character varying(50) COLLATE pg_catalog."default",
    note_text text COLLATE pg_catalog."default",
    is_internal boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT compliance_notes_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.compliance_notes
    IS 'Notes and documentation related to compliance records';

CREATE TABLE IF NOT EXISTS public.configuration_audits
(
    id integer NOT NULL DEFAULT nextval('configuration_audit_id_seq'::regclass),
    settingid integer NOT NULL,
    oldvalue text COLLATE pg_catalog."default",
    newvalue text COLLATE pg_catalog."default",
    changeuserid smallint NOT NULL,
    changedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT configuration_audit_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.configuration_audits
    IS 'Audit trail for configuration changes';

CREATE TABLE IF NOT EXISTS public.configuration_categories
(
    id integer NOT NULL DEFAULT nextval('configuration_category_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT configuration_category_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.configuration_categories
    IS 'System configuration categories';

CREATE TABLE IF NOT EXISTS public.configuration_definitions
(
    id serial NOT NULL,
    config_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    module character varying(50) COLLATE pg_catalog."default",
    data_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    default_value text COLLATE pg_catalog."default",
    validation_rules jsonb,
    is_system boolean DEFAULT false,
    is_required boolean DEFAULT false,
    is_sensitive boolean DEFAULT false,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT configuration_definitions_pkey PRIMARY KEY (id),
    CONSTRAINT configuration_definitions_config_name_key UNIQUE (config_name)
);

CREATE TABLE IF NOT EXISTS public.configuration_history
(
    id serial NOT NULL,
    value_id integer NOT NULL,
    old_value text COLLATE pg_catalog."default",
    new_value text COLLATE pg_catalog."default",
    change_date timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    changed_by character varying(50) COLLATE pg_catalog."default",
    change_reason text COLLATE pg_catalog."default",
    metadata jsonb,
    CONSTRAINT configuration_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.configuration_settings
(
    id integer NOT NULL DEFAULT nextval('configuration_setting_id_seq'::regclass),
    categoryid integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default" NOT NULL,
    datatype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    isencrypted boolean NOT NULL DEFAULT false,
    isreadonly boolean NOT NULL DEFAULT false,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT configuration_setting_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.configuration_settings
    IS 'System configuration settings';

CREATE TABLE IF NOT EXISTS public.configuration_values
(
    id serial NOT NULL,
    definition_id integer NOT NULL,
    environment character varying(50) COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default" NOT NULL,
    is_active boolean DEFAULT true,
    valid_from timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    valid_to timestamp without time zone,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT configuration_values_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.customer_address
(
    id serial NOT NULL,
    customerid integer NOT NULL,
    addresstype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    address1 character varying(100) COLLATE pg_catalog."default" NOT NULL,
    address2 character varying(100) COLLATE pg_catalog."default",
    city character varying(50) COLLATE pg_catalog."default" NOT NULL,
    state character varying(2) COLLATE pg_catalog."default" NOT NULL,
    zipcode character varying(10) COLLATE pg_catalog."default" NOT NULL,
    isprimary boolean NOT NULL DEFAULT false,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_address_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.customer_address
    IS 'Customer shipping and billing addresses';

CREATE TABLE IF NOT EXISTS public.customer_addresses
(
    id serial NOT NULL,
    customer_id integer NOT NULL,
    address_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    address1 character varying(100) COLLATE pg_catalog."default" NOT NULL,
    address2 character varying(100) COLLATE pg_catalog."default",
    city character varying(50) COLLATE pg_catalog."default" NOT NULL,
    state character varying(2) COLLATE pg_catalog."default" NOT NULL,
    zip_code character varying(10) COLLATE pg_catalog."default" NOT NULL,
    is_primary boolean,
    is_billing boolean,
    is_shipping boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT customer_addresses_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.customer_classes
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    priority_level integer,
    discount_rate numeric(5, 2),
    credit_limit numeric(12, 2),
    payment_terms character varying(100) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT customer_classes_pkey PRIMARY KEY (id),
    CONSTRAINT uq_customer_class_name UNIQUE (name)
);

COMMENT ON TABLE public.customer_classes
    IS 'Customer classification and priority levels';

CREATE TABLE IF NOT EXISTS public.customer_contacts
(
    id integer NOT NULL DEFAULT nextval('customer_contact_id_seq'::regclass),
    customerid integer NOT NULL,
    contacttype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    contactvalue character varying(100) COLLATE pg_catalog."default" NOT NULL,
    isprimary boolean NOT NULL DEFAULT false,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_contact_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.customer_contacts
    IS 'Customer contact information (phone, email, etc)';

CREATE TABLE IF NOT EXISTS public.customer_doctors
(
    customer_id integer NOT NULL,
    doctor_id integer NOT NULL,
    CONSTRAINT customer_doctors_pkey PRIMARY KEY (customer_id, doctor_id)
);

CREATE TABLE IF NOT EXISTS public.customer_documents
(
    id integer NOT NULL DEFAULT nextval('customer_document_id_seq'::regclass),
    customerid integer NOT NULL,
    documenttypeid integer NOT NULL,
    filename character varying(255) COLLATE pg_catalog."default" NOT NULL,
    filepath character varying(500) COLLATE pg_catalog."default" NOT NULL,
    filesize integer NOT NULL,
    mimetype character varying(100) COLLATE pg_catalog."default" NOT NULL,
    uploaddate timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expirydate date,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Active'::character varying,
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_document_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.customer_documents
    IS 'Customer-related documents and files';

CREATE TABLE IF NOT EXISTS public.customer_facilities
(
    customer_id integer NOT NULL,
    facility_id integer NOT NULL,
    CONSTRAINT customer_facilities_pkey PRIMARY KEY (customer_id, facility_id)
);

CREATE TABLE IF NOT EXISTS public.customer_feedbacks
(
    id integer NOT NULL DEFAULT nextval('customer_feedback_id_seq'::regclass),
    customerid integer NOT NULL,
    categoryid integer NOT NULL,
    servicerequestid integer,
    rating smallint NOT NULL,
    comments text COLLATE pg_catalog."default",
    submissiondate timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'New'::character varying,
    response text COLLATE pg_catalog."default",
    responseuserid integer,
    responsedatetime timestamp without time zone,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_feedback_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.customer_feedbacks
    IS 'Customer feedback and ratings';

CREATE TABLE IF NOT EXISTS public.customer_insurances
(
    id serial NOT NULL,
    customer_id integer NOT NULL,
    insurance_company_id integer NOT NULL,
    policy_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    group_number character varying(50) COLLATE pg_catalog."default",
    effective_date date,
    termination_date date,
    is_primary boolean,
    is_active boolean,
    verification_date timestamp without time zone,
    verification_method character varying(50) COLLATE pg_catalog."default",
    verification_reference character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT customer_insurances_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.customer_notes
(
    id integer NOT NULL DEFAULT nextval('customer_note_id_seq'::regclass),
    customerid integer NOT NULL,
    notetype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    notetext text COLLATE pg_catalog."default" NOT NULL,
    createduserid smallint NOT NULL,
    createddatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_note_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.customer_notes
    IS 'Customer-related notes and comments';

CREATE TABLE IF NOT EXISTS public.customer_orders
(
    id integer NOT NULL DEFAULT nextval('customer_order_id_seq'::regclass),
    customerid integer NOT NULL,
    orderdate timestamp without time zone NOT NULL,
    statusid integer NOT NULL,
    shippingaddressid integer NOT NULL,
    billingaddressid integer NOT NULL,
    subtotal numeric(18, 2) NOT NULL,
    taxamount numeric(18, 2) NOT NULL,
    totalamount numeric(18, 2) NOT NULL,
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_order_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.customer_orders
    IS 'Customer orders';

CREATE TABLE IF NOT EXISTS public.customer_types
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    class_id integer,
    billing_cycle character varying(50) COLLATE pg_catalog."default",
    payment_methods character varying[] COLLATE pg_catalog."default",
    requirements jsonb,
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT customer_types_pkey PRIMARY KEY (id),
    CONSTRAINT uq_customer_type_name UNIQUE (name)
);

COMMENT ON TABLE public.customer_types
    IS 'Customer type definitions';

CREATE TABLE IF NOT EXISTS public.customers
(
    id serial NOT NULL,
    company_id integer NOT NULL,
    first_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    middle_name character varying(50) COLLATE pg_catalog."default",
    date_of_birth date NOT NULL,
    ssn character varying(11) COLLATE pg_catalog."default",
    gender gender NOT NULL,
    marital_status maritalstatus,
    email character varying(100) COLLATE pg_catalog."default",
    phone_home character varying(20) COLLATE pg_catalog."default",
    phone_work character varying(20) COLLATE pg_catalog."default",
    phone_mobile character varying(20) COLLATE pg_catalog."default",
    is_active boolean NOT NULL,
    status_date timestamp without time zone,
    height integer,
    weight integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT customers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.dashboard_widgets
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    widget_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    category character varying(50) COLLATE pg_catalog."default",
    default_config jsonb,
    min_width integer,
    min_height integer,
    max_width integer,
    max_height integer,
    refresh_interval integer,
    is_system_widget boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT dashboard_widgets_pkey PRIMARY KEY (id),
    CONSTRAINT uq_dashboard_widget_name UNIQUE (name)
);

COMMENT ON TABLE public.dashboard_widgets
    IS 'Available dashboard widgets';

CREATE TABLE IF NOT EXISTS public.delivery_confirmations
(
    id serial NOT NULL,
    stop_id integer NOT NULL,
    confirmation_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    confirmed_by character varying(100) COLLATE pg_catalog."default",
    confirmation_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT delivery_confirmations_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.delivery_confirmations
    IS 'Delivery confirmation records';

CREATE TABLE IF NOT EXISTS public.delivery_routes
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    driver_id integer,
    vehicle_id integer,
    route_date date NOT NULL,
    start_time time without time zone,
    end_time time without time zone,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'planned'::character varying,
    total_stops integer,
    total_distance numeric(10, 2),
    total_duration integer,
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT delivery_routes_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.delivery_routes
    IS 'Delivery route planning';

CREATE TABLE IF NOT EXISTS public.delivery_schedules
(
    id serial NOT NULL,
    order_id integer NOT NULL,
    scheduled_date timestamp without time zone NOT NULL,
    delivery_window_start timestamp without time zone NOT NULL,
    delivery_window_end timestamp without time zone NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    driver_notes text COLLATE pg_catalog."default",
    customer_notes text COLLATE pg_catalog."default",
    actual_delivery_date timestamp without time zone,
    signature_required boolean,
    signature_obtained boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT delivery_schedules_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.delivery_stops
(
    id serial NOT NULL,
    route_id integer NOT NULL,
    package_id integer NOT NULL,
    stop_number integer NOT NULL,
    planned_arrival_time timestamp without time zone,
    actual_arrival_time timestamp without time zone,
    planned_departure_time timestamp without time zone,
    actual_departure_time timestamp without time zone,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    notes text COLLATE pg_catalog."default",
    signature_required boolean DEFAULT false,
    signature_image text COLLATE pg_catalog."default",
    photo_proof text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT delivery_stops_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.delivery_stops
    IS 'Individual stops on delivery routes';

CREATE TABLE IF NOT EXISTS public.denial_attachments
(
    id serial NOT NULL,
    denial_id integer NOT NULL,
    file_attachment_id integer NOT NULL,
    attachment_type character varying(50) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT denial_attachments_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.denial_attachments
    IS 'File attachments for denial cases';

CREATE TABLE IF NOT EXISTS public.denial_notes
(
    id serial NOT NULL,
    denial_id integer NOT NULL,
    note_type character varying(50) COLLATE pg_catalog."default",
    note_text text COLLATE pg_catalog."default" NOT NULL,
    is_internal boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT denial_notes_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.denial_notes
    IS 'Notes related to denial cases';

CREATE TABLE IF NOT EXISTS public.denial_reasons
(
    id serial NOT NULL,
    code character varying(20) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    category character varying(50) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT denial_reasons_pkey PRIMARY KEY (id),
    CONSTRAINT uq_denial_reason_code UNIQUE (code)
);

CREATE TABLE IF NOT EXISTS public.denials
(
    id serial NOT NULL,
    customer_id integer NOT NULL,
    insurance_id integer NOT NULL,
    claim_number character varying(50) COLLATE pg_catalog."default",
    denial_date date NOT NULL,
    denial_reason character varying(200) COLLATE pg_catalog."default" NOT NULL,
    denial_code character varying(50) COLLATE pg_catalog."default",
    amount_denied numeric(10, 2),
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'new'::character varying,
    priority integer DEFAULT 0,
    appeal_deadline date,
    appeal_status character varying(20) COLLATE pg_catalog."default",
    appeal_date date,
    resolution_date date,
    resolution_notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT denials_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.denials
    IS 'Insurance claim denials tracking';

CREATE TABLE IF NOT EXISTS public.departments
(
    id integer NOT NULL DEFAULT nextval('department_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    managerid smallint,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT department_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.departments
    IS 'Company departments';

CREATE TABLE IF NOT EXISTS public.deposit_details
(
    id serial NOT NULL,
    deposit_id integer NOT NULL,
    payment_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    payment_reference character varying(100) COLLATE pg_catalog."default",
    amount numeric(10, 2) NOT NULL,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT deposit_details_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.deposits
(
    id serial NOT NULL,
    deposit_date date NOT NULL,
    deposit_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    bank_account character varying(100) COLLATE pg_catalog."default" NOT NULL,
    total_amount numeric(10, 2) NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT deposits_pkey PRIMARY KEY (id),
    CONSTRAINT uq_deposit_number UNIQUE (deposit_number)
);

CREATE TABLE IF NOT EXISTS public.doctor_orders
(
    id serial NOT NULL,
    patient_id integer NOT NULL,
    doctor_id integer NOT NULL,
    order_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    order_date timestamp without time zone NOT NULL,
    start_date date,
    end_date date,
    diagnosis_codes jsonb,
    instructions text COLLATE pg_catalog."default",
    frequency character varying(50) COLLATE pg_catalog."default",
    duration character varying(50) COLLATE pg_catalog."default",
    quantity integer,
    refills integer DEFAULT 0,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    priority character varying(20) COLLATE pg_catalog."default" DEFAULT 'routine'::character varying,
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT doctor_orders_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.doctor_types
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT doctor_types_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.doctor_types
    IS 'Lookup table for doctor types';

CREATE TABLE IF NOT EXISTS public.doctors
(
    id serial NOT NULL,
    first_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    middle_name character varying(100) COLLATE pg_catalog."default",
    specialty character varying(100) COLLATE pg_catalog."default",
    license_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    npi_number character varying(10) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    phone_primary character varying(20) COLLATE pg_catalog."default",
    phone_secondary character varying(20) COLLATE pg_catalog."default",
    fax character varying(20) COLLATE pg_catalog."default",
    address_id integer,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT doctors_pkey PRIMARY KEY (id),
    CONSTRAINT uq_doctor_license UNIQUE (license_number),
    CONSTRAINT uq_doctor_npi UNIQUE (npi_number)
);

COMMENT ON TABLE public.doctors
    IS 'Healthcare provider information';

CREATE TABLE IF NOT EXISTS public.document_categories
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    parent_category_id integer,
    is_system_category boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT document_categories_pkey PRIMARY KEY (id),
    CONSTRAINT uq_document_category_name UNIQUE (name)
);

COMMENT ON TABLE public.document_categories
    IS 'Hierarchical categories for document organization';

CREATE TABLE IF NOT EXISTS public.document_shares
(
    id serial NOT NULL,
    document_id integer NOT NULL,
    shared_with_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    shared_with_id integer NOT NULL,
    permission_level character varying(20) COLLATE pg_catalog."default" DEFAULT 'read'::character varying,
    expiry_date timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT document_shares_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.document_shares
    IS 'Document sharing and permissions';

CREATE TABLE IF NOT EXISTS public.document_tags
(
    id serial NOT NULL,
    document_id integer NOT NULL,
    tag_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT document_tags_pkey PRIMARY KEY (id),
    CONSTRAINT uq_document_tag UNIQUE (document_id, tag_name)
);

COMMENT ON TABLE public.document_tags
    IS 'Document tagging system';

CREATE TABLE IF NOT EXISTS public.document_templates
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    category_id integer,
    content text COLLATE pg_catalog."default",
    file_extension character varying(10) COLLATE pg_catalog."default",
    variables jsonb,
    is_system_template boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT document_templates_pkey PRIMARY KEY (id),
    CONSTRAINT uq_document_template_name UNIQUE (name)
);

COMMENT ON TABLE public.document_templates
    IS 'Document templates with variable support';

CREATE TABLE IF NOT EXISTS public.document_types
(
    id integer NOT NULL DEFAULT nextval('document_type_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    retentionperiod integer,
    isrequired boolean NOT NULL DEFAULT false,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT document_type_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.document_types
    IS 'Types of documents that can be stored';

CREATE TABLE IF NOT EXISTS public.document_versions
(
    id serial NOT NULL,
    document_id integer NOT NULL,
    version integer NOT NULL,
    file_path character varying(500) COLLATE pg_catalog."default",
    file_size bigint,
    change_summary text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT document_versions_pkey PRIMARY KEY (id),
    CONSTRAINT uq_document_version UNIQUE (document_id, version)
);

COMMENT ON TABLE public.document_versions
    IS 'Document version history';

CREATE TABLE IF NOT EXISTS public.documents
(
    id serial NOT NULL,
    title character varying(200) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    category_id integer,
    template_id integer,
    file_path character varying(500) COLLATE pg_catalog."default",
    file_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    file_extension character varying(10) COLLATE pg_catalog."default",
    file_size bigint,
    mime_type character varying(100) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'draft'::character varying,
    version integer DEFAULT 1,
    is_template_generated boolean DEFAULT false,
    is_locked boolean DEFAULT false,
    locked_by integer,
    locked_at timestamp without time zone,
    entity_type character varying(50) COLLATE pg_catalog."default",
    entity_id integer,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT documents_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.documents
    IS 'Main document management table';

CREATE TABLE IF NOT EXISTS public.eligibility_requests
(
    id serial NOT NULL,
    customer_id integer NOT NULL,
    insurance_id integer NOT NULL,
    request_date timestamp without time zone NOT NULL,
    service_type character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    response_date timestamp without time zone,
    is_eligible boolean,
    coverage_start_date date,
    coverage_end_date date,
    benefit_details jsonb,
    response_data jsonb,
    error_message text COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT eligibility_requests_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.eligibility_requests
    IS 'Insurance eligibility verification requests and responses';

CREATE TABLE IF NOT EXISTS public.email_attachments
(
    id serial NOT NULL,
    email_id integer NOT NULL,
    file_attachment_id integer NOT NULL,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT email_attachments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.email_templates
(
    id serial NOT NULL,
    template_code character varying(50) COLLATE pg_catalog."default" NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    subject character varying(200) COLLATE pg_catalog."default" NOT NULL,
    body_html text COLLATE pg_catalog."default",
    body_text text COLLATE pg_catalog."default",
    variables jsonb,
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT email_templates_pkey PRIMARY KEY (id),
    CONSTRAINT uq_email_template_code UNIQUE (template_code)
);

CREATE TABLE IF NOT EXISTS public.employee_role_assignments
(
    id integer NOT NULL DEFAULT nextval('employee_role_assignment_id_seq'::regclass),
    employeeid integer NOT NULL,
    roleid integer NOT NULL,
    startdate date NOT NULL,
    enddate date,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT employee_role_assignment_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.employee_role_assignments
    IS 'Role assignments for employees';

CREATE TABLE IF NOT EXISTS public.employee_roles
(
    id integer NOT NULL DEFAULT nextval('employee_role_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    permissions text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT employee_role_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.employee_roles
    IS 'Employee roles and permissions';

CREATE TABLE IF NOT EXISTS public.employee_schedules
(
    id integer NOT NULL DEFAULT nextval('employee_schedule_id_seq'::regclass),
    employeeid integer NOT NULL,
    dayofweek smallint NOT NULL,
    starttime time without time zone NOT NULL,
    endtime time without time zone NOT NULL,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT employee_schedule_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.employee_schedules
    IS 'Employee work schedules';

CREATE TABLE IF NOT EXISTS public.employees
(
    id serial NOT NULL,
    first_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    middle_name character varying(100) COLLATE pg_catalog."default",
    employee_id character varying(50) COLLATE pg_catalog."default" NOT NULL,
    department character varying(100) COLLATE pg_catalog."default",
    "position" character varying(100) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default",
    hire_date date NOT NULL,
    termination_date date,
    address_id integer,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT employees_pkey PRIMARY KEY (id),
    CONSTRAINT uq_employee_id UNIQUE (employee_id)
);

COMMENT ON TABLE public.employees
    IS 'Employee records';

CREATE TABLE IF NOT EXISTS public.environment_settings
(
    id serial NOT NULL,
    environment character varying(50) COLLATE pg_catalog."default" NOT NULL,
    category character varying(50) COLLATE pg_catalog."default" NOT NULL,
    setting_key character varying(100) COLLATE pg_catalog."default" NOT NULL,
    setting_value text COLLATE pg_catalog."default",
    data_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    is_encrypted boolean DEFAULT false,
    description text COLLATE pg_catalog."default",
    is_editable boolean DEFAULT true,
    validation_rules jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT environment_settings_pkey PRIMARY KEY (id),
    CONSTRAINT uq_environment_setting UNIQUE (environment, category, setting_key)
);

COMMENT ON TABLE public.environment_settings
    IS 'Environment-specific configuration settings';

CREATE TABLE IF NOT EXISTS public.equipment_maintenances
(
    id integer NOT NULL DEFAULT nextval('equipment_maintenance_id_seq'::regclass),
    equipmentid integer NOT NULL,
    maintenancetype character varying(50) COLLATE pg_catalog."default" NOT NULL,
    maintenancedate date NOT NULL,
    performedby character varying(100) COLLATE pg_catalog."default" NOT NULL,
    cost numeric(18, 2),
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT equipment_maintenance_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.equipment_maintenances
    IS 'Equipment maintenance records';

CREATE TABLE IF NOT EXISTS public.equipment_types
(
    id integer NOT NULL DEFAULT nextval('equipment_type_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    manufacturer character varying(100) COLLATE pg_catalog."default",
    model character varying(50) COLLATE pg_catalog."default",
    hcpcs character varying(5) COLLATE pg_catalog."default",
    defaultprice numeric(18, 2),
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT equipment_type_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.equipment_types
    IS 'Equipment categories and default settings';

CREATE TABLE IF NOT EXISTS public.equipments
(
    id integer NOT NULL DEFAULT nextval('equipment_id_seq'::regclass),
    equipmenttypeid integer NOT NULL,
    serialnumber character varying(50) COLLATE pg_catalog."default" NOT NULL,
    purchasedate date,
    purchaseprice numeric(18, 2),
    warrantyexpiration date,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Available'::character varying,
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT equipment_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.equipments
    IS 'Medical equipment inventory';

CREATE TABLE IF NOT EXISTS public.facilities
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    facility_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    address1 character varying(100) COLLATE pg_catalog."default" NOT NULL,
    address2 character varying(100) COLLATE pg_catalog."default",
    city character varying(50) COLLATE pg_catalog."default" NOT NULL,
    state character varying(2) COLLATE pg_catalog."default" NOT NULL,
    zip_code character varying(10) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(20) COLLATE pg_catalog."default",
    fax character varying(20) COLLATE pg_catalog."default",
    email character varying(100) COLLATE pg_catalog."default",
    npi character varying(10) COLLATE pg_catalog."default",
    tax_id character varying(20) COLLATE pg_catalog."default",
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT facilities_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.feature_flags
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    is_enabled boolean DEFAULT false,
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    percentage_rollout integer,
    rules jsonb,
    dependencies jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT feature_flags_pkey PRIMARY KEY (id),
    CONSTRAINT uq_feature_flag_name UNIQUE (name)
);

COMMENT ON TABLE public.feature_flags
    IS 'Feature flag management';

CREATE TABLE IF NOT EXISTS public.feedback_categories
(
    id integer NOT NULL DEFAULT nextval('feedback_category_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT feedback_category_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.feedback_categories
    IS 'Categories for customer feedback';

CREATE TABLE IF NOT EXISTS public.file_attachments
(
    id serial NOT NULL,
    category_id integer,
    file_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    original_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    file_path character varying(500) COLLATE pg_catalog."default" NOT NULL,
    file_type character varying(100) COLLATE pg_catalog."default",
    mime_type character varying(100) COLLATE pg_catalog."default",
    file_size bigint,
    checksum character varying(64) COLLATE pg_catalog."default",
    entity_type character varying(50) COLLATE pg_catalog."default",
    entity_id integer,
    is_public boolean DEFAULT false,
    expiry_date timestamp without time zone,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT file_attachments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.file_categories
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    parent_id integer,
    allowed_extensions text[] COLLATE pg_catalog."default",
    max_file_size integer,
    retention_days integer,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT file_categories_pkey PRIMARY KEY (id),
    CONSTRAINT uq_file_category_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.general_ledger
(
    id serial NOT NULL,
    account_id integer NOT NULL,
    period_id integer NOT NULL,
    transaction_date date NOT NULL,
    document_type character varying(50) COLLATE pg_catalog."default",
    document_id integer,
    description text COLLATE pg_catalog."default",
    debit_amount numeric(15, 2) DEFAULT 0,
    credit_amount numeric(15, 2) DEFAULT 0,
    running_balance numeric(15, 2),
    is_posted boolean DEFAULT false,
    posted_date timestamp without time zone,
    posted_by character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT general_ledger_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.general_ledger
    IS 'General ledger transactions';

CREATE TABLE IF NOT EXISTS public.health_account_organizations
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    insurance_group_id integer,
    organization_type character varying(50) COLLATE pg_catalog."default",
    contract_number character varying(50) COLLATE pg_catalog."default",
    contract_start_date date,
    contract_end_date date,
    billing_type character varying(50) COLLATE pg_catalog."default",
    payment_terms character varying(50) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT health_account_organizations_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.health_account_organizations
    IS 'Health Account Organizations (HAOs) with contract details';

CREATE TABLE IF NOT EXISTS public.healthcare_providers
(
    id serial NOT NULL,
    first_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    middle_name character varying(1) COLLATE pg_catalog."default",
    license_number character varying(16) COLLATE pg_catalog."default" NOT NULL,
    license_expiry_date date,
    medicaid_number character varying(16) COLLATE pg_catalog."default" NOT NULL,
    dea_number character varying(20) COLLATE pg_catalog."default",
    upin_number character varying(11) COLLATE pg_catalog."default",
    tax_id character varying(9) COLLATE pg_catalog."default",
    npi character varying(10) COLLATE pg_catalog."default",
    pecos_enrolled boolean DEFAULT false,
    address_line1 character varying(100) COLLATE pg_catalog."default",
    address_line2 character varying(100) COLLATE pg_catalog."default",
    city character varying(100) COLLATE pg_catalog."default",
    state character varying(2) COLLATE pg_catalog."default",
    postal_code character varying(10) COLLATE pg_catalog."default",
    phone character varying(50) COLLATE pg_catalog."default",
    phone2 character varying(50) COLLATE pg_catalog."default",
    fax character varying(50) COLLATE pg_catalog."default",
    provider_type_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT healthcare_providers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.icd10_codes
(
    id serial NOT NULL,
    code character varying(10) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT icd10_codes_pkey PRIMARY KEY (id),
    CONSTRAINT uq_icd10_code UNIQUE (code)
);

COMMENT ON TABLE public.icd10_codes
    IS 'ICD-10 diagnosis codes reference table';

CREATE TABLE IF NOT EXISTS public.icd9_codes
(
    id serial NOT NULL,
    code character varying(10) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT icd9_codes_pkey PRIMARY KEY (id),
    CONSTRAINT uq_icd9_code UNIQUE (code)
);

COMMENT ON TABLE public.icd9_codes
    IS 'ICD-9 diagnosis codes reference table';

CREATE TABLE IF NOT EXISTS public.icd_codes
(
    id serial NOT NULL,
    code_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    code character varying(20) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    category character varying(100) COLLATE pg_catalog."default",
    sub_category character varying(100) COLLATE pg_catalog."default",
    is_billable boolean DEFAULT true,
    effective_date date,
    end_date date,
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT icd_codes_pkey PRIMARY KEY (id),
    CONSTRAINT uq_icd_code UNIQUE (code_type, code)
);

COMMENT ON TABLE public.icd_codes
    IS 'ICD-9 and ICD-10 diagnosis codes';

CREATE TABLE IF NOT EXISTS public.insurance_authorizations
(
    id serial NOT NULL,
    policy_id integer NOT NULL,
    auth_number character varying(100) COLLATE pg_catalog."default" NOT NULL,
    service_type character varying(100) COLLATE pg_catalog."default" NOT NULL,
    start_date date NOT NULL,
    end_date date,
    authorized_units integer,
    used_units integer DEFAULT 0,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT insurance_authorizations_pkey PRIMARY KEY (id),
    CONSTRAINT uq_auth_number UNIQUE (auth_number)
);

CREATE TABLE IF NOT EXISTS public.insurance_claims
(
    id serial NOT NULL,
    policy_id integer NOT NULL,
    claim_number character varying(100) COLLATE pg_catalog."default" NOT NULL,
    service_date date NOT NULL,
    filing_date date NOT NULL,
    diagnosis_codes text[] COLLATE pg_catalog."default",
    procedure_codes text[] COLLATE pg_catalog."default",
    claim_amount numeric(10, 2) NOT NULL,
    approved_amount numeric(10, 2),
    paid_amount numeric(10, 2),
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'submitted'::character varying,
    adjudication_date date,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT insurance_claims_pkey PRIMARY KEY (id),
    CONSTRAINT uq_claim_number UNIQUE (claim_number)
);

CREATE TABLE IF NOT EXISTS public.insurance_companies
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    payer_id character varying(50) COLLATE pg_catalog."default" NOT NULL,
    address1 character varying(100) COLLATE pg_catalog."default",
    address2 character varying(100) COLLATE pg_catalog."default",
    city character varying(50) COLLATE pg_catalog."default",
    state character varying(2) COLLATE pg_catalog."default",
    zip_code character varying(10) COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default",
    fax character varying(20) COLLATE pg_catalog."default",
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT insurance_companies_pkey PRIMARY KEY (id),
    CONSTRAINT insurance_companies_payer_id_key UNIQUE (payer_id)
);

CREATE TABLE IF NOT EXISTS public.insurance_company_groups
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    parent_group_id integer,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT insurance_company_groups_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.insurance_company_groups
    IS 'Groups of insurance companies with hierarchical structure';

CREATE TABLE IF NOT EXISTS public.insurance_coverage
(
    id serial NOT NULL,
    policy_id integer NOT NULL,
    coverage_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    benefit_details jsonb,
    copay_amount numeric(10, 2),
    coinsurance_rate numeric(5, 2),
    deductible_amount numeric(10, 2),
    out_of_pocket_max numeric(10, 2),
    prior_auth_required boolean DEFAULT false,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT insurance_coverage_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.insurance_fee_schedules
(
    id serial NOT NULL,
    insurance_plan_id integer NOT NULL,
    billing_code_id integer NOT NULL,
    allowed_amount numeric(10, 2) NOT NULL,
    effective_date date NOT NULL,
    end_date date,
    notes text COLLATE pg_catalog."default",
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT insurance_fee_schedules_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.insurance_payers
(
    id serial NOT NULL,
    payer_code character varying(50) COLLATE pg_catalog."default" NOT NULL,
    name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    type character varying(50) COLLATE pg_catalog."default",
    contact_info jsonb,
    billing_info jsonb,
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT insurance_payers_pkey PRIMARY KEY (id),
    CONSTRAINT uq_payer_code UNIQUE (payer_code)
);

CREATE TABLE IF NOT EXISTS public.insurance_plans
(
    id serial NOT NULL,
    insurance_company_id integer NOT NULL,
    plan_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    plan_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    plan_number character varying(50) COLLATE pg_catalog."default",
    claims_address character varying(255) COLLATE pg_catalog."default",
    claims_phone character varying(20) COLLATE pg_catalog."default",
    claims_email character varying(255) COLLATE pg_catalog."default",
    payer_id character varying(50) COLLATE pg_catalog."default",
    supports_electronic_filing boolean,
    notes text COLLATE pg_catalog."default",
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT insurance_plans_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.insurance_policies
(
    id serial NOT NULL,
    payer_id integer NOT NULL,
    patient_id integer NOT NULL,
    policy_number character varying(100) COLLATE pg_catalog."default" NOT NULL,
    group_number character varying(100) COLLATE pg_catalog."default",
    policy_holder jsonb,
    coverage_start_date date NOT NULL,
    coverage_end_date date,
    policy_type character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    verification_status character varying(20) COLLATE pg_catalog."default",
    verification_date timestamp without time zone,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT insurance_policies_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.insurance_types
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    coverage_type character varying(50) COLLATE pg_catalog."default",
    is_primary boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT insurance_types_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.insurance_types
    IS 'Types of insurance coverage available';

CREATE TABLE IF NOT EXISTS public.integration_connections
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    provider character varying(50) COLLATE pg_catalog."default" NOT NULL,
    connection_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    credentials jsonb,
    settings jsonb,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'inactive'::character varying,
    last_connected_at timestamp without time zone,
    error_message text COLLATE pg_catalog."default",
    retry_count integer DEFAULT 0,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT integration_connections_pkey PRIMARY KEY (id),
    CONSTRAINT uq_integration_connection_name UNIQUE (name)
);

COMMENT ON TABLE public.integration_connections
    IS 'External system connection configurations';

CREATE TABLE IF NOT EXISTS public.integration_endpoints
(
    id serial NOT NULL,
    connection_id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    endpoint_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    method character varying(10) COLLATE pg_catalog."default",
    url_pattern character varying(500) COLLATE pg_catalog."default",
    request_template jsonb,
    response_template jsonb,
    headers jsonb,
    timeout integer,
    retry_policy jsonb,
    rate_limit integer,
    rate_limit_period character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT integration_endpoints_pkey PRIMARY KEY (id),
    CONSTRAINT uq_integration_endpoint_name UNIQUE (connection_id, name)
);

COMMENT ON TABLE public.integration_endpoints
    IS 'Integration endpoint definitions';

CREATE TABLE IF NOT EXISTS public.integration_logs
(
    id integer NOT NULL DEFAULT nextval('integration_log_id_seq'::regclass),
    endpointid integer NOT NULL,
    direction character varying(10) COLLATE pg_catalog."default" NOT NULL,
    requestdata text COLLATE pg_catalog."default",
    responsedata text COLLATE pg_catalog."default",
    statuscode integer,
    success boolean NOT NULL,
    errormessage text COLLATE pg_catalog."default",
    starttime timestamp without time zone NOT NULL,
    endtime timestamp without time zone NOT NULL,
    CONSTRAINT integration_log_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.integration_logs
    IS 'Integration execution history';

CREATE TABLE IF NOT EXISTS public.integration_mappings
(
    id serial NOT NULL,
    endpoint_id integer NOT NULL,
    mapping_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    source_model character varying(100) COLLATE pg_catalog."default" NOT NULL,
    target_model character varying(100) COLLATE pg_catalog."default" NOT NULL,
    field_mappings jsonb NOT NULL,
    transformation_rules jsonb,
    validation_rules jsonb,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT integration_mappings_pkey PRIMARY KEY (id),
    CONSTRAINT uq_integration_mapping UNIQUE (endpoint_id, mapping_type, source_model, target_model)
);

COMMENT ON TABLE public.integration_mappings
    IS 'Data mapping configurations';

CREATE TABLE IF NOT EXISTS public.integration_schedules
(
    id integer NOT NULL DEFAULT nextval('integration_schedule_id_seq'::regclass),
    endpointid integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    cronexpression character varying(100) COLLATE pg_catalog."default" NOT NULL,
    lastruntime timestamp without time zone,
    nextruntime timestamp without time zone,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT integration_schedule_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.integration_schedules
    IS 'Scheduled integration jobs';

CREATE TABLE IF NOT EXISTS public.inventories
(
    id integer NOT NULL DEFAULT nextval('inventory_id_seq'::regclass),
    warehouseid integer NOT NULL,
    equipmenttypeid integer NOT NULL,
    quantity integer NOT NULL DEFAULT 0,
    reorderpoint integer NOT NULL DEFAULT 0,
    reorderquantity integer NOT NULL DEFAULT 0,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT inventory_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.inventories
    IS 'Equipment inventory by warehouse';

CREATE TABLE IF NOT EXISTS public.inventory_categories
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    parent_id integer,
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT inventory_categories_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.inventory_items
(
    id serial NOT NULL,
    category_id integer NOT NULL,
    manufacturer_id integer NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    model_number character varying(100) COLLATE pg_catalog."default" NOT NULL,
    item_type itemtype NOT NULL,
    purchase_price numeric(10, 2),
    rental_price numeric(10, 2),
    msrp numeric(10, 2),
    reorder_point integer,
    reorder_quantity integer,
    minimum_stock integer,
    hcpcs_code character varying(20) COLLATE pg_catalog."default",
    billing_description character varying(255) COLLATE pg_catalog."default",
    is_active boolean,
    is_serialized boolean,
    is_rentable boolean,
    requires_maintenance boolean,
    maintenance_interval_days integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT inventory_items_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.inventory_transaction_types
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    affects_quantity character varying(10) COLLATE pg_catalog."default",
    requires_approval boolean DEFAULT false,
    is_system_type boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT inventory_transaction_types_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.inventory_transaction_types
    IS 'Types of inventory transactions';

CREATE TABLE IF NOT EXISTS public.inventory_transactions
(
    id integer NOT NULL DEFAULT nextval('inventory_transaction_id_seq'::regclass),
    inventoryid integer NOT NULL,
    transactiontype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    quantity integer NOT NULL,
    referencetype character varying(20) COLLATE pg_catalog."default",
    referenceid integer,
    notes text COLLATE pg_catalog."default",
    createduserid smallint NOT NULL,
    createddatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT inventory_transaction_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.inventory_transactions
    IS 'Inventory movement transactions';

CREATE TABLE IF NOT EXISTS public.invoice_details
(
    id serial NOT NULL,
    invoice_id integer NOT NULL,
    product_id integer NOT NULL,
    quantity integer NOT NULL,
    unit_price numeric(10, 2) NOT NULL,
    discount_percent numeric(5, 2) DEFAULT 0,
    tax_percent numeric(5, 2) DEFAULT 0,
    line_total numeric(10, 2) NOT NULL,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT invoice_details_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.invoice_details
    IS 'Line items for invoices';

CREATE TABLE IF NOT EXISTS public.invoice_forms
(
    id serial NOT NULL,
    invoice_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    company_id integer NOT NULL,
    invoice_date date NOT NULL,
    due_date date NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    subtotal numeric(10, 2) NOT NULL,
    tax_amount numeric(10, 2) DEFAULT 0,
    discount_amount numeric(10, 2) DEFAULT 0,
    total_amount numeric(10, 2) NOT NULL,
    notes text COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT invoice_forms_pkey PRIMARY KEY (id),
    CONSTRAINT invoice_forms_invoice_number_key UNIQUE (invoice_number)
);

COMMENT ON TABLE public.invoice_forms
    IS 'Main invoice records';

CREATE TABLE IF NOT EXISTS public.invoice_items
(
    id integer NOT NULL DEFAULT nextval('invoice_item_id_seq'::regclass),
    invoiceid integer NOT NULL,
    itemtype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    itemid integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    quantity integer NOT NULL,
    unitprice numeric(18, 2) NOT NULL,
    discount numeric(18, 2) NOT NULL DEFAULT 0,
    taxrate numeric(5, 2) NOT NULL DEFAULT 0,
    total numeric(18, 2) NOT NULL,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT invoice_item_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.invoice_items
    IS 'Individual line items in invoices';

CREATE TABLE IF NOT EXISTS public.invoice_transaction_types
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    affects_balance character varying(10) COLLATE pg_catalog."default",
    requires_approval boolean DEFAULT false,
    is_system_type boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT invoice_transaction_types_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.invoice_transaction_types
    IS 'Types of invoice transactions';

CREATE TABLE IF NOT EXISTS public.invoices
(
    id integer NOT NULL DEFAULT nextval('invoice_id_seq'::regclass),
    customerid integer NOT NULL,
    invoicenumber character varying(20) COLLATE pg_catalog."default" NOT NULL,
    invoicedate date NOT NULL,
    duedate date NOT NULL,
    subtotal numeric(18, 2) NOT NULL,
    taxamount numeric(18, 2) NOT NULL,
    totalamount numeric(18, 2) NOT NULL,
    paidamount numeric(18, 2) NOT NULL DEFAULT 0,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Pending'::character varying,
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT invoice_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.invoices
    IS 'Customer invoices';

CREATE TABLE IF NOT EXISTS public.journal_entries
(
    id serial NOT NULL,
    entry_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    period_id integer NOT NULL,
    entry_date date NOT NULL,
    entry_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    reference_number character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'draft'::character varying,
    is_recurring boolean DEFAULT false,
    is_reversal boolean DEFAULT false,
    reversed_entry_id integer,
    posted_date timestamp without time zone,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT journal_entries_pkey PRIMARY KEY (id),
    CONSTRAINT journal_entries_entry_number_key UNIQUE (entry_number)
);

COMMENT ON TABLE public.journal_entries
    IS 'Journal entry header records';

CREATE TABLE IF NOT EXISTS public.kb_article_feedbacks
(
    id integer NOT NULL DEFAULT nextval('kb_article_feedback_id_seq'::regclass),
    articleid integer NOT NULL,
    userid integer,
    rating smallint NOT NULL,
    comments text COLLATE pg_catalog."default",
    submissiondate timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT kb_article_feedback_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.kb_article_feedbacks
    IS 'Feedback on knowledge base articles';

CREATE TABLE IF NOT EXISTS public.kb_articles
(
    id integer NOT NULL DEFAULT nextval('kb_article_id_seq'::regclass),
    title character varying(200) COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    categoryid integer NOT NULL,
    authorid integer NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Draft'::character varying,
    tags text COLLATE pg_catalog."default",
    viewcount integer NOT NULL DEFAULT 0,
    publisheddate timestamp without time zone,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT kb_article_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.kb_articles
    IS 'Knowledge base articles';

CREATE TABLE IF NOT EXISTS public.kb_categories
(
    id integer NOT NULL DEFAULT nextval('kb_category_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    parentcategoryid integer,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT kb_category_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.kb_categories
    IS 'Knowledge base article categories';

CREATE TABLE IF NOT EXISTS public.kit_details
(
    id serial NOT NULL,
    kit_id integer NOT NULL,
    product_id integer NOT NULL,
    quantity integer NOT NULL DEFAULT 1,
    is_required boolean DEFAULT true,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT kit_details_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.kit_details
    IS 'Individual products within kits';

CREATE TABLE IF NOT EXISTS public.kit_items
(
    id serial NOT NULL,
    kit_id integer NOT NULL,
    product_id integer NOT NULL,
    quantity integer NOT NULL,
    is_required boolean DEFAULT true,
    display_order integer,
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT kit_items_pkey PRIMARY KEY (id),
    CONSTRAINT uq_kit_item UNIQUE (kit_id, product_id)
);

COMMENT ON TABLE public.kit_items
    IS 'Items included in product kits';

CREATE TABLE IF NOT EXISTS public.kit_templates
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    product_type_id integer,
    version character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT kit_templates_pkey PRIMARY KEY (id),
    CONSTRAINT uq_kit_template_name UNIQUE (name, version)
);

COMMENT ON TABLE public.kit_templates
    IS 'Product kit templates';

CREATE TABLE IF NOT EXISTS public.kits
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    kit_type character varying(50) COLLATE pg_catalog."default",
    product_group_id integer,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT kits_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.kits
    IS 'Product kits or bundles configuration';

CREATE TABLE IF NOT EXISTS public.legal_representatives
(
    id serial NOT NULL,
    entity_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    entity_id integer NOT NULL,
    first_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    relationship character varying(100) COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    address_id integer,
    documentation_path text COLLATE pg_catalog."default",
    valid_from date NOT NULL,
    valid_until date,
    is_active boolean DEFAULT true,
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT legal_representatives_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.legal_representatives
    IS 'Legal representative information';

CREATE TABLE IF NOT EXISTS public.locations
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    address_id integer,
    parent_id integer,
    manager_id integer,
    phone character varying(20) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    operating_hours jsonb,
    capacity integer,
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT locations_pkey PRIMARY KEY (id),
    CONSTRAINT uq_location_name UNIQUE (name)
);

COMMENT ON TABLE public.locations
    IS 'Physical location and facility management';

CREATE TABLE IF NOT EXISTS public.maintenance_checklist_items
(
    id integer NOT NULL DEFAULT nextval('maintenance_checklist_item_id_seq'::regclass),
    checklistid integer NOT NULL,
    itemorder smallint NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    requiredaction text COLLATE pg_catalog."default",
    expectedvalue text COLLATE pg_catalog."default",
    isrequired boolean NOT NULL DEFAULT true,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT maintenance_checklist_item_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.maintenance_checklist_items
    IS 'Individual items in maintenance checklists';

CREATE TABLE IF NOT EXISTS public.maintenance_checklists
(
    id integer NOT NULL DEFAULT nextval('maintenance_checklist_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    equipmenttypeid integer NOT NULL,
    version character varying(10) COLLATE pg_catalog."default" NOT NULL,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT maintenance_checklist_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.maintenance_checklists
    IS 'Maintenance checklists by equipment type';

CREATE TABLE IF NOT EXISTS public.maintenance_log_items
(
    id integer NOT NULL DEFAULT nextval('maintenance_log_item_id_seq'::regclass),
    maintenancelogid integer NOT NULL,
    checklistitemid integer NOT NULL,
    actualvalue text COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    notes text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT maintenance_log_item_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.maintenance_log_items
    IS 'Individual maintenance checklist item results';

CREATE TABLE IF NOT EXISTS public.maintenance_logs
(
    id serial NOT NULL,
    stock_item_id integer NOT NULL,
    maintenance_schedule_id integer,
    maintenance_date timestamp without time zone NOT NULL,
    completed_by character varying(100) COLLATE pg_catalog."default" NOT NULL,
    duration_minutes integer,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    notes text COLLATE pg_catalog."default",
    checklist_results text COLLATE pg_catalog."default",
    parts_replaced text COLLATE pg_catalog."default",
    labor_cost numeric(10, 2),
    parts_cost numeric(10, 2),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT maintenance_logs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.maintenance_schedules
(
    id serial NOT NULL,
    inventory_item_id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    interval_days integer NOT NULL,
    checklist text COLLATE pg_catalog."default",
    estimated_duration_minutes integer,
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT maintenance_schedules_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.manufacturers
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    contact_name character varying(100) COLLATE pg_catalog."default",
    contact_email character varying(255) COLLATE pg_catalog."default",
    contact_phone character varying(20) COLLATE pg_catalog."default",
    website character varying(255) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT manufacturers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.medical_conditions
(
    id serial NOT NULL,
    name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    icd_codes jsonb,
    category character varying(100) COLLATE pg_catalog."default",
    severity character varying(20) COLLATE pg_catalog."default",
    chronic boolean DEFAULT false,
    symptoms text[] COLLATE pg_catalog."default",
    treatments text[] COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT medical_conditions_pkey PRIMARY KEY (id),
    CONSTRAINT uq_medical_condition_name UNIQUE (name)
);

COMMENT ON TABLE public.medical_conditions
    IS 'Medical condition definitions and metadata';

CREATE TABLE IF NOT EXISTS public.message_attachments
(
    id serial NOT NULL,
    message_id integer NOT NULL,
    file_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    file_type character varying(100) COLLATE pg_catalog."default",
    file_size integer,
    content_type character varying(100) COLLATE pg_catalog."default",
    storage_path text COLLATE pg_catalog."default",
    is_inline boolean DEFAULT false,
    content_id character varying(100) COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT message_attachments_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.message_attachments
    IS 'Message attachment information';

CREATE TABLE IF NOT EXISTS public.message_queue
(
    id serial NOT NULL,
    template_id integer,
    template_version_id integer,
    message_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    subject text COLLATE pg_catalog."default",
    body text COLLATE pg_catalog."default" NOT NULL,
    priority integer DEFAULT 0,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    scheduled_time timestamp without time zone,
    processed_time timestamp without time zone,
    error_message text COLLATE pg_catalog."default",
    retry_count integer DEFAULT 0,
    max_retries integer DEFAULT 3,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT message_queue_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.message_queue
    IS 'Message processing queue';

CREATE TABLE IF NOT EXISTS public.message_recipients
(
    id serial NOT NULL,
    message_id integer NOT NULL,
    recipient_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    recipient_address text COLLATE pg_catalog."default" NOT NULL,
    recipient_name character varying(100) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    sent_time timestamp without time zone,
    error_message text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT message_recipients_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.message_recipients
    IS 'Message recipient details';

CREATE TABLE IF NOT EXISTS public.metric_types
(
    id integer NOT NULL DEFAULT nextval('metric_type_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    unit character varying(20) COLLATE pg_catalog."default",
    datatype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT metric_type_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.metric_types
    IS 'Types of system metrics';

CREATE TABLE IF NOT EXISTS public.migration_log
(
    id serial NOT NULL,
    migration_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    table_name character varying(100) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    error_message text COLLATE pg_catalog."default",
    records_migrated integer,
    CONSTRAINT migration_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.notification_queue
(
    id serial NOT NULL,
    notification_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    template_id integer,
    subject character varying(200) COLLATE pg_catalog."default",
    message text COLLATE pg_catalog."default",
    priority integer DEFAULT 0,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    scheduled_at timestamp without time zone,
    sent_at timestamp without time zone,
    error_message text COLLATE pg_catalog."default",
    retry_count integer DEFAULT 0,
    max_retries integer DEFAULT 3,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT notification_queue_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.notification_recipients
(
    id serial NOT NULL,
    notification_id integer NOT NULL,
    recipient_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    recipient_address character varying(255) COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    sent_at timestamp without time zone,
    error_message text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notification_recipients_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.notification_templates
(
    id integer NOT NULL DEFAULT nextval('notification_template_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    subject character varying(200) COLLATE pg_catalog."default",
    bodytemplate text COLLATE pg_catalog."default" NOT NULL,
    templatetype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    parameters text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notification_template_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.notification_templates
    IS 'Templates for system notifications';

CREATE TABLE IF NOT EXISTS public.notifications
(
    id integer NOT NULL DEFAULT nextval('notification_id_seq'::regclass),
    templateid integer NOT NULL,
    recipienttype character varying(20) COLLATE pg_catalog."default" NOT NULL,
    recipientid integer NOT NULL,
    subject character varying(200) COLLATE pg_catalog."default",
    body text COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Pending'::character varying,
    sentattempts integer NOT NULL DEFAULT 0,
    lasterror text COLLATE pg_catalog."default",
    createddatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    sentdatetime timestamp without time zone,
    CONSTRAINT notification_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.notifications
    IS 'System notifications';

CREATE TABLE IF NOT EXISTS public.order_details
(
    id serial NOT NULL,
    order_id integer NOT NULL,
    inventory_item_id integer NOT NULL,
    sale_rent_type salerenttype NOT NULL,
    serial_number character varying(50) COLLATE pg_catalog."default",
    quantity integer NOT NULL,
    unit_price numeric(10, 2) NOT NULL,
    billable_price numeric(10, 2) NOT NULL,
    allowable_price numeric(10, 2),
    billing_code character varying(20) COLLATE pg_catalog."default" NOT NULL,
    modifier1 character varying(2) COLLATE pg_catalog."default",
    modifier2 character varying(2) COLLATE pg_catalog."default",
    modifier3 character varying(2) COLLATE pg_catalog."default",
    modifier4 character varying(2) COLLATE pg_catalog."default",
    dos_from date NOT NULL,
    dos_to date,
    pickup_date date,
    authorization_number character varying(50) COLLATE pg_catalog."default",
    authorization_type_id integer,
    is_completed boolean,
    is_cancelled boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT order_details_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.order_fulfillment
(
    id serial NOT NULL,
    order_id integer NOT NULL,
    fulfilled_by integer,
    fulfilled_date timestamp without time zone NOT NULL,
    quantity_fulfilled integer NOT NULL,
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT order_fulfillment_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.order_fulfillments
(
    id serial NOT NULL,
    order_id integer NOT NULL,
    fulfillment_date timestamp without time zone NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    shipping_package_id integer,
    tracking_number character varying(100) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT order_fulfillments_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.order_fulfillments
    IS 'Order fulfillment tracking';

CREATE TABLE IF NOT EXISTS public.order_history
(
    id serial NOT NULL,
    order_id integer NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    change_date timestamp without time zone NOT NULL,
    changed_by character varying(50) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT order_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.order_items
(
    id serial NOT NULL,
    order_id integer NOT NULL,
    product_id integer,
    item_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    quantity integer NOT NULL,
    unit_price numeric(10, 2),
    instructions text COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT order_items_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.order_status
(
    id serial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT order_status_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.order_status
    IS 'Order status types';

CREATE TABLE IF NOT EXISTS public.order_status_histories
(
    id integer NOT NULL DEFAULT nextval('order_status_history_id_seq'::regclass),
    order_id integer NOT NULL,
    status orderstatus NOT NULL,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT order_status_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.order_status_history
(
    id serial NOT NULL,
    order_id integer NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT order_status_history_pkey1 PRIMARY KEY (id)
);

COMMENT ON TABLE public.order_status_history
    IS 'Order status change history';

CREATE TABLE IF NOT EXISTS public.order_trackings
(
    id integer NOT NULL DEFAULT nextval('order_tracking_id_seq'::regclass),
    orderid integer NOT NULL,
    statusid integer NOT NULL,
    notes text COLLATE pg_catalog."default",
    createduserid smallint NOT NULL,
    createddatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT order_tracking_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.order_trackings
    IS 'Order status history';

CREATE TABLE IF NOT EXISTS public.order_types
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    workflow_type character varying(50) COLLATE pg_catalog."default",
    requires_approval boolean DEFAULT false,
    auto_fulfill boolean DEFAULT false,
    settings jsonb,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT order_types_pkey PRIMARY KEY (id),
    CONSTRAINT uq_order_type_name UNIQUE (name)
);

COMMENT ON TABLE public.order_types
    IS 'Order type configurations';

CREATE TABLE IF NOT EXISTS public.orders
(
    id serial NOT NULL,
    order_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    order_type_id integer NOT NULL,
    customer_id integer NOT NULL,
    company_id integer NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'draft'::character varying,
    order_date timestamp without time zone NOT NULL,
    due_date timestamp without time zone,
    shipping_method_id integer,
    shipping_address_id integer,
    billing_address_id integer,
    subtotal numeric(10, 2) NOT NULL,
    shipping_cost numeric(10, 2) DEFAULT 0,
    tax_amount numeric(10, 2) DEFAULT 0,
    discount_amount numeric(10, 2) DEFAULT 0,
    total_amount numeric(10, 2) NOT NULL,
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT orders_pkey PRIMARY KEY (id),
    CONSTRAINT orders_order_number_key UNIQUE (order_number)
);

COMMENT ON TABLE public.orders
    IS 'Main order management table';

CREATE TABLE IF NOT EXISTS public.patients
(
    id serial NOT NULL,
    first_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    middle_name character varying(100) COLLATE pg_catalog."default",
    date_of_birth date NOT NULL,
    gender character varying(20) COLLATE pg_catalog."default",
    ssn character varying(11) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    phone_primary character varying(20) COLLATE pg_catalog."default",
    phone_secondary character varying(20) COLLATE pg_catalog."default",
    address_id integer,
    emergency_contact jsonb,
    insurance_info jsonb,
    medical_history jsonb,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT patients_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.patients
    IS 'Patient demographic and contact information';

CREATE TABLE IF NOT EXISTS public.payers
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    insurance_group_id integer,
    payer_type character varying(50) COLLATE pg_catalog."default",
    payer_id character varying(50) COLLATE pg_catalog."default",
    npi character varying(10) COLLATE pg_catalog."default",
    tax_id character varying(20) COLLATE pg_catalog."default",
    contact_name character varying(100) COLLATE pg_catalog."default",
    contact_phone character varying(20) COLLATE pg_catalog."default",
    contact_email character varying(100) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT payers_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.payers
    IS 'Insurance payers and their identification details';

CREATE TABLE IF NOT EXISTS public.payment_adjustments
(
    id serial NOT NULL,
    payment_id integer NOT NULL,
    adjustment_type adjustmenttype NOT NULL,
    amount numeric(10, 2) NOT NULL,
    reason_code character varying(20) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT payment_adjustments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.payment_allocations
(
    id serial NOT NULL,
    payment_transaction_id integer NOT NULL,
    invoice_id integer NOT NULL,
    amount numeric(10, 2) NOT NULL,
    allocation_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT payment_allocations_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.payment_allocations
    IS 'Payment to invoice allocations';

CREATE TABLE IF NOT EXISTS public.payment_methods
(
    id serial NOT NULL,
    customer_id integer NOT NULL,
    method_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    provider character varying(50) COLLATE pg_catalog."default",
    account_number character varying(50) COLLATE pg_catalog."default",
    expiry_date date,
    is_default boolean DEFAULT false,
    is_verified boolean DEFAULT false,
    verification_date timestamp without time zone,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    billing_address_id integer,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT payment_methods_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.payment_methods
    IS 'Stored payment methods';

CREATE TABLE IF NOT EXISTS public.payment_plan_items
(
    id serial NOT NULL,
    plan_id integer NOT NULL,
    due_date date NOT NULL,
    amount numeric(10, 2) NOT NULL,
    paid_amount numeric(10, 2) DEFAULT 0,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    paid_date date,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT payment_plan_items_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.payment_plan_payments
(
    id serial NOT NULL,
    payment_plan_id integer NOT NULL,
    payment_number integer NOT NULL,
    due_date date NOT NULL,
    amount numeric(10, 2) NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    payment_date date,
    payment_method character varying(50) COLLATE pg_catalog."default",
    reference_number character varying(50) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT payment_plan_payments_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.payment_plan_payments
    IS 'Individual payments within payment plans';

CREATE TABLE IF NOT EXISTS public.payment_plans
(
    id serial NOT NULL,
    patient_id integer NOT NULL,
    total_amount numeric(10, 2) NOT NULL,
    down_payment numeric(10, 2),
    number_of_payments integer NOT NULL,
    payment_frequency character varying(20) COLLATE pg_catalog."default" NOT NULL,
    start_date date NOT NULL,
    end_date date,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT payment_plans_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.payment_transactions
(
    id serial NOT NULL,
    billing_account_id integer NOT NULL,
    payment_method_id integer,
    transaction_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    transaction_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    amount numeric(10, 2) NOT NULL,
    currency character varying(3) COLLATE pg_catalog."default" DEFAULT 'USD'::character varying,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    processed_date timestamp without time zone,
    settlement_date timestamp without time zone,
    reference_number character varying(50) COLLATE pg_catalog."default",
    authorization_code character varying(50) COLLATE pg_catalog."default",
    response_code character varying(20) COLLATE pg_catalog."default",
    response_message text COLLATE pg_catalog."default",
    gateway_response jsonb,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT payment_transactions_pkey PRIMARY KEY (id),
    CONSTRAINT payment_transactions_transaction_number_key UNIQUE (transaction_number)
);

COMMENT ON TABLE public.payment_transactions
    IS 'Payment transaction records';

CREATE TABLE IF NOT EXISTS public.payments
(
    id serial NOT NULL,
    claim_id integer,
    order_id integer NOT NULL,
    payment_number character varying(50) COLLATE pg_catalog."default",
    payment_date timestamp without time zone NOT NULL,
    payment_type paymenttype NOT NULL,
    status paymentstatus NOT NULL,
    amount numeric(10, 2) NOT NULL,
    reference_number character varying(50) COLLATE pg_catalog."default",
    payment_method character varying(50) COLLATE pg_catalog."default",
    payment_source character varying(100) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT payments_pkey PRIMARY KEY (id),
    CONSTRAINT payments_payment_number_key UNIQUE (payment_number)
);

CREATE TABLE IF NOT EXISTS public.performance_logs
(
    id integer NOT NULL DEFAULT nextval('performance_log_id_seq'::regclass),
    component character varying(100) COLLATE pg_catalog."default" NOT NULL,
    operation character varying(100) COLLATE pg_catalog."default" NOT NULL,
    starttime timestamp without time zone NOT NULL,
    endtime timestamp without time zone NOT NULL,
    duration integer NOT NULL,
    success boolean NOT NULL,
    errordetails text COLLATE pg_catalog."default",
    metadata jsonb,
    CONSTRAINT performance_log_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.performance_logs
    IS 'System performance monitoring';

CREATE TABLE IF NOT EXISTS public.permissions
(
    id serial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    resource character varying(50) COLLATE pg_catalog."default" NOT NULL,
    action character varying(50) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT permissions_pkey PRIMARY KEY (id),
    CONSTRAINT permissions_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.predefined_text
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    category character varying(50) COLLATE pg_catalog."default",
    is_system_text boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT predefined_text_pkey PRIMARY KEY (id),
    CONSTRAINT uq_predefined_text_name UNIQUE (name)
);

COMMENT ON TABLE public.predefined_text
    IS 'Reusable text templates';

CREATE TABLE IF NOT EXISTS public.preference_definitions
(
    id serial NOT NULL,
    category character varying(50) COLLATE pg_catalog."default" NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    display_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    data_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    default_value text COLLATE pg_catalog."default",
    possible_values jsonb,
    validation_rules jsonb,
    is_system_preference boolean DEFAULT false,
    is_user_configurable boolean DEFAULT true,
    display_order integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT preference_definitions_pkey PRIMARY KEY (id),
    CONSTRAINT uq_preference_definition_name UNIQUE (category, name)
);

COMMENT ON TABLE public.preference_definitions
    IS 'System and user preference definitions';

CREATE TABLE IF NOT EXISTS public.prescription_refills
(
    id serial NOT NULL,
    prescription_id integer NOT NULL,
    refill_date date NOT NULL,
    quantity integer NOT NULL,
    pharmacy_name character varying(200) COLLATE pg_catalog."default",
    pharmacy_phone character varying(20) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT prescription_refills_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.prescriptions
(
    id serial NOT NULL,
    patient_id integer NOT NULL,
    doctor_id integer NOT NULL,
    medication_name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    strength character varying(50) COLLATE pg_catalog."default",
    form character varying(50) COLLATE pg_catalog."default",
    sig text COLLATE pg_catalog."default" NOT NULL,
    quantity integer NOT NULL,
    refills integer DEFAULT 0,
    dispense_as_written boolean DEFAULT false,
    start_date date,
    end_date date,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT prescriptions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.price_codes
(
    id serial NOT NULL,
    code character varying(20) COLLATE pg_catalog."default" NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    calculation_method character varying(50) COLLATE pg_catalog."default",
    markup_rate numeric(5, 2),
    discount_rate numeric(5, 2),
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT price_codes_pkey PRIMARY KEY (id),
    CONSTRAINT uq_price_code UNIQUE (code)
);

COMMENT ON TABLE public.price_codes
    IS 'Price code and calculation methods';

CREATE TABLE IF NOT EXISTS public.price_history
(
    id serial NOT NULL,
    entity_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    entity_id integer NOT NULL,
    price_code_id integer,
    old_price numeric(12, 2),
    new_price numeric(12, 2),
    change_reason text COLLATE pg_catalog."default",
    effective_date timestamp without time zone NOT NULL,
    end_date timestamp without time zone,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT price_history_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.price_history
    IS 'Historical price changes';

CREATE TABLE IF NOT EXISTS public.product_categories
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    parent_id integer,
    display_order integer,
    image_url text COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT product_categories_pkey PRIMARY KEY (id),
    CONSTRAINT uq_product_category_name UNIQUE (name)
);

COMMENT ON TABLE public.product_categories
    IS 'Product category hierarchy';

CREATE TABLE IF NOT EXISTS public.product_groups
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    category_id integer,
    display_order integer,
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT product_groups_pkey PRIMARY KEY (id),
    CONSTRAINT uq_product_group_name UNIQUE (name)
);

COMMENT ON TABLE public.product_groups
    IS 'Product grouping definitions';

CREATE TABLE IF NOT EXISTS public.product_history
(
    id serial NOT NULL,
    product_id integer NOT NULL,
    field_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    old_value text COLLATE pg_catalog."default",
    new_value text COLLATE pg_catalog."default",
    change_type character varying(20) COLLATE pg_catalog."default",
    change_reason text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT product_history_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.product_history
    IS 'Product change history';

CREATE TABLE IF NOT EXISTS public.product_prices
(
    id serial NOT NULL,
    product_id integer NOT NULL,
    price_code_id integer NOT NULL,
    base_price numeric(12, 2) NOT NULL,
    min_price numeric(12, 2),
    max_price numeric(12, 2),
    effective_date timestamp without time zone NOT NULL,
    end_date timestamp without time zone,
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT product_prices_pkey PRIMARY KEY (id),
    CONSTRAINT uq_product_price UNIQUE (product_id, price_code_id, effective_date)
);

COMMENT ON TABLE public.product_prices
    IS 'Product pricing information';

CREATE TABLE IF NOT EXISTS public.product_types
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    group_id integer,
    attributes jsonb,
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT product_types_pkey PRIMARY KEY (id),
    CONSTRAINT uq_product_type_name UNIQUE (name)
);

COMMENT ON TABLE public.product_types
    IS 'Product type classifications';

CREATE TABLE IF NOT EXISTS public.products
(
    id serial NOT NULL,
    sku character varying(50) COLLATE pg_catalog."default" NOT NULL,
    name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    category_id integer,
    manufacturer character varying(100) COLLATE pg_catalog."default",
    model_number character varying(100) COLLATE pg_catalog."default",
    unit_of_measure character varying(50) COLLATE pg_catalog."default",
    dimensions jsonb,
    weight numeric(10, 2),
    specifications jsonb,
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT products_pkey PRIMARY KEY (id),
    CONSTRAINT uq_product_sku UNIQUE (sku)
);

COMMENT ON TABLE public.products
    IS 'Product catalog information';

CREATE TABLE IF NOT EXISTS public.provider_types
(
    id serial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT provider_types_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.quality_checklist_items
(
    id integer NOT NULL DEFAULT nextval('quality_checklist_item_id_seq'::regclass),
    checklistid integer NOT NULL,
    itemorder smallint NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    testmethod text COLLATE pg_catalog."default",
    acceptancecriteria text COLLATE pg_catalog."default" NOT NULL,
    isrequired boolean NOT NULL DEFAULT true,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT quality_checklist_item_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.quality_checklist_items
    IS 'Quality control checklist items';

CREATE TABLE IF NOT EXISTS public.quality_checklists
(
    id integer NOT NULL DEFAULT nextval('quality_checklist_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    equipmenttypeid integer NOT NULL,
    version character varying(10) COLLATE pg_catalog."default" NOT NULL,
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT quality_checklist_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.quality_checklists
    IS 'Quality control checklists';

CREATE TABLE IF NOT EXISTS public.quality_inspections
(
    id integer NOT NULL DEFAULT nextval('quality_inspection_id_seq'::regclass),
    equipmentid integer NOT NULL,
    checklistid integer NOT NULL,
    inspectiondate timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    inspectorid integer NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'In Progress'::character varying,
    notes text COLLATE pg_catalog."default",
    completiondate timestamp without time zone,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT quality_inspection_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.quality_inspections
    IS 'Quality control inspection records';

CREATE TABLE IF NOT EXISTS public.report_categories
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    parent_category_id integer,
    display_order integer,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT report_categories_pkey PRIMARY KEY (id),
    CONSTRAINT uq_report_category_name UNIQUE (name)
);

COMMENT ON TABLE public.report_categories
    IS 'Report category hierarchy';

CREATE TABLE IF NOT EXISTS public.report_definitions
(
    id serial NOT NULL,
    category_id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    report_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    data_source character varying(100) COLLATE pg_catalog."default",
    query_definition text COLLATE pg_catalog."default",
    template_path character varying(500) COLLATE pg_catalog."default",
    output_formats character varying(50)[] COLLATE pg_catalog."default",
    parameters jsonb,
    custom_logic text COLLATE pg_catalog."default",
    is_system_report boolean DEFAULT false,
    is_featured boolean DEFAULT false,
    is_active boolean DEFAULT true,
    version integer DEFAULT 1,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT report_definitions_pkey PRIMARY KEY (id),
    CONSTRAINT uq_report_definition_name UNIQUE (name)
);

COMMENT ON TABLE public.report_definitions
    IS 'Report template definitions';

CREATE TABLE IF NOT EXISTS public.report_executions
(
    id serial NOT NULL,
    report_id integer NOT NULL,
    execution_id character varying(50) COLLATE pg_catalog."default" NOT NULL,
    user_id integer NOT NULL,
    parameters jsonb,
    start_time timestamp without time zone NOT NULL,
    end_time timestamp without time zone,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    output_format character varying(20) COLLATE pg_catalog."default",
    output_size bigint,
    output_path character varying(500) COLLATE pg_catalog."default",
    error_message text COLLATE pg_catalog."default",
    row_count integer,
    execution_time integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT report_executions_pkey PRIMARY KEY (id),
    CONSTRAINT report_executions_execution_id_key UNIQUE (execution_id)
);

COMMENT ON TABLE public.report_executions
    IS 'Report execution history';

CREATE TABLE IF NOT EXISTS public.report_parameters
(
    id serial NOT NULL,
    report_id integer NOT NULL,
    parameter_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    display_name character varying(100) COLLATE pg_catalog."default",
    parameter_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    default_value text COLLATE pg_catalog."default",
    is_required boolean DEFAULT false,
    validation_rules jsonb,
    display_order integer,
    help_text text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT report_parameters_pkey PRIMARY KEY (id),
    CONSTRAINT uq_report_parameter_name UNIQUE (report_id, parameter_name)
);

COMMENT ON TABLE public.report_parameters
    IS 'Report parameter configurations';

CREATE TABLE IF NOT EXISTS public.report_schedules
(
    id serial NOT NULL,
    report_id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    schedule_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    frequency character varying(20) COLLATE pg_catalog."default" NOT NULL,
    start_date date NOT NULL,
    end_date date,
    parameters jsonb,
    output_format character varying(20) COLLATE pg_catalog."default" NOT NULL,
    recipients jsonb,
    is_active boolean DEFAULT true,
    last_run_time timestamp without time zone,
    next_run_time timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT report_schedules_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.report_schedules
    IS 'Report scheduling configuration';

CREATE TABLE IF NOT EXISTS public.report_subscriptions
(
    id serial NOT NULL,
    report_id integer NOT NULL,
    user_id integer NOT NULL,
    schedule_id integer,
    subscription_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    delivery_method character varying(50) COLLATE pg_catalog."default" NOT NULL,
    format_preference character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    last_delivered_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT report_subscriptions_pkey PRIMARY KEY (id),
    CONSTRAINT uq_report_subscription UNIQUE (report_id, user_id, subscription_type)
);

COMMENT ON TABLE public.report_subscriptions
    IS 'User report subscriptions';

CREATE TABLE IF NOT EXISTS public.role_permissions
(
    role_id integer NOT NULL,
    permission_id integer NOT NULL,
    CONSTRAINT role_permissions_pkey PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id serial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT roles_pkey PRIMARY KEY (id),
    CONSTRAINT roles_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.service_histories
(
    id integer NOT NULL DEFAULT nextval('service_history_id_seq'::regclass),
    servicerequestid integer NOT NULL,
    actiondate timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    actiontype character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    technicianid integer NOT NULL,
    hours numeric(5, 2),
    parts text COLLATE pg_catalog."default",
    cost numeric(10, 2),
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT service_history_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.service_histories
    IS 'Service request history and actions';

CREATE TABLE IF NOT EXISTS public.service_requests
(
    id integer NOT NULL DEFAULT nextval('service_request_id_seq'::regclass),
    customerid integer NOT NULL,
    equipmentid integer NOT NULL,
    requestdate timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    priority character varying(20) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Pending'::character varying,
    assignedtechnicianid integer,
    scheduleddate timestamp without time zone,
    completiondate timestamp without time zone,
    resolution text COLLATE pg_catalog."default",
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT service_request_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.service_requests
    IS 'Customer service requests';

CREATE TABLE IF NOT EXISTS public.setting_definitions
(
    id serial NOT NULL,
    setting_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    data_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    default_value text COLLATE pg_catalog."default",
    allowed_values jsonb,
    is_system boolean DEFAULT false,
    is_required boolean DEFAULT false,
    is_readonly boolean DEFAULT false,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT setting_definitions_pkey PRIMARY KEY (id),
    CONSTRAINT setting_definitions_setting_name_key UNIQUE (setting_name)
);

CREATE TABLE IF NOT EXISTS public.setting_history
(
    id serial NOT NULL,
    value_id integer NOT NULL,
    old_value text COLLATE pg_catalog."default",
    new_value text COLLATE pg_catalog."default",
    change_date timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    changed_by character varying(50) COLLATE pg_catalog."default",
    change_reason text COLLATE pg_catalog."default",
    metadata jsonb,
    CONSTRAINT setting_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.setting_values
(
    id serial NOT NULL,
    definition_id integer NOT NULL,
    value text COLLATE pg_catalog."default" NOT NULL,
    is_active boolean DEFAULT true,
    valid_from timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    valid_to timestamp without time zone,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT setting_values_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.shipping_carriers
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    account_number character varying(50) COLLATE pg_catalog."default",
    api_key character varying(100) COLLATE pg_catalog."default",
    api_secret character varying(100) COLLATE pg_catalog."default",
    settings jsonb,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT shipping_carriers_pkey PRIMARY KEY (id),
    CONSTRAINT uq_shipping_carrier_name UNIQUE (name)
);

COMMENT ON TABLE public.shipping_carriers
    IS 'Shipping carrier configurations';

CREATE TABLE IF NOT EXISTS public.shipping_methods
(
    id serial NOT NULL,
    carrier_id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    service_code character varying(50) COLLATE pg_catalog."default",
    estimated_days integer,
    handling_time integer,
    cutoff_time time without time zone,
    is_signature_required boolean DEFAULT false,
    is_insurance_required boolean DEFAULT false,
    settings jsonb,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT shipping_methods_pkey PRIMARY KEY (id),
    CONSTRAINT uq_shipping_method_carrier UNIQUE (carrier_id, service_code)
);

COMMENT ON TABLE public.shipping_methods
    IS 'Available shipping methods per carrier';

CREATE TABLE IF NOT EXISTS public.shipping_packages
(
    id serial NOT NULL,
    tracking_number character varying(100) COLLATE pg_catalog."default",
    order_id integer,
    shipping_method_id integer NOT NULL,
    status character varying(50) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    ship_date date,
    estimated_delivery_date date,
    actual_delivery_date date,
    weight numeric(10, 2),
    length numeric(10, 2),
    width numeric(10, 2),
    height numeric(10, 2),
    declared_value numeric(10, 2),
    insurance_amount numeric(10, 2),
    shipping_cost numeric(10, 2),
    label_url character varying(500) COLLATE pg_catalog."default",
    tracking_url character varying(500) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT shipping_packages_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.shipping_packages
    IS 'Package tracking and delivery status';

CREATE TABLE IF NOT EXISTS public.shipping_zones
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    zip_codes text[] COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT shipping_zones_pkey PRIMARY KEY (id),
    CONSTRAINT uq_shipping_zone_name UNIQUE (name)
);

COMMENT ON TABLE public.shipping_zones
    IS 'Geographic shipping zones';

CREATE TABLE IF NOT EXISTS public.stock_items
(
    id serial NOT NULL,
    inventory_item_id integer NOT NULL,
    serial_number character varying(100) COLLATE pg_catalog."default",
    lot_number character varying(100) COLLATE pg_catalog."default",
    status itemstatus NOT NULL,
    warehouse_id integer NOT NULL,
    location_code character varying(50) COLLATE pg_catalog."default",
    purchase_date timestamp without time zone,
    purchase_order_number character varying(50) COLLATE pg_catalog."default",
    purchase_cost numeric(10, 2),
    notes text COLLATE pg_catalog."default",
    last_maintenance_date timestamp without time zone,
    next_maintenance_date timestamp without time zone,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT stock_items_pkey PRIMARY KEY (id),
    CONSTRAINT stock_items_serial_number_key UNIQUE (serial_number)
);

CREATE TABLE IF NOT EXISTS public.system_configs
(
    id serial NOT NULL,
    company_id integer NOT NULL,
    key character varying(100) COLLATE pg_catalog."default" NOT NULL,
    value character varying(500) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    is_encrypted boolean NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT system_configs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.system_metrics
(
    id integer NOT NULL DEFAULT nextval('system_metric_id_seq'::regclass),
    metrictypeid integer NOT NULL,
    value text COLLATE pg_catalog."default" NOT NULL,
    "timestamp" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    notes text COLLATE pg_catalog."default",
    CONSTRAINT system_metric_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.system_metrics
    IS 'System metric measurements';

CREATE TABLE IF NOT EXISTS public.system_modules
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    version character varying(20) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    dependencies jsonb,
    settings jsonb,
    is_core boolean DEFAULT false,
    is_enabled boolean DEFAULT true,
    install_date timestamp without time zone,
    last_updated timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT system_modules_pkey PRIMARY KEY (id),
    CONSTRAINT uq_system_module_name UNIQUE (name)
);

COMMENT ON TABLE public.system_modules
    IS 'System module registry and configuration';

CREATE TABLE IF NOT EXISTS public.system_settings
(
    id serial NOT NULL,
    setting_key character varying(100) COLLATE pg_catalog."default" NOT NULL,
    setting_value text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    setting_type character varying(50) COLLATE pg_catalog."default",
    is_encrypted boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT system_settings_pkey PRIMARY KEY (id),
    CONSTRAINT uq_setting_key UNIQUE (setting_key)
);

COMMENT ON TABLE public.system_settings
    IS 'System-wide configuration settings';

CREATE TABLE IF NOT EXISTS public.system_variables
(
    id serial NOT NULL,
    module_id integer,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default",
    data_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    is_runtime_configurable boolean DEFAULT false,
    requires_restart boolean DEFAULT false,
    description text COLLATE pg_catalog."default",
    validation_rules jsonb,
    default_value text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT system_variables_pkey PRIMARY KEY (id),
    CONSTRAINT uq_system_variable_name UNIQUE (module_id, name)
);

COMMENT ON TABLE public.system_variables
    IS 'System-wide variable configuration';

CREATE TABLE IF NOT EXISTS public.table_backup_log
(
    id serial NOT NULL,
    original_schema character varying(255) COLLATE pg_catalog."default",
    original_table character varying(255) COLLATE pg_catalog."default",
    backup_schema character varying(255) COLLATE pg_catalog."default",
    backup_table character varying(255) COLLATE pg_catalog."default",
    backup_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    row_count integer,
    CONSTRAINT table_backup_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.table_rename_log
(
    id serial NOT NULL,
    schema_name character varying(255) COLLATE pg_catalog."default",
    old_name character varying(255) COLLATE pg_catalog."default",
    new_name character varying(255) COLLATE pg_catalog."default",
    validation_type character varying(50) COLLATE pg_catalog."default",
    message text COLLATE pg_catalog."default",
    status character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT table_rename_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.task_categories
(
    id integer NOT NULL DEFAULT nextval('task_category_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT task_category_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.task_categories
    IS 'Categories for tasks';

CREATE TABLE IF NOT EXISTS public.task_comments
(
    id serial NOT NULL,
    task_id integer NOT NULL,
    comment_text text COLLATE pg_catalog."default" NOT NULL,
    is_internal boolean DEFAULT false,
    parent_comment_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT task_comments_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.task_comments
    IS 'Comments and discussions on tasks';

CREATE TABLE IF NOT EXISTS public.task_dependencies
(
    id serial NOT NULL,
    task_id integer NOT NULL,
    dependent_task_id integer NOT NULL,
    dependency_type character varying(20) COLLATE pg_catalog."default" DEFAULT 'finish_to_start'::character varying,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT task_dependencies_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.task_dependencies
    IS 'Dependencies between tasks';

CREATE TABLE IF NOT EXISTS public.task_priorities
(
    id integer NOT NULL DEFAULT nextval('task_priority_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    sla_hours integer,
    color_code character varying(7) COLLATE pg_catalog."default",
    isactive boolean NOT NULL DEFAULT true,
    lastupdateuserid smallint NOT NULL,
    lastupdatedatetime timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT task_priority_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.task_priorities
    IS 'Priority levels for tasks';

CREATE TABLE IF NOT EXISTS public.task_time_entries
(
    id serial NOT NULL,
    task_id integer NOT NULL,
    user_id integer NOT NULL,
    start_time timestamp without time zone NOT NULL,
    end_time timestamp without time zone,
    duration integer,
    description text COLLATE pg_catalog."default",
    is_billable boolean DEFAULT true,
    billing_rate numeric(10, 2),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT task_time_entries_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.task_time_entries
    IS 'Time tracking for tasks';

CREATE TABLE IF NOT EXISTS public.task_types
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    default_priority integer DEFAULT 0,
    estimated_duration integer,
    requires_approval boolean DEFAULT false,
    is_system_type boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT task_types_pkey PRIMARY KEY (id),
    CONSTRAINT uq_task_type_name UNIQUE (name)
);

COMMENT ON TABLE public.task_types
    IS 'Predefined types of tasks with default settings';

CREATE TABLE IF NOT EXISTS public.tasks
(
    id serial NOT NULL,
    task_type_id integer NOT NULL,
    title character varying(200) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    priority integer DEFAULT 0,
    due_date timestamp without time zone,
    start_date timestamp without time zone,
    completion_date timestamp without time zone,
    assigned_to integer,
    assigned_by integer,
    entity_type character varying(50) COLLATE pg_catalog."default",
    entity_id integer,
    parent_task_id integer,
    progress integer DEFAULT 0,
    estimated_hours numeric(5, 2),
    actual_hours numeric(5, 2),
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT tasks_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.tasks
    IS 'Main task tracking table';

CREATE TABLE IF NOT EXISTS public.tax_rates
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    rate numeric(5, 2) NOT NULL,
    description text COLLATE pg_catalog."default",
    is_compound boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT tax_rates_pkey PRIMARY KEY (id),
    CONSTRAINT uq_tax_rate_name UNIQUE (name)
);

COMMENT ON TABLE public.tax_rates
    IS 'Tax rate configurations';

CREATE TABLE IF NOT EXISTS public.template_categories
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    parent_id integer,
    display_order integer,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT template_categories_pkey PRIMARY KEY (id),
    CONSTRAINT uq_template_category_name UNIQUE (name)
);

COMMENT ON TABLE public.template_categories
    IS 'Communication template categories';

CREATE TABLE IF NOT EXISTS public.template_versions
(
    id serial NOT NULL,
    template_id integer NOT NULL,
    version_number integer NOT NULL,
    subject_template text COLLATE pg_catalog."default",
    body_template text COLLATE pg_catalog."default" NOT NULL,
    variables jsonb,
    metadata jsonb,
    is_active boolean DEFAULT false,
    published_at timestamp without time zone,
    published_by character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT template_versions_pkey PRIMARY KEY (id),
    CONSTRAINT uq_template_version UNIQUE (template_id, version_number)
);

COMMENT ON TABLE public.template_versions
    IS 'Version history for communication templates';

CREATE TABLE IF NOT EXISTS public.user_dashboards
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    layout_config jsonb,
    is_default boolean DEFAULT false,
    is_system_dashboard boolean DEFAULT false,
    display_order integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT user_dashboards_pkey PRIMARY KEY (id),
    CONSTRAINT uq_user_dashboard_name UNIQUE (user_id, name)
);

COMMENT ON TABLE public.user_dashboards
    IS 'User dashboard configurations';

CREATE TABLE IF NOT EXISTS public.user_notifications
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    notification_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    title character varying(200) COLLATE pg_catalog."default" NOT NULL,
    message text COLLATE pg_catalog."default",
    is_read boolean DEFAULT false,
    is_archived boolean DEFAULT false,
    read_at timestamp without time zone,
    archived_at timestamp without time zone,
    link_url character varying(500) COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT user_notifications_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.user_notifications
    IS 'User-specific notifications and alerts';

CREATE TABLE IF NOT EXISTS public.user_preferences
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    preference_id integer NOT NULL,
    preference_value text COLLATE pg_catalog."default" NOT NULL,
    is_default boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT user_preferences_pkey PRIMARY KEY (id),
    CONSTRAINT uq_user_preference UNIQUE (user_id, preference_id)
);

COMMENT ON TABLE public.user_preferences
    IS 'User preference values';

CREATE TABLE IF NOT EXISTS public.user_roles
(
    user_id integer NOT NULL,
    role_id integer NOT NULL,
    CONSTRAINT user_roles_pkey PRIMARY KEY (user_id, role_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    hashed_password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    full_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    is_active boolean NOT NULL,
    company_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email),
    CONSTRAINT users_username_key UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS public.variable_definitions
(
    id serial NOT NULL,
    variable_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    data_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    default_value text COLLATE pg_catalog."default",
    validation_rules jsonb,
    is_system boolean DEFAULT false,
    is_required boolean DEFAULT false,
    is_encrypted boolean DEFAULT false,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT variable_definitions_pkey PRIMARY KEY (id),
    CONSTRAINT variable_definitions_variable_name_key UNIQUE (variable_name)
);

CREATE TABLE IF NOT EXISTS public.variable_history
(
    id serial NOT NULL,
    value_id integer NOT NULL,
    old_value text COLLATE pg_catalog."default",
    new_value text COLLATE pg_catalog."default",
    change_date timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    changed_by character varying(50) COLLATE pg_catalog."default",
    change_reason text COLLATE pg_catalog."default",
    metadata jsonb,
    CONSTRAINT variable_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.variable_values
(
    id serial NOT NULL,
    definition_id integer NOT NULL,
    entity_type character varying(50) COLLATE pg_catalog."default",
    entity_id integer,
    value text COLLATE pg_catalog."default" NOT NULL,
    is_active boolean DEFAULT true,
    valid_from timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    valid_to timestamp without time zone,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT variable_values_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.variables
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    variable_type character varying(50) COLLATE pg_catalog."default",
    is_system boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT variables_pkey PRIMARY KEY (id),
    CONSTRAINT uq_variable_name UNIQUE (name)
);

COMMENT ON TABLE public.variables
    IS 'System and user-defined variables';

CREATE TABLE IF NOT EXISTS public.vendors
(
    id serial NOT NULL,
    name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    company_type_id integer,
    tax_id character varying(50) COLLATE pg_catalog."default",
    contact_name character varying(100) COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    website character varying(255) COLLATE pg_catalog."default",
    address_id integer,
    payment_terms character varying(100) COLLATE pg_catalog."default",
    credit_limit numeric(12, 2),
    rating integer,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    notes text COLLATE pg_catalog."default",
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT vendors_pkey PRIMARY KEY (id),
    CONSTRAINT uq_vendor_name UNIQUE (name)
);

COMMENT ON TABLE public.vendors
    IS 'Vendor and supplier management';

CREATE TABLE IF NOT EXISTS public.warehouses
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    code character varying(20) COLLATE pg_catalog."default" NOT NULL,
    address_line1 character varying(255) COLLATE pg_catalog."default" NOT NULL,
    address_line2 character varying(255) COLLATE pg_catalog."default",
    city character varying(100) COLLATE pg_catalog."default" NOT NULL,
    state character varying(2) COLLATE pg_catalog."default" NOT NULL,
    zip_code character varying(10) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(20) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    manager_name character varying(100) COLLATE pg_catalog."default",
    is_active boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT warehouses_pkey PRIMARY KEY (id),
    CONSTRAINT warehouses_code_key UNIQUE (code)
);

CREATE TABLE IF NOT EXISTS public.widget_instances
(
    id serial NOT NULL,
    dashboard_id integer NOT NULL,
    widget_id integer NOT NULL,
    instance_name character varying(100) COLLATE pg_catalog."default",
    position_x integer NOT NULL,
    position_y integer NOT NULL,
    width integer NOT NULL,
    height integer NOT NULL,
    config jsonb,
    refresh_interval integer,
    is_minimized boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT widget_instances_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.widget_instances
    IS 'Dashboard widget instances';

CREATE TABLE IF NOT EXISTS public.workflow_actions
(
    id serial NOT NULL,
    workflow_id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    action_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    target_type character varying(50) COLLATE pg_catalog."default",
    target_id character varying(100) COLLATE pg_catalog."default",
    parameters jsonb,
    timeout integer,
    retry_count integer DEFAULT 0,
    sequence_order integer NOT NULL,
    error_handling character varying(20) COLLATE pg_catalog."default" DEFAULT 'stop'::character varying,
    is_async boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT workflow_actions_pkey PRIMARY KEY (id),
    CONSTRAINT uq_workflow_action_order UNIQUE (workflow_id, sequence_order)
);

COMMENT ON TABLE public.workflow_actions
    IS 'Workflow action steps';

CREATE TABLE IF NOT EXISTS public.workflow_conditions
(
    id serial NOT NULL,
    workflow_id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    condition_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    operator character varying(20) COLLATE pg_catalog."default" NOT NULL,
    field_path character varying(255) COLLATE pg_catalog."default",
    expected_value jsonb,
    custom_logic text COLLATE pg_catalog."default",
    error_message text COLLATE pg_catalog."default",
    sequence_order integer NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT workflow_conditions_pkey PRIMARY KEY (id),
    CONSTRAINT uq_workflow_condition_order UNIQUE (workflow_id, sequence_order)
);

COMMENT ON TABLE public.workflow_conditions
    IS 'Workflow conditional logic';

CREATE TABLE IF NOT EXISTS public.workflow_definitions
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    version integer DEFAULT 1,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'draft'::character varying,
    priority integer DEFAULT 0,
    timeout integer,
    retry_policy jsonb,
    error_handling jsonb,
    metadata jsonb,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT workflow_definitions_pkey PRIMARY KEY (id),
    CONSTRAINT uq_workflow_definition_name UNIQUE (name, version)
);

COMMENT ON TABLE public.workflow_definitions
    IS 'Workflow process definitions';

CREATE TABLE IF NOT EXISTS public.workflow_executions
(
    id serial NOT NULL,
    workflow_id integer NOT NULL,
    execution_id character varying(50) COLLATE pg_catalog."default" NOT NULL,
    trigger_id integer,
    schedule_id integer,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    started_at timestamp without time zone,
    completed_at timestamp without time zone,
    input_data jsonb,
    output_data jsonb,
    error_details jsonb,
    current_action_id integer,
    execution_path jsonb,
    duration integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT workflow_executions_pkey PRIMARY KEY (id),
    CONSTRAINT workflow_executions_execution_id_key UNIQUE (execution_id)
);

COMMENT ON TABLE public.workflow_executions
    IS 'Workflow execution history';

CREATE TABLE IF NOT EXISTS public.workflow_schedules
(
    id serial NOT NULL,
    workflow_id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    schedule_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    cron_expression character varying(100) COLLATE pg_catalog."default",
    start_date timestamp without time zone NOT NULL,
    end_date timestamp without time zone,
    last_run_at timestamp without time zone,
    next_run_at timestamp without time zone,
    parameters jsonb,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT workflow_schedules_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.workflow_schedules
    IS 'Workflow scheduling configuration';

CREATE TABLE IF NOT EXISTS public.workflow_triggers
(
    id serial NOT NULL,
    workflow_id integer NOT NULL,
    trigger_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    event_source character varying(100) COLLATE pg_catalog."default",
    event_type character varying(100) COLLATE pg_catalog."default",
    conditions jsonb,
    schedule_pattern character varying(100) COLLATE pg_catalog."default",
    cooldown_period integer,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by character varying(50) COLLATE pg_catalog."default",
    updated_by character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT workflow_triggers_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.workflow_triggers
    IS 'Workflow trigger configurations';

ALTER TABLE IF EXISTS public.activity_logs
    ADD CONSTRAINT fk_activity_type FOREIGN KEY (activity_type_id)
    REFERENCES public.activity_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_activity_logs_type
    ON public.activity_logs(activity_type_id);


ALTER TABLE IF EXISTS public.activity_logs
    ADD CONSTRAINT fk_activity_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_activity_logs_user
    ON public.activity_logs(user_id);


ALTER TABLE IF EXISTS public.api_keys
    ADD CONSTRAINT fk_api_key_owner FOREIGN KEY (owner_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_api_keys_owner
    ON public.api_keys(owner_id);


ALTER TABLE IF EXISTS public.api_logs
    ADD CONSTRAINT fk_api_log_endpoint FOREIGN KEY (endpoint_id)
    REFERENCES public.integration_endpoints (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_api_logs_endpoint
    ON public.api_logs(endpoint_id);


ALTER TABLE IF EXISTS public.api_logs
    ADD CONSTRAINT fk_api_log_key FOREIGN KEY (api_key_id)
    REFERENCES public.api_keys (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_api_logs_key
    ON public.api_logs(api_key_id);


ALTER TABLE IF EXISTS public.api_metrics
    ADD CONSTRAINT fk_api_metric_endpoint FOREIGN KEY (endpoint_id)
    REFERENCES public.integration_endpoints (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_api_metrics_endpoint
    ON public.api_metrics(endpoint_id);


ALTER TABLE IF EXISTS public.api_metrics
    ADD CONSTRAINT fk_api_metric_key FOREIGN KEY (api_key_id)
    REFERENCES public.api_keys (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_api_metrics_key
    ON public.api_metrics(api_key_id);


ALTER TABLE IF EXISTS public.appointment_attendees
    ADD CONSTRAINT fk_appointment_attendee_appointment FOREIGN KEY (appointment_id)
    REFERENCES public.appointments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_appointment_attendees_appointment
    ON public.appointment_attendees(appointment_id);


ALTER TABLE IF EXISTS public.appointments
    ADD CONSTRAINT fk_appointment_calendar FOREIGN KEY (calendar_id)
    REFERENCES public.calendars (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_appointments_calendar
    ON public.appointments(calendar_id);


ALTER TABLE IF EXISTS public.appointments
    ADD CONSTRAINT fk_appointment_customer FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_appointments_customer
    ON public.appointments(customer_id);


ALTER TABLE IF EXISTS public.appointments
    ADD CONSTRAINT fk_appointment_type FOREIGN KEY (appointment_type_id)
    REFERENCES public.appointment_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_appointments_type
    ON public.appointments(appointment_type_id);


ALTER TABLE IF EXISTS public.audit_field_changes
    ADD CONSTRAINT fk_audit_field_log FOREIGN KEY (audit_log_id)
    REFERENCES public.audit_logs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_audit_field_changes_log
    ON public.audit_field_changes(audit_log_id);


ALTER TABLE IF EXISTS public.audit_logs
    ADD CONSTRAINT fk_audit_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_audit_logs_user
    ON public.audit_logs(user_id);


ALTER TABLE IF EXISTS public.availability_exceptions
    ADD CONSTRAINT fk_exception_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_availability_exceptions_user
    ON public.availability_exceptions(user_id);


ALTER TABLE IF EXISTS public.availability_schedules
    ADD CONSTRAINT fk_availability_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_availability_schedules_user
    ON public.availability_schedules(user_id);


ALTER TABLE IF EXISTS public.billing_accounts
    ADD CONSTRAINT fk_billing_account_customer FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_billing_accounts_customer
    ON public.billing_accounts(customer_id);


ALTER TABLE IF EXISTS public.billing_accounts
    ADD CONSTRAINT fk_billing_account_cycle FOREIGN KEY (billing_cycle_id)
    REFERENCES public.billing_cycles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_billing_accounts_cycle
    ON public.billing_accounts(billing_cycle_id);


ALTER TABLE IF EXISTS public.billing_schedules
    ADD CONSTRAINT fk_billing_schedule_account FOREIGN KEY (billing_account_id)
    REFERENCES public.billing_accounts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_billing_schedules_account
    ON public.billing_schedules(billing_account_id);


ALTER TABLE IF EXISTS public.calendar_sharing
    ADD CONSTRAINT fk_calendar_sharing_calendar FOREIGN KEY (calendar_id)
    REFERENCES public.calendars (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_calendar_sharing_calendar
    ON public.calendar_sharing(calendar_id);


ALTER TABLE IF EXISTS public.calendar_sharing
    ADD CONSTRAINT fk_calendar_sharing_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_calendar_sharing_user
    ON public.calendar_sharing(user_id);


ALTER TABLE IF EXISTS public.chart_of_accounts
    ADD CONSTRAINT fk_account_parent FOREIGN KEY (parent_account_id)
    REFERENCES public.chart_of_accounts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_chart_of_accounts_parent
    ON public.chart_of_accounts(parent_account_id);


ALTER TABLE IF EXISTS public.claim_denials
    ADD CONSTRAINT fk_denial_claim FOREIGN KEY (claim_id)
    REFERENCES public.insurance_claims (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_claim_denials_claim
    ON public.claim_denials(claim_id);


ALTER TABLE IF EXISTS public.claim_denials
    ADD CONSTRAINT fk_denial_reason FOREIGN KEY (reason_id)
    REFERENCES public.denial_reasons (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_claim_denials_reason
    ON public.claim_denials(reason_id);


ALTER TABLE IF EXISTS public.claim_line_items
    ADD CONSTRAINT claim_line_items_claim_id_fkey FOREIGN KEY (claim_id)
    REFERENCES public.claims (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.claim_line_items
    ADD CONSTRAINT claim_line_items_order_detail_id_fkey FOREIGN KEY (order_detail_id)
    REFERENCES public.order_details (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.claim_status_histories
    ADD CONSTRAINT claim_status_history_claim_id_fkey FOREIGN KEY (claim_id)
    REFERENCES public.claims (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.claims
    ADD CONSTRAINT claims_insurance_id_fkey FOREIGN KEY (insurance_id)
    REFERENCES public.customer_insurances (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.cmn_form_fields
    ADD CONSTRAINT fk_cmn_field_section FOREIGN KEY (section_id)
    REFERENCES public.cmn_form_sections (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_fields_section
    ON public.cmn_form_fields(section_id);


ALTER TABLE IF EXISTS public.cmn_form_responses
    ADD CONSTRAINT fk_cmn_response_doctor FOREIGN KEY (doctor_id)
    REFERENCES public.doctors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_responses_doctor
    ON public.cmn_form_responses(doctor_id);


ALTER TABLE IF EXISTS public.cmn_form_responses
    ADD CONSTRAINT fk_cmn_response_form FOREIGN KEY (form_id)
    REFERENCES public.cmn_forms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_responses_form
    ON public.cmn_form_responses(form_id);


ALTER TABLE IF EXISTS public.cmn_form_responses
    ADD CONSTRAINT fk_cmn_response_patient FOREIGN KEY (patient_id)
    REFERENCES public.patients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_responses_patient
    ON public.cmn_form_responses(patient_id);


ALTER TABLE IF EXISTS public.cmn_form_sections
    ADD CONSTRAINT fk_cmn_section_form FOREIGN KEY (form_id)
    REFERENCES public.cmn_forms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_sections_form
    ON public.cmn_form_sections(form_id);


ALTER TABLE IF EXISTS public.cmn_forms_0102a
    ADD CONSTRAINT fk_customer_0102a FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0102a_customer
    ON public.cmn_forms_0102a(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0102b
    ADD CONSTRAINT fk_customer_0102b FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0102b_customer
    ON public.cmn_forms_0102b(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0203a
    ADD CONSTRAINT fk_customer_0203a FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0203a_customer
    ON public.cmn_forms_0203a(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0203b
    ADD CONSTRAINT fk_customer_0203b FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0203b_customer
    ON public.cmn_forms_0203b(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0302
    ADD CONSTRAINT fk_customer_0302 FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0302_customer
    ON public.cmn_forms_0302(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0403b
    ADD CONSTRAINT fk_customer_0403b FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0403b_customer
    ON public.cmn_forms_0403b(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0403c
    ADD CONSTRAINT fk_customer_0403c FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0403c_customer
    ON public.cmn_forms_0403c(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0404c
    ADD CONSTRAINT fk_customer_0404c FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0404c_customer
    ON public.cmn_forms_0404c(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0602b
    ADD CONSTRAINT fk_customer_0602b FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0602b_customer
    ON public.cmn_forms_0602b(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0603b
    ADD CONSTRAINT fk_customer_0603b FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0603b_customer
    ON public.cmn_forms_0603b(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0702a
    ADD CONSTRAINT fk_customer_0702a FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0702a_customer
    ON public.cmn_forms_0702a(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0702b
    ADD CONSTRAINT fk_customer_0702b FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0702b_customer
    ON public.cmn_forms_0702b(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0703a
    ADD CONSTRAINT fk_customer_0703a FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0703a_customer
    ON public.cmn_forms_0703a(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0802
    ADD CONSTRAINT fk_customer_0802 FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0802_customer
    ON public.cmn_forms_0802(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0902
    ADD CONSTRAINT fk_customer_0902 FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0902_customer
    ON public.cmn_forms_0902(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_0903
    ADD CONSTRAINT fk_customer_0903 FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_0903_customer
    ON public.cmn_forms_0903(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_1003
    ADD CONSTRAINT fk_customer_1003 FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_1003_customer
    ON public.cmn_forms_1003(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_4842
    ADD CONSTRAINT fk_customer_4842 FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_4842_customer
    ON public.cmn_forms_4842(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_drorder
    ADD CONSTRAINT fk_customer_drorder FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_drorder_customer
    ON public.cmn_forms_drorder(customer_id);


ALTER TABLE IF EXISTS public.cmn_forms_uro
    ADD CONSTRAINT fk_customer_uro FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cmn_forms_uro_customer
    ON public.cmn_forms_uro(customer_id);


ALTER TABLE IF EXISTS public.cmnform_0404bs
    ADD CONSTRAINT fk_cmnform_0404b_cmnform FOREIGN KEY (cmnformid)
    REFERENCES public.cmnforms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS cmnform_0404b_pkey
    ON public.cmnform_0404bs(cmnformid);


ALTER TABLE IF EXISTS public.cmnform_0484s
    ADD CONSTRAINT fk_cmnform_0484_cmnform FOREIGN KEY (cmnformid)
    REFERENCES public.cmnforms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS cmnform_0484_pkey
    ON public.cmnform_0484s(cmnformid);


ALTER TABLE IF EXISTS public.communication_logs
    ADD CONSTRAINT fk_communication_log_notification FOREIGN KEY (notificationid)
    REFERENCES public.notifications (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.communication_templates
    ADD CONSTRAINT fk_communication_template_category FOREIGN KEY (category_id)
    REFERENCES public.template_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_communication_templates_category
    ON public.communication_templates(category_id);


ALTER TABLE IF EXISTS public.company_types
    ADD CONSTRAINT fk_company_type_parent FOREIGN KEY (parent_id)
    REFERENCES public.company_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_company_types_parent
    ON public.company_types(parent_id);


ALTER TABLE IF EXISTS public.compliance
    ADD CONSTRAINT fk_compliance_company FOREIGN KEY (company_id)
    REFERENCES public.companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_compliance_company
    ON public.compliance(company_id);


ALTER TABLE IF EXISTS public.compliance
    ADD CONSTRAINT fk_compliance_customer FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_compliance_customer
    ON public.compliance(customer_id);


ALTER TABLE IF EXISTS public.compliance_audit_items
    ADD CONSTRAINT fk_compliance_audit_item_audit FOREIGN KEY (auditid)
    REFERENCES public.compliance_audits (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.compliance_audit_items
    ADD CONSTRAINT fk_compliance_audit_item_checklist_item FOREIGN KEY (checklistitemid)
    REFERENCES public.compliance_checklist_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.compliance_audits
    ADD CONSTRAINT fk_compliance_audit_checklist FOREIGN KEY (checklistid)
    REFERENCES public.compliance_checklists (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.compliance_checklist_items
    ADD CONSTRAINT fk_compliance_checklist_item_checklist FOREIGN KEY (checklistid)
    REFERENCES public.compliance_checklists (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.compliance_notes
    ADD CONSTRAINT fk_compliance_note FOREIGN KEY (compliance_id)
    REFERENCES public.compliance (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_compliance_notes_compliance
    ON public.compliance_notes(compliance_id);


ALTER TABLE IF EXISTS public.configuration_audits
    ADD CONSTRAINT fk_configuration_audit_setting FOREIGN KEY (settingid)
    REFERENCES public.configuration_settings (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.configuration_history
    ADD CONSTRAINT configuration_history_value_id_fkey FOREIGN KEY (value_id)
    REFERENCES public.configuration_values (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cfg_hist_val
    ON public.configuration_history(value_id);


ALTER TABLE IF EXISTS public.configuration_settings
    ADD CONSTRAINT fk_configuration_setting_category FOREIGN KEY (categoryid)
    REFERENCES public.configuration_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.configuration_values
    ADD CONSTRAINT configuration_values_definition_id_fkey FOREIGN KEY (definition_id)
    REFERENCES public.configuration_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_cfg_val_def
    ON public.configuration_values(definition_id);


ALTER TABLE IF EXISTS public.customer_addresses
    ADD CONSTRAINT customer_addresses_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_doctors
    ADD CONSTRAINT customer_doctors_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_documents
    ADD CONSTRAINT fk_customer_document_type FOREIGN KEY (documenttypeid)
    REFERENCES public.document_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_facilities
    ADD CONSTRAINT customer_facilities_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_facilities
    ADD CONSTRAINT customer_facilities_facility_id_fkey FOREIGN KEY (facility_id)
    REFERENCES public.facilities (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_feedbacks
    ADD CONSTRAINT fk_customer_feedback_category FOREIGN KEY (categoryid)
    REFERENCES public.feedback_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_feedbacks
    ADD CONSTRAINT fk_customer_feedback_service_request FOREIGN KEY (servicerequestid)
    REFERENCES public.service_requests (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_insurances
    ADD CONSTRAINT customer_insurances_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_insurances
    ADD CONSTRAINT customer_insurances_insurance_company_id_fkey FOREIGN KEY (insurance_company_id)
    REFERENCES public.insurance_companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_orders
    ADD CONSTRAINT fk_customer_order_billing_address FOREIGN KEY (billingaddressid)
    REFERENCES public.customer_address (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_orders
    ADD CONSTRAINT fk_customer_order_shipping_address FOREIGN KEY (shippingaddressid)
    REFERENCES public.customer_address (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_orders
    ADD CONSTRAINT fk_customer_order_status FOREIGN KEY (statusid)
    REFERENCES public.order_status (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_types
    ADD CONSTRAINT fk_customer_type_class FOREIGN KEY (class_id)
    REFERENCES public.customer_classes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_customer_types_class
    ON public.customer_types(class_id);


ALTER TABLE IF EXISTS public.customers
    ADD CONSTRAINT customers_company_id_fkey FOREIGN KEY (company_id)
    REFERENCES public.companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.delivery_confirmations
    ADD CONSTRAINT fk_delivery_confirmation_stop FOREIGN KEY (stop_id)
    REFERENCES public.delivery_stops (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_delivery_confirmations_stop
    ON public.delivery_confirmations(stop_id);


ALTER TABLE IF EXISTS public.delivery_routes
    ADD CONSTRAINT fk_delivery_route_driver FOREIGN KEY (driver_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_delivery_routes_driver
    ON public.delivery_routes(driver_id);


ALTER TABLE IF EXISTS public.delivery_stops
    ADD CONSTRAINT fk_delivery_stop_package FOREIGN KEY (package_id)
    REFERENCES public.shipping_packages (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_delivery_stops_package
    ON public.delivery_stops(package_id);


ALTER TABLE IF EXISTS public.delivery_stops
    ADD CONSTRAINT fk_delivery_stop_route FOREIGN KEY (route_id)
    REFERENCES public.delivery_routes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_delivery_stops_route
    ON public.delivery_stops(route_id);


ALTER TABLE IF EXISTS public.denial_attachments
    ADD CONSTRAINT fk_denial_attachment_denial FOREIGN KEY (denial_id)
    REFERENCES public.denials (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_denial_attachments_denial
    ON public.denial_attachments(denial_id);


ALTER TABLE IF EXISTS public.denial_notes
    ADD CONSTRAINT fk_denial_note FOREIGN KEY (denial_id)
    REFERENCES public.denials (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_denial_notes_denial
    ON public.denial_notes(denial_id);


ALTER TABLE IF EXISTS public.denials
    ADD CONSTRAINT fk_denial_customer FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_denials_customer
    ON public.denials(customer_id);


ALTER TABLE IF EXISTS public.denials
    ADD CONSTRAINT fk_denial_insurance FOREIGN KEY (insurance_id)
    REFERENCES public.insurance_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_denials_insurance
    ON public.denials(insurance_id);


ALTER TABLE IF EXISTS public.deposit_details
    ADD CONSTRAINT fk_deposit_detail_deposit FOREIGN KEY (deposit_id)
    REFERENCES public.deposits (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_deposit_details_deposit
    ON public.deposit_details(deposit_id);


ALTER TABLE IF EXISTS public.doctor_orders
    ADD CONSTRAINT fk_doctor_order_doctor FOREIGN KEY (doctor_id)
    REFERENCES public.doctors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_doctor_orders_doctor
    ON public.doctor_orders(doctor_id);


ALTER TABLE IF EXISTS public.doctor_orders
    ADD CONSTRAINT fk_doctor_order_patient FOREIGN KEY (patient_id)
    REFERENCES public.patients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_doctor_orders_patient
    ON public.doctor_orders(patient_id);


ALTER TABLE IF EXISTS public.doctors
    ADD CONSTRAINT fk_doctor_address FOREIGN KEY (address_id)
    REFERENCES public.addresses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.document_categories
    ADD CONSTRAINT fk_document_category_parent FOREIGN KEY (parent_category_id)
    REFERENCES public.document_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_document_categories_parent
    ON public.document_categories(parent_category_id);


ALTER TABLE IF EXISTS public.document_shares
    ADD CONSTRAINT fk_document_share_document FOREIGN KEY (document_id)
    REFERENCES public.documents (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_document_shares_document
    ON public.document_shares(document_id);


ALTER TABLE IF EXISTS public.document_tags
    ADD CONSTRAINT fk_document_tag_document FOREIGN KEY (document_id)
    REFERENCES public.documents (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_document_tags_document
    ON public.document_tags(document_id);


ALTER TABLE IF EXISTS public.document_templates
    ADD CONSTRAINT fk_document_template_category FOREIGN KEY (category_id)
    REFERENCES public.document_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_document_templates_category
    ON public.document_templates(category_id);


ALTER TABLE IF EXISTS public.document_versions
    ADD CONSTRAINT fk_document_version_document FOREIGN KEY (document_id)
    REFERENCES public.documents (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_document_versions_document
    ON public.document_versions(document_id);


ALTER TABLE IF EXISTS public.documents
    ADD CONSTRAINT fk_document_category FOREIGN KEY (category_id)
    REFERENCES public.document_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_documents_category
    ON public.documents(category_id);


ALTER TABLE IF EXISTS public.documents
    ADD CONSTRAINT fk_document_locked_by FOREIGN KEY (locked_by)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.documents
    ADD CONSTRAINT fk_document_template FOREIGN KEY (template_id)
    REFERENCES public.document_templates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_documents_template
    ON public.documents(template_id);


ALTER TABLE IF EXISTS public.eligibility_requests
    ADD CONSTRAINT fk_eligibility_customer FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_eligibility_customer
    ON public.eligibility_requests(customer_id);


ALTER TABLE IF EXISTS public.eligibility_requests
    ADD CONSTRAINT fk_eligibility_insurance FOREIGN KEY (insurance_id)
    REFERENCES public.insurance_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_eligibility_insurance
    ON public.eligibility_requests(insurance_id);


ALTER TABLE IF EXISTS public.email_attachments
    ADD CONSTRAINT fk_email_attachment_file FOREIGN KEY (file_attachment_id)
    REFERENCES public.file_attachments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_email_attachments_file
    ON public.email_attachments(file_attachment_id);


ALTER TABLE IF EXISTS public.employee_role_assignments
    ADD CONSTRAINT fk_employee_role_assignment_role FOREIGN KEY (roleid)
    REFERENCES public.employee_roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employees
    ADD CONSTRAINT fk_employee_address FOREIGN KEY (address_id)
    REFERENCES public.addresses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.equipment_maintenances
    ADD CONSTRAINT fk_equipment_maintenance_equipment FOREIGN KEY (equipmentid)
    REFERENCES public.equipments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.equipments
    ADD CONSTRAINT fk_equipment_type FOREIGN KEY (equipmenttypeid)
    REFERENCES public.equipment_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.file_attachments
    ADD CONSTRAINT fk_file_category FOREIGN KEY (category_id)
    REFERENCES public.file_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_file_attachments_category
    ON public.file_attachments(category_id);


ALTER TABLE IF EXISTS public.file_categories
    ADD CONSTRAINT fk_file_category_parent FOREIGN KEY (parent_id)
    REFERENCES public.file_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_file_categories_parent
    ON public.file_categories(parent_id);


ALTER TABLE IF EXISTS public.general_ledger
    ADD CONSTRAINT fk_ledger_account FOREIGN KEY (account_id)
    REFERENCES public.chart_of_accounts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_general_ledger_account
    ON public.general_ledger(account_id);


ALTER TABLE IF EXISTS public.general_ledger
    ADD CONSTRAINT fk_ledger_period FOREIGN KEY (period_id)
    REFERENCES public.accounting_periods (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_general_ledger_period
    ON public.general_ledger(period_id);


ALTER TABLE IF EXISTS public.health_account_organizations
    ADD CONSTRAINT fk_hao_insurance_group FOREIGN KEY (insurance_group_id)
    REFERENCES public.insurance_company_groups (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_hao_insurance_group
    ON public.health_account_organizations(insurance_group_id);


ALTER TABLE IF EXISTS public.insurance_authorizations
    ADD CONSTRAINT fk_auth_policy FOREIGN KEY (policy_id)
    REFERENCES public.insurance_policies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_insurance_auth_policy
    ON public.insurance_authorizations(policy_id);


ALTER TABLE IF EXISTS public.insurance_claims
    ADD CONSTRAINT fk_claim_policy FOREIGN KEY (policy_id)
    REFERENCES public.insurance_policies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_insurance_claims_policy
    ON public.insurance_claims(policy_id);


ALTER TABLE IF EXISTS public.insurance_company_groups
    ADD CONSTRAINT fk_insurance_group_parent FOREIGN KEY (parent_group_id)
    REFERENCES public.insurance_company_groups (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_insurance_groups_parent
    ON public.insurance_company_groups(parent_group_id);


ALTER TABLE IF EXISTS public.insurance_coverage
    ADD CONSTRAINT fk_coverage_policy FOREIGN KEY (policy_id)
    REFERENCES public.insurance_policies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_insurance_coverage_policy
    ON public.insurance_coverage(policy_id);


ALTER TABLE IF EXISTS public.insurance_fee_schedules
    ADD CONSTRAINT insurance_fee_schedules_billing_code_id_fkey FOREIGN KEY (billing_code_id)
    REFERENCES public.billing_codes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.insurance_fee_schedules
    ADD CONSTRAINT insurance_fee_schedules_insurance_plan_id_fkey FOREIGN KEY (insurance_plan_id)
    REFERENCES public.insurance_plans (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.insurance_plans
    ADD CONSTRAINT insurance_plans_insurance_company_id_fkey FOREIGN KEY (insurance_company_id)
    REFERENCES public.insurance_companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.insurance_policies
    ADD CONSTRAINT fk_policy_patient FOREIGN KEY (patient_id)
    REFERENCES public.patients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_insurance_policies_patient
    ON public.insurance_policies(patient_id);


ALTER TABLE IF EXISTS public.insurance_policies
    ADD CONSTRAINT fk_policy_payer FOREIGN KEY (payer_id)
    REFERENCES public.insurance_payers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_insurance_policies_payer
    ON public.insurance_policies(payer_id);


ALTER TABLE IF EXISTS public.integration_endpoints
    ADD CONSTRAINT fk_integration_endpoint_connection FOREIGN KEY (connection_id)
    REFERENCES public.integration_connections (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_integration_endpoints_connection
    ON public.integration_endpoints(connection_id);


ALTER TABLE IF EXISTS public.integration_mappings
    ADD CONSTRAINT fk_integration_mapping_endpoint FOREIGN KEY (endpoint_id)
    REFERENCES public.integration_endpoints (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_integration_mappings_endpoint
    ON public.integration_mappings(endpoint_id);


ALTER TABLE IF EXISTS public.inventories
    ADD CONSTRAINT fk_inventory_equipment_type FOREIGN KEY (equipmenttypeid)
    REFERENCES public.equipment_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory_categories
    ADD CONSTRAINT inventory_categories_parent_id_fkey FOREIGN KEY (parent_id)
    REFERENCES public.inventory_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory_items
    ADD CONSTRAINT inventory_items_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES public.inventory_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory_items
    ADD CONSTRAINT inventory_items_manufacturer_id_fkey FOREIGN KEY (manufacturer_id)
    REFERENCES public.manufacturers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory_transactions
    ADD CONSTRAINT fk_inventory_transaction_inventory FOREIGN KEY (inventoryid)
    REFERENCES public.inventories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.invoice_details
    ADD CONSTRAINT fk_invoice_detail_invoice FOREIGN KEY (invoice_id)
    REFERENCES public.invoice_forms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_invoice_details_invoice
    ON public.invoice_details(invoice_id);


ALTER TABLE IF EXISTS public.invoice_forms
    ADD CONSTRAINT fk_invoice_company FOREIGN KEY (company_id)
    REFERENCES public.companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_invoice_forms_company
    ON public.invoice_forms(company_id);


ALTER TABLE IF EXISTS public.invoice_forms
    ADD CONSTRAINT fk_invoice_customer FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_invoice_forms_customer
    ON public.invoice_forms(customer_id);


ALTER TABLE IF EXISTS public.invoice_items
    ADD CONSTRAINT fk_invoice_item_invoice FOREIGN KEY (invoiceid)
    REFERENCES public.invoices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.journal_entries
    ADD CONSTRAINT fk_journal_period FOREIGN KEY (period_id)
    REFERENCES public.accounting_periods (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_journal_entries_period
    ON public.journal_entries(period_id);


ALTER TABLE IF EXISTS public.journal_entries
    ADD CONSTRAINT fk_journal_reversal FOREIGN KEY (reversed_entry_id)
    REFERENCES public.journal_entries (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.kb_article_feedbacks
    ADD CONSTRAINT fk_kb_article_feedback_article FOREIGN KEY (articleid)
    REFERENCES public.kb_articles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.kb_articles
    ADD CONSTRAINT fk_kb_article_category FOREIGN KEY (categoryid)
    REFERENCES public.kb_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.kb_categories
    ADD CONSTRAINT fk_kb_category_parent FOREIGN KEY (parentcategoryid)
    REFERENCES public.kb_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.kit_details
    ADD CONSTRAINT fk_kit_detail_kit FOREIGN KEY (kit_id)
    REFERENCES public.kits (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_kit_details_kit
    ON public.kit_details(kit_id);


ALTER TABLE IF EXISTS public.kit_items
    ADD CONSTRAINT fk_kit_item_kit FOREIGN KEY (kit_id)
    REFERENCES public.kit_templates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_kit_items_kit
    ON public.kit_items(kit_id);


ALTER TABLE IF EXISTS public.kit_items
    ADD CONSTRAINT fk_kit_item_product FOREIGN KEY (product_id)
    REFERENCES public.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_kit_items_product
    ON public.kit_items(product_id);


ALTER TABLE IF EXISTS public.kit_templates
    ADD CONSTRAINT fk_kit_template_type FOREIGN KEY (product_type_id)
    REFERENCES public.product_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_kit_templates_type
    ON public.kit_templates(product_type_id);


ALTER TABLE IF EXISTS public.legal_representatives
    ADD CONSTRAINT fk_legal_rep_address FOREIGN KEY (address_id)
    REFERENCES public.addresses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.locations
    ADD CONSTRAINT fk_location_address FOREIGN KEY (address_id)
    REFERENCES public.addresses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.locations
    ADD CONSTRAINT fk_location_manager FOREIGN KEY (manager_id)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_locations_manager
    ON public.locations(manager_id);


ALTER TABLE IF EXISTS public.locations
    ADD CONSTRAINT fk_location_parent FOREIGN KEY (parent_id)
    REFERENCES public.locations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_locations_parent
    ON public.locations(parent_id);


ALTER TABLE IF EXISTS public.maintenance_checklist_items
    ADD CONSTRAINT fk_maintenance_checklist_item_checklist FOREIGN KEY (checklistid)
    REFERENCES public.maintenance_checklists (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.maintenance_checklists
    ADD CONSTRAINT fk_maintenance_checklist_equipment_type FOREIGN KEY (equipmenttypeid)
    REFERENCES public.equipment_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.maintenance_log_items
    ADD CONSTRAINT fk_maintenance_log_item_checklist_item FOREIGN KEY (checklistitemid)
    REFERENCES public.maintenance_checklist_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.maintenance_logs
    ADD CONSTRAINT maintenance_logs_maintenance_schedule_id_fkey FOREIGN KEY (maintenance_schedule_id)
    REFERENCES public.maintenance_schedules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.maintenance_logs
    ADD CONSTRAINT maintenance_logs_stock_item_id_fkey FOREIGN KEY (stock_item_id)
    REFERENCES public.stock_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.maintenance_schedules
    ADD CONSTRAINT maintenance_schedules_inventory_item_id_fkey FOREIGN KEY (inventory_item_id)
    REFERENCES public.inventory_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.message_attachments
    ADD CONSTRAINT fk_message_attachment_message FOREIGN KEY (message_id)
    REFERENCES public.message_queue (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_message_attachments_message
    ON public.message_attachments(message_id);


ALTER TABLE IF EXISTS public.message_queue
    ADD CONSTRAINT fk_message_template FOREIGN KEY (template_id)
    REFERENCES public.communication_templates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_message_queue_template
    ON public.message_queue(template_id);


ALTER TABLE IF EXISTS public.message_queue
    ADD CONSTRAINT fk_message_template_version FOREIGN KEY (template_version_id)
    REFERENCES public.template_versions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_message_queue_version
    ON public.message_queue(template_version_id);


ALTER TABLE IF EXISTS public.message_recipients
    ADD CONSTRAINT fk_message_recipient_message FOREIGN KEY (message_id)
    REFERENCES public.message_queue (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_message_recipients_message
    ON public.message_recipients(message_id);


ALTER TABLE IF EXISTS public.notification_queue
    ADD CONSTRAINT fk_notification_template FOREIGN KEY (template_id)
    REFERENCES public.email_templates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notification_recipients
    ADD CONSTRAINT fk_notification_queue FOREIGN KEY (notification_id)
    REFERENCES public.notification_queue (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_notification_recipients_notification
    ON public.notification_recipients(notification_id);


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT fk_notification_template FOREIGN KEY (templateid)
    REFERENCES public.notification_templates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_details
    ADD CONSTRAINT order_details_authorization_type_id_fkey FOREIGN KEY (authorization_type_id)
    REFERENCES public.authorization_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_details
    ADD CONSTRAINT order_details_inventory_item_id_fkey FOREIGN KEY (inventory_item_id)
    REFERENCES public.inventory_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_fulfillment
    ADD CONSTRAINT fk_fulfillment_employee FOREIGN KEY (fulfilled_by)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_order_fulfillment_employee
    ON public.order_fulfillment(fulfilled_by);


ALTER TABLE IF EXISTS public.order_fulfillment
    ADD CONSTRAINT fk_fulfillment_order FOREIGN KEY (order_id)
    REFERENCES public.doctor_orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_order_fulfillment_order
    ON public.order_fulfillment(order_id);


ALTER TABLE IF EXISTS public.order_fulfillments
    ADD CONSTRAINT fk_order_fulfillment_order FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_order_fulfillments_order
    ON public.order_fulfillments(order_id);


ALTER TABLE IF EXISTS public.order_fulfillments
    ADD CONSTRAINT fk_order_fulfillment_package FOREIGN KEY (shipping_package_id)
    REFERENCES public.shipping_packages (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_order_fulfillments_package
    ON public.order_fulfillments(shipping_package_id);


ALTER TABLE IF EXISTS public.order_history
    ADD CONSTRAINT fk_history_order FOREIGN KEY (order_id)
    REFERENCES public.doctor_orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_order_history_order
    ON public.order_history(order_id);


ALTER TABLE IF EXISTS public.order_items
    ADD CONSTRAINT fk_order_item_order FOREIGN KEY (order_id)
    REFERENCES public.doctor_orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_order_items_order
    ON public.order_items(order_id);


ALTER TABLE IF EXISTS public.order_items
    ADD CONSTRAINT fk_order_item_product FOREIGN KEY (product_id)
    REFERENCES public.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_order_items_product
    ON public.order_items(product_id);


ALTER TABLE IF EXISTS public.order_status_history
    ADD CONSTRAINT fk_order_status_order FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_order_status_history_order
    ON public.order_status_history(order_id);


ALTER TABLE IF EXISTS public.order_trackings
    ADD CONSTRAINT fk_order_tracking_order FOREIGN KEY (orderid)
    REFERENCES public.customer_orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_trackings
    ADD CONSTRAINT fk_order_tracking_status FOREIGN KEY (statusid)
    REFERENCES public.order_status (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT fk_order_company FOREIGN KEY (company_id)
    REFERENCES public.companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_orders_company
    ON public.orders(company_id);


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT fk_order_customer FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_orders_customer
    ON public.orders(customer_id);


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT fk_order_shipping_method FOREIGN KEY (shipping_method_id)
    REFERENCES public.shipping_methods (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT fk_order_type FOREIGN KEY (order_type_id)
    REFERENCES public.order_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_orders_type
    ON public.orders(order_type_id);


ALTER TABLE IF EXISTS public.patients
    ADD CONSTRAINT fk_patient_address FOREIGN KEY (address_id)
    REFERENCES public.addresses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.payers
    ADD CONSTRAINT fk_payer_insurance_group FOREIGN KEY (insurance_group_id)
    REFERENCES public.insurance_company_groups (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_payers_insurance_group
    ON public.payers(insurance_group_id);


ALTER TABLE IF EXISTS public.payment_adjustments
    ADD CONSTRAINT payment_adjustments_payment_id_fkey FOREIGN KEY (payment_id)
    REFERENCES public.payments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.payment_allocations
    ADD CONSTRAINT fk_payment_allocation_invoice FOREIGN KEY (invoice_id)
    REFERENCES public.invoice_forms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_payment_allocations_invoice
    ON public.payment_allocations(invoice_id);


ALTER TABLE IF EXISTS public.payment_allocations
    ADD CONSTRAINT fk_payment_allocation_transaction FOREIGN KEY (payment_transaction_id)
    REFERENCES public.payment_transactions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_payment_allocations_transaction
    ON public.payment_allocations(payment_transaction_id);


ALTER TABLE IF EXISTS public.payment_methods
    ADD CONSTRAINT fk_payment_method_customer FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_payment_methods_customer
    ON public.payment_methods(customer_id);


ALTER TABLE IF EXISTS public.payment_plan_items
    ADD CONSTRAINT fk_plan_item_plan FOREIGN KEY (plan_id)
    REFERENCES public.payment_plans (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_payment_plan_items_plan
    ON public.payment_plan_items(plan_id);


ALTER TABLE IF EXISTS public.payment_plans
    ADD CONSTRAINT fk_plan_patient FOREIGN KEY (patient_id)
    REFERENCES public.patients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_payment_plans_patient
    ON public.payment_plans(patient_id);


ALTER TABLE IF EXISTS public.payment_transactions
    ADD CONSTRAINT fk_payment_transaction_account FOREIGN KEY (billing_account_id)
    REFERENCES public.billing_accounts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_payment_transactions_account
    ON public.payment_transactions(billing_account_id);


ALTER TABLE IF EXISTS public.payment_transactions
    ADD CONSTRAINT fk_payment_transaction_method FOREIGN KEY (payment_method_id)
    REFERENCES public.payment_methods (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_payment_transactions_method
    ON public.payment_transactions(payment_method_id);


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_claim_id_fkey FOREIGN KEY (claim_id)
    REFERENCES public.claims (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.prescription_refills
    ADD CONSTRAINT fk_refill_prescription FOREIGN KEY (prescription_id)
    REFERENCES public.prescriptions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_prescription_refills_prescription
    ON public.prescription_refills(prescription_id);


ALTER TABLE IF EXISTS public.prescriptions
    ADD CONSTRAINT fk_prescription_doctor FOREIGN KEY (doctor_id)
    REFERENCES public.doctors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_prescriptions_doctor
    ON public.prescriptions(doctor_id);


ALTER TABLE IF EXISTS public.prescriptions
    ADD CONSTRAINT fk_prescription_patient FOREIGN KEY (patient_id)
    REFERENCES public.patients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_prescriptions_patient
    ON public.prescriptions(patient_id);


ALTER TABLE IF EXISTS public.price_history
    ADD CONSTRAINT fk_price_history_code FOREIGN KEY (price_code_id)
    REFERENCES public.price_codes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.product_categories
    ADD CONSTRAINT fk_product_category_parent FOREIGN KEY (parent_id)
    REFERENCES public.product_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_product_categories_parent
    ON public.product_categories(parent_id);


ALTER TABLE IF EXISTS public.product_groups
    ADD CONSTRAINT fk_product_group_category FOREIGN KEY (category_id)
    REFERENCES public.product_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_product_groups_category
    ON public.product_groups(category_id);


ALTER TABLE IF EXISTS public.product_history
    ADD CONSTRAINT fk_product_history_product FOREIGN KEY (product_id)
    REFERENCES public.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_product_history_product
    ON public.product_history(product_id);


ALTER TABLE IF EXISTS public.product_prices
    ADD CONSTRAINT fk_product_price_code FOREIGN KEY (price_code_id)
    REFERENCES public.price_codes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_product_prices_code
    ON public.product_prices(price_code_id);


ALTER TABLE IF EXISTS public.product_prices
    ADD CONSTRAINT fk_product_price_product FOREIGN KEY (product_id)
    REFERENCES public.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_product_prices_product
    ON public.product_prices(product_id);


ALTER TABLE IF EXISTS public.product_types
    ADD CONSTRAINT fk_product_type_group FOREIGN KEY (group_id)
    REFERENCES public.product_groups (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_product_types_group
    ON public.product_types(group_id);


ALTER TABLE IF EXISTS public.quality_checklist_items
    ADD CONSTRAINT fk_quality_checklist_item_checklist FOREIGN KEY (checklistid)
    REFERENCES public.quality_checklists (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.quality_checklists
    ADD CONSTRAINT fk_quality_checklist_equipment_type FOREIGN KEY (equipmenttypeid)
    REFERENCES public.equipment_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.quality_inspections
    ADD CONSTRAINT fk_quality_inspection_checklist FOREIGN KEY (checklistid)
    REFERENCES public.quality_checklists (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.quality_inspections
    ADD CONSTRAINT fk_quality_inspection_equipment FOREIGN KEY (equipmentid)
    REFERENCES public.equipments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.report_categories
    ADD CONSTRAINT fk_report_category_parent FOREIGN KEY (parent_category_id)
    REFERENCES public.report_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_report_categories_parent
    ON public.report_categories(parent_category_id);


ALTER TABLE IF EXISTS public.report_definitions
    ADD CONSTRAINT fk_report_definition_category FOREIGN KEY (category_id)
    REFERENCES public.report_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_report_definitions_category
    ON public.report_definitions(category_id);


ALTER TABLE IF EXISTS public.report_executions
    ADD CONSTRAINT fk_report_execution_report FOREIGN KEY (report_id)
    REFERENCES public.report_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_report_executions_report
    ON public.report_executions(report_id);


ALTER TABLE IF EXISTS public.report_executions
    ADD CONSTRAINT fk_report_execution_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_report_executions_user
    ON public.report_executions(user_id);


ALTER TABLE IF EXISTS public.report_parameters
    ADD CONSTRAINT fk_report_parameter_report FOREIGN KEY (report_id)
    REFERENCES public.report_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_report_parameters_report
    ON public.report_parameters(report_id);


ALTER TABLE IF EXISTS public.report_schedules
    ADD CONSTRAINT fk_report_schedule_report FOREIGN KEY (report_id)
    REFERENCES public.report_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_report_schedules_report
    ON public.report_schedules(report_id);


ALTER TABLE IF EXISTS public.report_subscriptions
    ADD CONSTRAINT fk_report_subscription_report FOREIGN KEY (report_id)
    REFERENCES public.report_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_report_subscriptions_report
    ON public.report_subscriptions(report_id);


ALTER TABLE IF EXISTS public.report_subscriptions
    ADD CONSTRAINT fk_report_subscription_schedule FOREIGN KEY (schedule_id)
    REFERENCES public.report_schedules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_report_subscriptions_schedule
    ON public.report_subscriptions(schedule_id);


ALTER TABLE IF EXISTS public.report_subscriptions
    ADD CONSTRAINT fk_report_subscription_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_report_subscriptions_user
    ON public.report_subscriptions(user_id);


ALTER TABLE IF EXISTS public.role_permissions
    ADD CONSTRAINT role_permissions_permission_id_fkey FOREIGN KEY (permission_id)
    REFERENCES public.permissions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.role_permissions
    ADD CONSTRAINT role_permissions_role_id_fkey FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.service_histories
    ADD CONSTRAINT fk_service_history_service_request FOREIGN KEY (servicerequestid)
    REFERENCES public.service_requests (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.service_requests
    ADD CONSTRAINT fk_service_request_equipment FOREIGN KEY (equipmentid)
    REFERENCES public.equipments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.setting_history
    ADD CONSTRAINT setting_history_value_id_fkey FOREIGN KEY (value_id)
    REFERENCES public.setting_values (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_set_hist_val
    ON public.setting_history(value_id);


ALTER TABLE IF EXISTS public.setting_values
    ADD CONSTRAINT setting_values_definition_id_fkey FOREIGN KEY (definition_id)
    REFERENCES public.setting_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_set_val_def
    ON public.setting_values(definition_id);


ALTER TABLE IF EXISTS public.shipping_methods
    ADD CONSTRAINT fk_shipping_method_carrier FOREIGN KEY (carrier_id)
    REFERENCES public.shipping_carriers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_shipping_methods_carrier
    ON public.shipping_methods(carrier_id);


ALTER TABLE IF EXISTS public.shipping_packages
    ADD CONSTRAINT fk_shipping_package_method FOREIGN KEY (shipping_method_id)
    REFERENCES public.shipping_methods (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_shipping_packages_method
    ON public.shipping_packages(shipping_method_id);


ALTER TABLE IF EXISTS public.stock_items
    ADD CONSTRAINT stock_items_inventory_item_id_fkey FOREIGN KEY (inventory_item_id)
    REFERENCES public.inventory_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.stock_items
    ADD CONSTRAINT stock_items_warehouse_id_fkey FOREIGN KEY (warehouse_id)
    REFERENCES public.warehouses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.system_configs
    ADD CONSTRAINT system_configs_company_id_fkey FOREIGN KEY (company_id)
    REFERENCES public.companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.system_metrics
    ADD CONSTRAINT fk_system_metric_type FOREIGN KEY (metrictypeid)
    REFERENCES public.metric_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.system_variables
    ADD CONSTRAINT fk_system_variable_module FOREIGN KEY (module_id)
    REFERENCES public.system_modules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_system_variables_module
    ON public.system_variables(module_id);


ALTER TABLE IF EXISTS public.task_comments
    ADD CONSTRAINT fk_task_comment_parent FOREIGN KEY (parent_comment_id)
    REFERENCES public.task_comments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_task_comments_parent
    ON public.task_comments(parent_comment_id);


ALTER TABLE IF EXISTS public.task_comments
    ADD CONSTRAINT fk_task_comment_task FOREIGN KEY (task_id)
    REFERENCES public.tasks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_task_comments_task
    ON public.task_comments(task_id);


ALTER TABLE IF EXISTS public.task_dependencies
    ADD CONSTRAINT fk_task_dependency_dependent FOREIGN KEY (dependent_task_id)
    REFERENCES public.tasks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_task_dependencies_dependent
    ON public.task_dependencies(dependent_task_id);


ALTER TABLE IF EXISTS public.task_dependencies
    ADD CONSTRAINT fk_task_dependency_task FOREIGN KEY (task_id)
    REFERENCES public.tasks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_task_dependencies_task
    ON public.task_dependencies(task_id);


ALTER TABLE IF EXISTS public.task_time_entries
    ADD CONSTRAINT fk_task_time_task FOREIGN KEY (task_id)
    REFERENCES public.tasks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_task_time_entries_task
    ON public.task_time_entries(task_id);


ALTER TABLE IF EXISTS public.task_time_entries
    ADD CONSTRAINT fk_task_time_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_task_time_entries_user
    ON public.task_time_entries(user_id);


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT fk_task_assigned_by FOREIGN KEY (assigned_by)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT fk_task_assigned_to FOREIGN KEY (assigned_to)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_tasks_assigned
    ON public.tasks(assigned_to);


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT fk_task_parent FOREIGN KEY (parent_task_id)
    REFERENCES public.tasks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_tasks_parent
    ON public.tasks(parent_task_id);


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT fk_task_type FOREIGN KEY (task_type_id)
    REFERENCES public.task_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_tasks_type
    ON public.tasks(task_type_id);


ALTER TABLE IF EXISTS public.template_categories
    ADD CONSTRAINT fk_template_category_parent FOREIGN KEY (parent_id)
    REFERENCES public.template_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_template_categories_parent
    ON public.template_categories(parent_id);


ALTER TABLE IF EXISTS public.template_versions
    ADD CONSTRAINT fk_template_version_template FOREIGN KEY (template_id)
    REFERENCES public.communication_templates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_template_versions_template
    ON public.template_versions(template_id);


ALTER TABLE IF EXISTS public.user_dashboards
    ADD CONSTRAINT fk_user_dashboard_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_user_dashboards_user
    ON public.user_dashboards(user_id);


ALTER TABLE IF EXISTS public.user_notifications
    ADD CONSTRAINT fk_user_notification_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_user_notifications_user
    ON public.user_notifications(user_id);


ALTER TABLE IF EXISTS public.user_preferences
    ADD CONSTRAINT fk_user_preference_definition FOREIGN KEY (preference_id)
    REFERENCES public.preference_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_user_preferences_definition
    ON public.user_preferences(preference_id);


ALTER TABLE IF EXISTS public.user_preferences
    ADD CONSTRAINT fk_user_preference_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_user_preferences_user
    ON public.user_preferences(user_id);


ALTER TABLE IF EXISTS public.user_roles
    ADD CONSTRAINT user_roles_role_id_fkey FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_roles
    ADD CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT users_company_id_fkey FOREIGN KEY (company_id)
    REFERENCES public.companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.variable_history
    ADD CONSTRAINT variable_history_value_id_fkey FOREIGN KEY (value_id)
    REFERENCES public.variable_values (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_var_hist_val
    ON public.variable_history(value_id);


ALTER TABLE IF EXISTS public.variable_values
    ADD CONSTRAINT variable_values_definition_id_fkey FOREIGN KEY (definition_id)
    REFERENCES public.variable_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_var_val_def
    ON public.variable_values(definition_id);


ALTER TABLE IF EXISTS public.vendors
    ADD CONSTRAINT fk_vendor_address FOREIGN KEY (address_id)
    REFERENCES public.addresses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.vendors
    ADD CONSTRAINT fk_vendor_company_type FOREIGN KEY (company_type_id)
    REFERENCES public.company_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_vendors_type
    ON public.vendors(company_type_id);


ALTER TABLE IF EXISTS public.widget_instances
    ADD CONSTRAINT fk_widget_instance_dashboard FOREIGN KEY (dashboard_id)
    REFERENCES public.user_dashboards (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_widget_instances_dashboard
    ON public.widget_instances(dashboard_id);


ALTER TABLE IF EXISTS public.widget_instances
    ADD CONSTRAINT fk_widget_instance_widget FOREIGN KEY (widget_id)
    REFERENCES public.dashboard_widgets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_widget_instances_widget
    ON public.widget_instances(widget_id);


ALTER TABLE IF EXISTS public.workflow_actions
    ADD CONSTRAINT fk_workflow_action_workflow FOREIGN KEY (workflow_id)
    REFERENCES public.workflow_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_workflow_actions_workflow
    ON public.workflow_actions(workflow_id);


ALTER TABLE IF EXISTS public.workflow_conditions
    ADD CONSTRAINT fk_workflow_condition_workflow FOREIGN KEY (workflow_id)
    REFERENCES public.workflow_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_workflow_conditions_workflow
    ON public.workflow_conditions(workflow_id);


ALTER TABLE IF EXISTS public.workflow_executions
    ADD CONSTRAINT fk_workflow_execution_action FOREIGN KEY (current_action_id)
    REFERENCES public.workflow_actions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.workflow_executions
    ADD CONSTRAINT fk_workflow_execution_schedule FOREIGN KEY (schedule_id)
    REFERENCES public.workflow_schedules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_workflow_executions_schedule
    ON public.workflow_executions(schedule_id);


ALTER TABLE IF EXISTS public.workflow_executions
    ADD CONSTRAINT fk_workflow_execution_trigger FOREIGN KEY (trigger_id)
    REFERENCES public.workflow_triggers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_workflow_executions_trigger
    ON public.workflow_executions(trigger_id);


ALTER TABLE IF EXISTS public.workflow_executions
    ADD CONSTRAINT fk_workflow_execution_workflow FOREIGN KEY (workflow_id)
    REFERENCES public.workflow_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_workflow_executions_workflow
    ON public.workflow_executions(workflow_id);


ALTER TABLE IF EXISTS public.workflow_schedules
    ADD CONSTRAINT fk_workflow_schedule_workflow FOREIGN KEY (workflow_id)
    REFERENCES public.workflow_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_workflow_schedules_workflow
    ON public.workflow_schedules(workflow_id);


ALTER TABLE IF EXISTS public.workflow_triggers
    ADD CONSTRAINT fk_workflow_trigger_workflow FOREIGN KEY (workflow_id)
    REFERENCES public.workflow_definitions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_workflow_triggers_workflow
    ON public.workflow_triggers(workflow_id);

END;