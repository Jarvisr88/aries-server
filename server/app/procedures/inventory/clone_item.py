"""
Procedure to clone an inventory item with all its associated data.

This procedure creates a copy of an inventory item, including its
pricing, categories, and other related configurations while maintaining
proper relationships and avoiding duplicate unique fields.
"""
from datetime import datetime
from typing import Optional, Dict, Any
from sqlalchemy import select
from sqlalchemy.orm import Session

from app.models.inventory import (
    InventoryItem,
    InventoryCategory,
    InventoryItemCategory,
    PriceCode,
    ItemPricing
)
from app.core.exceptions import ProcedureError

class InventoryItemCloner:
    """Handles cloning of inventory items"""
    
    def __init__(self, db: Session):
        self.db = db
        
    def _clone_base_item(
        self,
        source: InventoryItem,
        override_fields: Optional[Dict[str, Any]] = None
    ) -> InventoryItem:
        """Clone base inventory item"""
        # Fields to exclude from direct copying
        exclude_fields = {
            'id',
            'created_at',
            'updated_at',
            'quantity',
            'last_physical_count',
            'serial_number',
            'barcode'
        }
        
        # Create new item
        new_item = InventoryItem()
        
        # Copy fields
        for column in InventoryItem.__table__.columns:
            if column.key not in exclude_fields:
                value = getattr(source, column.key)
                setattr(new_item, column.key, value)
                
        # Apply any overrides
        if override_fields:
            for key, value in override_fields.items():
                if hasattr(new_item, key):
                    setattr(new_item, key, value)
                    
        # Set creation timestamp
        new_item.created_at = datetime.utcnow()
        new_item.updated_at = datetime.utcnow()
        
        # Initialize quantities
        new_item.quantity = 0
        new_item.last_physical_count = None
        
        # Generate new unique fields
        new_item.serial_number = None  # Will be assigned when needed
        new_item.barcode = None  # Will be generated by separate procedure
        
        self.db.add(new_item)
        self.db.flush()  # Get new ID
        
        return new_item
        
    def _clone_categories(
        self,
        source_id: int,
        target_id: int
    ) -> None:
        """Clone category assignments"""
        existing_categories = (
            self.db.query(InventoryItemCategory)
            .filter(InventoryItemCategory.inventory_item_id == source_id)
            .all()
        )
        
        for category in existing_categories:
            new_category = InventoryItemCategory(
                inventory_item_id=target_id,
                category_id=category.category_id,
                is_primary=category.is_primary
            )
            self.db.add(new_category)
            
    def _clone_pricing(
        self,
        source_id: int,
        target_id: int
    ) -> None:
        """Clone price codes and pricing"""
        # Clone price codes
        existing_codes = (
            self.db.query(PriceCode)
            .filter(PriceCode.inventory_item_id == source_id)
            .all()
        )
        
        for code in existing_codes:
            new_code = PriceCode(
                inventory_item_id=target_id,
                code=code.code,
                description=code.description,
                is_active=code.is_active
            )
            self.db.add(new_code)
            
        # Clone pricing
        existing_pricing = (
            self.db.query(ItemPricing)
            .filter(ItemPricing.inventory_item_id == source_id)
            .all()
        )
        
        for price in existing_pricing:
            new_price = ItemPricing(
                inventory_item_id=target_id,
                price_type=price.price_type,
                price_level=price.price_level,
                amount=price.amount,
                is_active=price.is_active
            )
            self.db.add(new_price)
            
    def _execute(
        self,
        inventory_item_id: int,
        override_fields: Optional[Dict[str, Any]] = None
    ) -> int:
        """
        Clone inventory item
        
        Args:
            inventory_item_id: ID of item to clone
            override_fields: Optional dict of fields to override in clone
            
        Returns:
            ID of cloned item
            
        Raises:
            ProcedureError: If source item not found
        """
        # Get source item
        source = self.db.query(InventoryItem).get(inventory_item_id)
        if not source:
            raise ProcedureError(f"Inventory item {inventory_item_id} not found")
            
        # Clone base item
        new_item = self._clone_base_item(source, override_fields)
        
        # Clone related data
        self._clone_categories(inventory_item_id, new_item.id)
        self._clone_pricing(inventory_item_id, new_item.id)
        
        self.db.commit()
        return new_item.id
        
    @classmethod
    def execute(
        cls,
        db: Session,
        inventory_item_id: int,
        override_fields: Optional[Dict[str, Any]] = None
    ) -> int:
        """
        Clone inventory item
        
        Args:
            db: Database session
            inventory_item_id: ID of item to clone
            override_fields: Optional dict of fields to override in clone
            
        Returns:
            ID of cloned item
        """
        procedure = cls(db)
        return procedure._execute(inventory_item_id, override_fields)
