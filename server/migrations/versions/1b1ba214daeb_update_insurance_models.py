"""Update insurance models

Revision ID: 1b1ba214daeb
Revises: 411900182b81
Create Date: 2024-12-19 16:14:51.963535

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1b1ba214daeb'
down_revision: Union[str, None] = '411900182b81'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('claim_status_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('claim_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'READY', 'SUBMITTED', 'ACCEPTED', 'REJECTED', 'PAID', 'DENIED', 'APPEALED', name='claimstatus'), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['claim_id'], ['claims.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('cmnform_0404bs')
    op.drop_table('invoices')
    op.drop_index('idx_addresses_city_state', table_name='addresses')
    op.drop_index('idx_addresses_postal', table_name='addresses')
    op.drop_table('addresses')
    op.drop_index('idx_order_items_order', table_name='order_items')
    op.drop_index('idx_order_items_product', table_name='order_items')
    op.drop_index('idx_order_items_status', table_name='order_items')
    op.drop_table('order_items')
    op.drop_index('idx_prescription_refills_date', table_name='prescription_refills')
    op.drop_index('idx_prescription_refills_prescription', table_name='prescription_refills')
    op.drop_index('idx_prescription_refills_status', table_name='prescription_refills')
    op.drop_table('prescription_refills')
    op.drop_index('idx_cmn_forms_active', table_name='cmn_forms')
    op.drop_index('idx_cmn_forms_type', table_name='cmn_forms')
    op.drop_table('cmn_forms')
    op.drop_index('idx_integration_connections_active', table_name='integration_connections')
    op.drop_index('idx_integration_connections_provider', table_name='integration_connections')
    op.drop_index('idx_integration_connections_status', table_name='integration_connections')
    op.drop_index('idx_integration_connections_type', table_name='integration_connections')
    op.drop_table('integration_connections')
    op.drop_index('idx_document_shares_document', table_name='document_shares')
    op.drop_index('idx_document_shares_expiry', table_name='document_shares')
    op.drop_index('idx_document_shares_shared', table_name='document_shares')
    op.drop_table('document_shares')
    op.drop_index('idx_workflow_schedules_active', table_name='workflow_schedules')
    op.drop_index('idx_workflow_schedules_dates', table_name='workflow_schedules')
    op.drop_index('idx_workflow_schedules_next_run', table_name='workflow_schedules')
    op.drop_index('idx_workflow_schedules_workflow', table_name='workflow_schedules')
    op.drop_table('workflow_schedules')
    op.drop_index('idx_cmn_forms_0302_customer', table_name='cmn_forms_0302')
    op.drop_index('idx_cmn_forms_0302_medical', table_name='cmn_forms_0302')
    op.drop_table('cmn_forms_0302')
    op.drop_table('service_requests')
    op.drop_table('maintenance_log_items')
    op.drop_index('idx_kit_items_kit', table_name='kit_items')
    op.drop_index('idx_kit_items_order', table_name='kit_items')
    op.drop_index('idx_kit_items_product', table_name='kit_items')
    op.drop_table('kit_items')
    op.drop_table('performance_logs')
    op.drop_index('idx_doctor_types_name', table_name='doctor_types')
    op.drop_table('doctor_types')
    op.drop_index('idx_cfg_hist_val', table_name='configuration_history')
    op.drop_table('configuration_history')
    op.drop_index('idx_invoice_transaction_types_name', table_name='invoice_transaction_types')
    op.drop_table('invoice_transaction_types')
    op.drop_index('idx_denial_notes_denial', table_name='denial_notes')
    op.drop_index('idx_denial_notes_type', table_name='denial_notes')
    op.drop_table('denial_notes')
    op.drop_index('idx_payment_methods_customer', table_name='payment_methods')
    op.drop_index('idx_payment_methods_default', table_name='payment_methods')
    op.drop_index('idx_payment_methods_status', table_name='payment_methods')
    op.drop_index('idx_payment_methods_type', table_name='payment_methods')
    op.drop_table('payment_methods')
    op.drop_index('idx_calendars_owner', table_name='calendars')
    op.drop_index('idx_calendars_type', table_name='calendars')
    op.drop_table('calendars')
    op.drop_index('idx_documents_category', table_name='documents')
    op.drop_index('idx_documents_entity', table_name='documents')
    op.drop_index('idx_documents_locked', table_name='documents')
    op.drop_index('idx_documents_status', table_name='documents')
    op.drop_index('idx_documents_template', table_name='documents')
    op.drop_table('documents')
    op.drop_index('idx_plan_payments_dates', table_name='payment_plan_payments')
    op.drop_index('idx_plan_payments_plan', table_name='payment_plan_payments')
    op.drop_index('idx_plan_payments_status', table_name='payment_plan_payments')
    op.drop_table('payment_plan_payments')
    op.drop_table('task_categories')
    op.drop_table('equipment_maintenances')
    op.drop_index('idx_cmn_forms_4842_customer', table_name='cmn_forms_4842')
    op.drop_index('idx_cmn_forms_4842_medical', table_name='cmn_forms_4842')
    op.drop_table('cmn_forms_4842')
    op.drop_index('idx_cmn_forms_0802_customer', table_name='cmn_forms_0802')
    op.drop_index('idx_cmn_forms_0802_medical', table_name='cmn_forms_0802')
    op.drop_table('cmn_forms_0802')
    op.drop_table('certificates')
    op.drop_index('idx_customer_types_active', table_name='customer_types')
    op.drop_index('idx_customer_types_class', table_name='customer_types')
    op.drop_table('customer_types')
    op.drop_index('idx_notification_queue_priority', table_name='notification_queue')
    op.drop_index('idx_notification_queue_schedule', table_name='notification_queue')
    op.drop_index('idx_notification_queue_status', table_name='notification_queue')
    op.drop_index('idx_notification_queue_type', table_name='notification_queue')
    op.drop_table('notification_queue')
    op.drop_table('compliance_audit_items')
    op.drop_index('idx_dashboard_widgets_active', table_name='dashboard_widgets')
    op.drop_index('idx_dashboard_widgets_category', table_name='dashboard_widgets')
    op.drop_index('idx_dashboard_widgets_system', table_name='dashboard_widgets')
    op.drop_index('idx_dashboard_widgets_type', table_name='dashboard_widgets')
    op.drop_table('dashboard_widgets')
    op.drop_index('idx_kit_details_kit', table_name='kit_details')
    op.drop_index('idx_kit_details_product', table_name='kit_details')
    op.drop_table('kit_details')
    op.drop_table('departments')
    op.drop_index('idx_patients_dob', table_name='patients')
    op.drop_index('idx_patients_name', table_name='patients')
    op.drop_index('idx_patients_status', table_name='patients')
    op.drop_table('patients')
    op.drop_table('provider_types')
    op.drop_index('idx_cmn_forms_0203a_customer', table_name='cmn_forms_0203a')
    op.drop_index('idx_cmn_forms_0203a_medical', table_name='cmn_forms_0203a')
    op.drop_table('cmn_forms_0203a')
    op.drop_index('idx_cmn_forms_0102b_customer', table_name='cmn_forms_0102b')
    op.drop_index('idx_cmn_forms_0102b_medical', table_name='cmn_forms_0102b')
    op.drop_table('cmn_forms_0102b')
    op.drop_index('idx_kit_templates_active', table_name='kit_templates')
    op.drop_index('idx_kit_templates_type', table_name='kit_templates')
    op.drop_table('kit_templates')
    op.drop_index('idx_inventory_transaction_types_name', table_name='inventory_transaction_types')
    op.drop_table('inventory_transaction_types')
    op.drop_index('idx_deposits_date', table_name='deposits')
    op.drop_index('idx_deposits_number', table_name='deposits')
    op.drop_index('idx_deposits_status', table_name='deposits')
    op.drop_table('deposits')
    op.drop_index('idx_report_categories_active', table_name='report_categories')
    op.drop_index('idx_report_categories_parent', table_name='report_categories')
    op.drop_table('report_categories')
    op.drop_index('idx_appointment_attendees_appointment', table_name='appointment_attendees')
    op.drop_index('idx_appointment_attendees_attendee', table_name='appointment_attendees')
    op.drop_index('idx_appointment_attendees_status', table_name='appointment_attendees')
    op.drop_table('appointment_attendees')
    op.drop_index('idx_email_attachments_email', table_name='email_attachments')
    op.drop_index('idx_email_attachments_file', table_name='email_attachments')
    op.drop_table('email_attachments')
    op.drop_index('idx_delivery_confirmations_stop', table_name='delivery_confirmations')
    op.drop_index('idx_delivery_confirmations_type', table_name='delivery_confirmations')
    op.drop_table('delivery_confirmations')
    op.drop_index('idx_cmn_forms_0603b_customer', table_name='cmn_forms_0603b')
    op.drop_index('idx_cmn_forms_0603b_medical', table_name='cmn_forms_0603b')
    op.drop_table('cmn_forms_0603b')
    op.drop_index('idx_api_logs_date', table_name='api_logs')
    op.drop_index('idx_api_logs_endpoint', table_name='api_logs')
    op.drop_index('idx_api_logs_key', table_name='api_logs')
    op.drop_index('idx_api_logs_request', table_name='api_logs')
    op.drop_index('idx_api_logs_status', table_name='api_logs')
    op.drop_table('api_logs')
    op.drop_index('idx_delivery_routes_date', table_name='delivery_routes')
    op.drop_index('idx_delivery_routes_driver', table_name='delivery_routes')
    op.drop_index('idx_delivery_routes_status', table_name='delivery_routes')
    op.drop_table('delivery_routes')
    op.drop_index('idx_cmn_sections_form', table_name='cmn_form_sections')
    op.drop_index('idx_cmn_sections_order', table_name='cmn_form_sections')
    op.drop_index('idx_cmn_sections_type', table_name='cmn_form_sections')
    op.drop_table('cmn_form_sections')
    op.drop_index('idx_shipping_packages_dates', table_name='shipping_packages')
    op.drop_index('idx_shipping_packages_method', table_name='shipping_packages')
    op.drop_index('idx_shipping_packages_order', table_name='shipping_packages')
    op.drop_index('idx_shipping_packages_status', table_name='shipping_packages')
    op.drop_index('idx_shipping_packages_tracking', table_name='shipping_packages')
    op.drop_table('shipping_packages')
    op.drop_index('idx_integration_mappings_active', table_name='integration_mappings')
    op.drop_index('idx_integration_mappings_endpoint', table_name='integration_mappings')
    op.drop_index('idx_integration_mappings_models', table_name='integration_mappings')
    op.drop_index('idx_integration_mappings_type', table_name='integration_mappings')
    op.drop_table('integration_mappings')
    op.drop_index('idx_variables_name', table_name='variables')
    op.drop_table('variables')
    op.drop_index('idx_chart_of_accounts_active', table_name='chart_of_accounts')
    op.drop_index('idx_chart_of_accounts_number', table_name='chart_of_accounts')
    op.drop_index('idx_chart_of_accounts_parent', table_name='chart_of_accounts')
    op.drop_index('idx_chart_of_accounts_type', table_name='chart_of_accounts')
    op.drop_table('chart_of_accounts')
    op.drop_index('idx_var_val_def', table_name='variable_values')
    op.drop_table('variable_values')
    op.drop_index('idx_report_definitions_active', table_name='report_definitions')
    op.drop_index('idx_report_definitions_category', table_name='report_definitions')
    op.drop_index('idx_report_definitions_featured', table_name='report_definitions')
    op.drop_index('idx_report_definitions_type', table_name='report_definitions')
    op.drop_table('report_definitions')
    op.drop_index('idx_payment_plans_dates', table_name='payment_plans')
    op.drop_index('idx_payment_plans_patient', table_name='payment_plans')
    op.drop_index('idx_payment_plans_status', table_name='payment_plans')
    op.drop_table('payment_plans')
    op.drop_index('idx_tax_rates_active', table_name='tax_rates')
    op.drop_table('tax_rates')
    op.drop_table('billingtypes')
    op.drop_index('idx_invoice_forms_company', table_name='invoice_forms')
    op.drop_index('idx_invoice_forms_customer', table_name='invoice_forms')
    op.drop_index('idx_invoice_forms_dates', table_name='invoice_forms')
    op.drop_index('idx_invoice_forms_number', table_name='invoice_forms')
    op.drop_index('idx_invoice_forms_status', table_name='invoice_forms')
    op.drop_table('invoice_forms')
    op.drop_table('kb_categories')
    op.drop_table('customer_feedbacks')
    op.drop_index('idx_cmn_forms_0602b_customer', table_name='cmn_forms_0602b')
    op.drop_index('idx_cmn_forms_0602b_medical', table_name='cmn_forms_0602b')
    op.drop_table('cmn_forms_0602b')
    op.drop_index('idx_document_versions_document', table_name='document_versions')
    op.drop_index('idx_document_versions_version', table_name='document_versions')
    op.drop_table('document_versions')
    op.drop_index('idx_feature_flags_dates', table_name='feature_flags')
    op.drop_index('idx_feature_flags_enabled', table_name='feature_flags')
    op.drop_table('feature_flags')
    op.drop_index('idx_customer_classes_active', table_name='customer_classes')
    op.drop_index('idx_customer_classes_priority', table_name='customer_classes')
    op.drop_table('customer_classes')
    op.drop_index('idx_task_types_category', table_name='task_types')
    op.drop_index('idx_task_types_name', table_name='task_types')
    op.drop_table('task_types')
    op.drop_table('employee_role_assignments')
    op.drop_index('idx_document_tags_document', table_name='document_tags')
    op.drop_index('idx_document_tags_name', table_name='document_tags')
    op.drop_table('document_tags')
    op.drop_index('idx_cmn_forms_0703a_customer', table_name='cmn_forms_0703a')
    op.drop_index('idx_cmn_forms_0703a_medical', table_name='cmn_forms_0703a')
    op.drop_table('cmn_forms_0703a')
    op.drop_index('idx_products_active', table_name='products')
    op.drop_index('idx_products_category', table_name='products')
    op.drop_index('idx_products_sku', table_name='products')
    op.drop_table('products')
    op.drop_index('idx_report_subscriptions_active', table_name='report_subscriptions')
    op.drop_index('idx_report_subscriptions_report', table_name='report_subscriptions')
    op.drop_index('idx_report_subscriptions_schedule', table_name='report_subscriptions')
    op.drop_index('idx_report_subscriptions_user', table_name='report_subscriptions')
    op.drop_table('report_subscriptions')
    op.drop_index('idx_notification_recipients_notification', table_name='notification_recipients')
    op.drop_index('idx_notification_recipients_status', table_name='notification_recipients')
    op.drop_index('idx_notification_recipients_type', table_name='notification_recipients')
    op.drop_table('notification_recipients')
    op.drop_index('idx_cmn_forms_drorder_customer', table_name='cmn_forms_drorder')
    op.drop_index('idx_cmn_forms_drorder_doctor', table_name='cmn_forms_drorder')
    op.drop_index('idx_cmn_forms_drorder_medical', table_name='cmn_forms_drorder')
    op.drop_table('cmn_forms_drorder')
    op.drop_index('idx_insurance_auth_dates', table_name='insurance_authorizations')
    op.drop_index('idx_insurance_auth_number', table_name='insurance_authorizations')
    op.drop_index('idx_insurance_auth_policy', table_name='insurance_authorizations')
    op.drop_index('idx_insurance_auth_status', table_name='insurance_authorizations')
    op.drop_table('insurance_authorizations')
    op.drop_table('batchpayments')
    op.drop_table('migration_log')
    op.drop_index('idx_prescriptions_dates', table_name='prescriptions')
    op.drop_index('idx_prescriptions_doctor', table_name='prescriptions')
    op.drop_index('idx_prescriptions_patient', table_name='prescriptions')
    op.drop_index('idx_prescriptions_status', table_name='prescriptions')
    op.drop_table('prescriptions')
    op.drop_index('idx_accounting_periods_dates', table_name='accounting_periods')
    op.drop_index('idx_accounting_periods_status', table_name='accounting_periods')
    op.drop_table('accounting_periods')
    op.drop_index('idx_user_notifications_archived', table_name='user_notifications')
    op.drop_index('idx_user_notifications_read', table_name='user_notifications')
    op.drop_index('idx_user_notifications_type', table_name='user_notifications')
    op.drop_index('idx_user_notifications_user', table_name='user_notifications')
    op.drop_table('user_notifications')
    op.drop_index('idx_insurance_coverage_policy', table_name='insurance_coverage')
    op.drop_index('idx_insurance_coverage_type', table_name='insurance_coverage')
    op.drop_table('insurance_coverage')
    op.drop_index('idx_product_groups_active', table_name='product_groups')
    op.drop_index('idx_product_groups_category', table_name='product_groups')
    op.drop_table('product_groups')
    op.drop_table('quality_checklists')
    op.drop_index('idx_cmn_forms_0102a_customer', table_name='cmn_forms_0102a')
    op.drop_index('idx_cmn_forms_0102a_medical', table_name='cmn_forms_0102a')
    op.drop_table('cmn_forms_0102a')
    op.drop_index('idx_product_prices_active', table_name='product_prices')
    op.drop_index('idx_product_prices_code', table_name='product_prices')
    op.drop_index('idx_product_prices_dates', table_name='product_prices')
    op.drop_index('idx_product_prices_product', table_name='product_prices')
    op.drop_table('product_prices')
    op.drop_index('idx_communication_templates_active', table_name='communication_templates')
    op.drop_index('idx_communication_templates_category', table_name='communication_templates')
    op.drop_index('idx_communication_templates_system', table_name='communication_templates')
    op.drop_index('idx_communication_templates_type', table_name='communication_templates')
    op.drop_table('communication_templates')
    op.drop_index('idx_activity_logs_action', table_name='activity_logs')
    op.drop_index('idx_activity_logs_date', table_name='activity_logs')
    op.drop_index('idx_activity_logs_entity', table_name='activity_logs')
    op.drop_index('idx_activity_logs_type', table_name='activity_logs')
    op.drop_index('idx_activity_logs_user', table_name='activity_logs')
    op.drop_table('activity_logs')
    op.drop_index('idx_shipping_zones_active', table_name='shipping_zones')
    op.drop_table('shipping_zones')
    op.drop_table('customer_documents')
    op.drop_index('idx_compliance_company', table_name='compliance')
    op.drop_index('idx_compliance_customer', table_name='compliance')
    op.drop_index('idx_compliance_dates', table_name='compliance')
    op.drop_index('idx_compliance_status', table_name='compliance')
    op.drop_table('compliance')
    op.drop_index('idx_calendar_sharing_calendar', table_name='calendar_sharing')
    op.drop_index('idx_calendar_sharing_user', table_name='calendar_sharing')
    op.drop_table('calendar_sharing')
    op.drop_table('healthcare_providers')
    op.drop_index('idx_workflow_definitions_active', table_name='workflow_definitions')
    op.drop_index('idx_workflow_definitions_category', table_name='workflow_definitions')
    op.drop_index('idx_workflow_definitions_status', table_name='workflow_definitions')
    op.drop_table('workflow_definitions')
    op.drop_table('cmnforms')
    op.drop_table('employee_roles')
    op.drop_table('quality_checklist_items')
    op.drop_table('order_status')
    op.drop_table('appointment_reminders')
    op.drop_index('idx_cmn_forms_uro_customer', table_name='cmn_forms_uro')
    op.drop_index('idx_cmn_forms_uro_medical', table_name='cmn_forms_uro')
    op.drop_table('cmn_forms_uro')
    op.drop_index('idx_medical_conditions_category', table_name='medical_conditions')
    op.drop_index('idx_medical_conditions_chronic', table_name='medical_conditions')
    op.drop_index('idx_medical_conditions_severity', table_name='medical_conditions')
    op.drop_table('medical_conditions')
    op.drop_index('idx_cmn_forms_0702b_customer', table_name='cmn_forms_0702b')
    op.drop_index('idx_cmn_forms_0702b_medical', table_name='cmn_forms_0702b')
    op.drop_table('cmn_forms_0702b')
    op.drop_index('idx_payment_plan_items_dates', table_name='payment_plan_items')
    op.drop_index('idx_payment_plan_items_plan', table_name='payment_plan_items')
    op.drop_index('idx_payment_plan_items_status', table_name='payment_plan_items')
    op.drop_table('payment_plan_items')
    op.drop_index('idx_system_variables_configurable', table_name='system_variables')
    op.drop_index('idx_system_variables_module', table_name='system_variables')
    op.drop_index('idx_system_variables_restart', table_name='system_variables')
    op.drop_table('system_variables')
    op.drop_index('idx_billing_schedules_account', table_name='billing_schedules')
    op.drop_index('idx_billing_schedules_active', table_name='billing_schedules')
    op.drop_index('idx_billing_schedules_dates', table_name='billing_schedules')
    op.drop_table('billing_schedules')
    op.drop_index('idx_denial_attachments_denial', table_name='denial_attachments')
    op.drop_index('idx_denial_attachments_type', table_name='denial_attachments')
    op.drop_table('denial_attachments')
    op.drop_table('audit_action_types')
    op.drop_index('idx_predefined_text_active', table_name='predefined_text')
    op.drop_index('idx_predefined_text_category', table_name='predefined_text')
    op.drop_index('idx_predefined_text_name', table_name='predefined_text')
    op.drop_table('predefined_text')
    op.drop_index('idx_company_types_active', table_name='company_types')
    op.drop_index('idx_company_types_parent', table_name='company_types')
    op.drop_table('company_types')
    op.drop_index('idx_hao_contract', table_name='health_account_organizations')
    op.drop_index('idx_hao_dates', table_name='health_account_organizations')
    op.drop_index('idx_hao_insurance_group', table_name='health_account_organizations')
    op.drop_table('health_account_organizations')
    op.drop_index('idx_billing_accounts_customer', table_name='billing_accounts')
    op.drop_index('idx_billing_accounts_cycle', table_name='billing_accounts')
    op.drop_index('idx_billing_accounts_dates', table_name='billing_accounts')
    op.drop_index('idx_billing_accounts_number', table_name='billing_accounts')
    op.drop_index('idx_billing_accounts_status', table_name='billing_accounts')
    op.drop_table('billing_accounts')
    op.drop_table('cmnform_0484s')
    op.drop_table('backup_logs')
    op.drop_index('idx_message_recipients_address', table_name='message_recipients')
    op.drop_index('idx_message_recipients_message', table_name='message_recipients')
    op.drop_index('idx_message_recipients_status', table_name='message_recipients')
    op.drop_index('idx_message_recipients_type', table_name='message_recipients')
    op.drop_table('message_recipients')
    op.drop_table('configuration_categories')
    op.drop_index('idx_report_parameters_report', table_name='report_parameters')
    op.drop_index('idx_report_parameters_type', table_name='report_parameters')
    op.drop_table('report_parameters')
    op.drop_index('idx_workflow_triggers_active', table_name='workflow_triggers')
    op.drop_index('idx_workflow_triggers_event', table_name='workflow_triggers')
    op.drop_index('idx_workflow_triggers_type', table_name='workflow_triggers')
    op.drop_index('idx_workflow_triggers_workflow', table_name='workflow_triggers')
    op.drop_table('workflow_triggers')
    op.drop_index('idx_system_modules_core', table_name='system_modules')
    op.drop_index('idx_system_modules_enabled', table_name='system_modules')
    op.drop_index('idx_system_modules_status', table_name='system_modules')
    op.drop_table('system_modules')
    op.drop_index('idx_icd10_codes_code', table_name='icd10_codes')
    op.drop_table('icd10_codes')
    op.drop_table('equipments')
    op.drop_table('metric_types')
    op.drop_index('idx_kits_group', table_name='kits')
    op.drop_index('idx_kits_name', table_name='kits')
    op.drop_index('idx_kits_type', table_name='kits')
    op.drop_table('kits')
    op.drop_table('regions')
    op.drop_index('idx_journal_entries_date', table_name='journal_entries')
    op.drop_index('idx_journal_entries_number', table_name='journal_entries')
    op.drop_index('idx_journal_entries_period', table_name='journal_entries')
    op.drop_index('idx_journal_entries_status', table_name='journal_entries')
    op.drop_index('idx_journal_entries_type', table_name='journal_entries')
    op.drop_table('journal_entries')
    op.drop_index('idx_activity_types_category', table_name='activity_types')
    op.drop_index('idx_activity_types_name', table_name='activity_types')
    op.drop_table('activity_types')
    op.drop_index('idx_payment_transactions_account', table_name='payment_transactions')
    op.drop_index('idx_payment_transactions_dates', table_name='payment_transactions')
    op.drop_index('idx_payment_transactions_method', table_name='payment_transactions')
    op.drop_index('idx_payment_transactions_number', table_name='payment_transactions')
    op.drop_index('idx_payment_transactions_status', table_name='payment_transactions')
    op.drop_table('payment_transactions')
    op.drop_index('idx_var_def_name', table_name='variable_definitions')
    op.drop_table('variable_definitions')
    op.drop_index('idx_employees_department', table_name='employees')
    op.drop_index('idx_employees_name', table_name='employees')
    op.drop_index('idx_employees_status', table_name='employees')
    op.drop_table('employees')
    op.drop_index('idx_workflow_executions_dates', table_name='workflow_executions')
    op.drop_index('idx_workflow_executions_schedule', table_name='workflow_executions')
    op.drop_index('idx_workflow_executions_status', table_name='workflow_executions')
    op.drop_index('idx_workflow_executions_trigger', table_name='workflow_executions')
    op.drop_index('idx_workflow_executions_workflow', table_name='workflow_executions')
    op.drop_table('workflow_executions')
    op.drop_index('idx_cmn_forms_1003_customer', table_name='cmn_forms_1003')
    op.drop_index('idx_cmn_forms_1003_medical', table_name='cmn_forms_1003')
    op.drop_table('cmn_forms_1003')
    op.drop_index('idx_user_preferences_default', table_name='user_preferences')
    op.drop_index('idx_user_preferences_definition', table_name='user_preferences')
    op.drop_index('idx_user_preferences_user', table_name='user_preferences')
    op.drop_table('user_preferences')
    op.drop_index('idx_cmn_forms_0203b_customer', table_name='cmn_forms_0203b')
    op.drop_index('idx_cmn_forms_0203b_medical', table_name='cmn_forms_0203b')
    op.drop_table('cmn_forms_0203b')
    op.drop_index('idx_legal_reps_active', table_name='legal_representatives')
    op.drop_index('idx_legal_reps_dates', table_name='legal_representatives')
    op.drop_index('idx_legal_reps_entity', table_name='legal_representatives')
    op.drop_table('legal_representatives')
    op.drop_index('idx_set_def_name', table_name='setting_definitions')
    op.drop_table('setting_definitions')
    op.drop_index('idx_doctor_orders_dates', table_name='doctor_orders')
    op.drop_index('idx_doctor_orders_doctor', table_name='doctor_orders')
    op.drop_index('idx_doctor_orders_patient', table_name='doctor_orders')
    op.drop_index('idx_doctor_orders_priority', table_name='doctor_orders')
    op.drop_index('idx_doctor_orders_status', table_name='doctor_orders')
    op.drop_index('idx_doctor_orders_type', table_name='doctor_orders')
    op.drop_table('doctor_orders')
    op.drop_index('idx_message_queue_processed', table_name='message_queue')
    op.drop_index('idx_message_queue_scheduled', table_name='message_queue')
    op.drop_index('idx_message_queue_status', table_name='message_queue')
    op.drop_index('idx_message_queue_template', table_name='message_queue')
    op.drop_index('idx_message_queue_type', table_name='message_queue')
    op.drop_index('idx_message_queue_version', table_name='message_queue')
    op.drop_table('message_queue')
    op.drop_table('batch_logs')
    op.drop_index('idx_document_categories_name', table_name='document_categories')
    op.drop_index('idx_document_categories_parent', table_name='document_categories')
    op.drop_table('document_categories')
    op.drop_index('idx_tasks_assigned', table_name='tasks')
    op.drop_index('idx_tasks_dates', table_name='tasks')
    op.drop_index('idx_tasks_entity', table_name='tasks')
    op.drop_index('idx_tasks_parent', table_name='tasks')
    op.drop_index('idx_tasks_status', table_name='tasks')
    op.drop_index('idx_tasks_type', table_name='tasks')
    op.drop_table('tasks')
    op.drop_table('configuration_audits')
    op.drop_index('idx_report_schedules_active', table_name='report_schedules')
    op.drop_index('idx_report_schedules_dates', table_name='report_schedules')
    op.drop_index('idx_report_schedules_next_run', table_name='report_schedules')
    op.drop_index('idx_report_schedules_report', table_name='report_schedules')
    op.drop_table('report_schedules')
    op.drop_table('quality_inspections')
    op.drop_index('idx_product_types_active', table_name='product_types')
    op.drop_index('idx_product_types_group', table_name='product_types')
    op.drop_table('product_types')
    op.drop_table('notification_templates')
    op.drop_index('idx_document_templates_category', table_name='document_templates')
    op.drop_index('idx_document_templates_name', table_name='document_templates')
    op.drop_table('document_templates')
    op.drop_index('idx_order_fulfillment_date', table_name='order_fulfillment')
    op.drop_index('idx_order_fulfillment_employee', table_name='order_fulfillment')
    op.drop_index('idx_order_fulfillment_order', table_name='order_fulfillment')
    op.drop_table('order_fulfillment')
    op.drop_table('maintenance_checklist_items')
    op.drop_index('idx_appointment_types_name', table_name='appointment_types')
    op.drop_table('appointment_types')
    op.drop_table('inventories')
    op.drop_table('table_backup_log')
    op.drop_index('idx_cmn_responses_dates', table_name='cmn_form_responses')
    op.drop_index('idx_cmn_responses_doctor', table_name='cmn_form_responses')
    op.drop_index('idx_cmn_responses_form', table_name='cmn_form_responses')
    op.drop_index('idx_cmn_responses_patient', table_name='cmn_form_responses')
    op.drop_index('idx_cmn_responses_status', table_name='cmn_form_responses')
    op.drop_table('cmn_form_responses')
    op.drop_table('inventory_transactions')
    op.drop_index('idx_order_history_date', table_name='order_history')
    op.drop_index('idx_order_history_order', table_name='order_history')
    op.drop_index('idx_order_history_status', table_name='order_history')
    op.drop_table('order_history')
    op.drop_table('compliance_audits')
    op.drop_index('idx_insurance_policies_dates', table_name='insurance_policies')
    op.drop_index('idx_insurance_policies_patient', table_name='insurance_policies')
    op.drop_index('idx_insurance_policies_payer', table_name='insurance_policies')
    op.drop_index('idx_insurance_policies_status', table_name='insurance_policies')
    op.drop_table('insurance_policies')
    op.drop_index('idx_cmn_forms_0403b_customer', table_name='cmn_forms_0403b')
    op.drop_index('idx_cmn_forms_0403b_medical', table_name='cmn_forms_0403b')
    op.drop_table('cmn_forms_0403b')
    op.drop_table('system_metrics')
    op.drop_index('idx_claim_denials_claim', table_name='claim_denials')
    op.drop_index('idx_claim_denials_dates', table_name='claim_denials')
    op.drop_index('idx_claim_denials_reason', table_name='claim_denials')
    op.drop_index('idx_claim_denials_status', table_name='claim_denials')
    op.drop_table('claim_denials')
    op.drop_table('equipment_types')
    op.drop_index('idx_set_hist_val', table_name='setting_history')
    op.drop_table('setting_history')
    op.drop_index('idx_message_attachments_message', table_name='message_attachments')
    op.drop_index('idx_message_attachments_type', table_name='message_attachments')
    op.drop_table('message_attachments')
    op.drop_table('task_priorities')
    op.drop_table('customer_contacts')
    op.drop_index('idx_task_time_entries_dates', table_name='task_time_entries')
    op.drop_index('idx_task_time_entries_task', table_name='task_time_entries')
    op.drop_index('idx_task_time_entries_user', table_name='task_time_entries')
    op.drop_table('task_time_entries')
    op.drop_table('service_histories')
    op.drop_index('idx_denials_appeal', table_name='denials')
    op.drop_index('idx_denials_claim', table_name='denials')
    op.drop_index('idx_denials_customer', table_name='denials')
    op.drop_index('idx_denials_dates', table_name='denials')
    op.drop_index('idx_denials_insurance', table_name='denials')
    op.drop_index('idx_denials_status', table_name='denials')
    op.drop_table('denials')
    op.drop_index('idx_email_templates_active', table_name='email_templates')
    op.drop_index('idx_email_templates_code', table_name='email_templates')
    op.drop_table('email_templates')
    op.drop_index('idx_template_versions_active', table_name='template_versions')
    op.drop_index('idx_template_versions_published', table_name='template_versions')
    op.drop_index('idx_template_versions_template', table_name='template_versions')
    op.drop_table('template_versions')
    op.drop_index('idx_locations_active', table_name='locations')
    op.drop_index('idx_locations_manager', table_name='locations')
    op.drop_index('idx_locations_parent', table_name='locations')
    op.drop_index('idx_locations_type', table_name='locations')
    op.drop_table('locations')
    op.drop_index('idx_cfg_def_name', table_name='configuration_definitions')
    op.drop_table('configuration_definitions')
    op.drop_index('idx_task_dependencies_dependent', table_name='task_dependencies')
    op.drop_index('idx_task_dependencies_task', table_name='task_dependencies')
    op.drop_index('idx_task_dependencies_type', table_name='task_dependencies')
    op.drop_table('task_dependencies')
    op.drop_index('idx_environment_settings_category', table_name='environment_settings')
    op.drop_index('idx_environment_settings_editable', table_name='environment_settings')
    op.drop_index('idx_environment_settings_env', table_name='environment_settings')
    op.drop_table('environment_settings')
    op.drop_table('compliance_checklist_items')
    op.drop_table('kb_article_feedbacks')
    op.drop_index('idx_eligibility_coverage', table_name='eligibility_requests')
    op.drop_index('idx_eligibility_customer', table_name='eligibility_requests')
    op.drop_index('idx_eligibility_dates', table_name='eligibility_requests')
    op.drop_index('idx_eligibility_insurance', table_name='eligibility_requests')
    op.drop_index('idx_eligibility_status', table_name='eligibility_requests')
    op.drop_table('eligibility_requests')
    op.drop_index('idx_insurance_types_coverage', table_name='insurance_types')
    op.drop_index('idx_insurance_types_name', table_name='insurance_types')
    op.drop_table('insurance_types')
    op.drop_table('compliance_checklists')
    op.drop_table('document_types')
    op.drop_index('idx_price_history_dates', table_name='price_history')
    op.drop_index('idx_price_history_entity', table_name='price_history')
    op.drop_table('price_history')
    op.drop_index('idx_cmn_forms_0902_customer', table_name='cmn_forms_0902')
    op.drop_index('idx_cmn_forms_0902_medical', table_name='cmn_forms_0902')
    op.drop_table('cmn_forms_0902')
    op.drop_index('idx_task_comments_parent', table_name='task_comments')
    op.drop_index('idx_task_comments_task', table_name='task_comments')
    op.drop_table('task_comments')
    op.drop_table('maintenance_checklists')
    op.drop_table('batches')
    op.drop_index('idx_user_dashboards_default', table_name='user_dashboards')
    op.drop_index('idx_user_dashboards_system', table_name='user_dashboards')
    op.drop_index('idx_user_dashboards_user', table_name='user_dashboards')
    op.drop_table('user_dashboards')
    op.drop_table('invoice_items')
    op.drop_index('idx_cmn_forms_0403c_customer', table_name='cmn_forms_0403c')
    op.drop_index('idx_cmn_forms_0403c_medical', table_name='cmn_forms_0403c')
    op.drop_table('cmn_forms_0403c')
    op.drop_table('batch_status')
    op.drop_index('idx_availability_exceptions_date', table_name='availability_exceptions')
    op.drop_index('idx_availability_exceptions_user', table_name='availability_exceptions')
    op.drop_table('availability_exceptions')
    op.drop_table('notifications')
    op.drop_index('idx_system_settings_key', table_name='system_settings')
    op.drop_table('system_settings')
    op.drop_index('idx_billing_cycles_active', table_name='billing_cycles')
    op.drop_index('idx_billing_cycles_frequency', table_name='billing_cycles')
    op.drop_table('billing_cycles')
    op.drop_index('idx_report_executions_dates', table_name='report_executions')
    op.drop_index('idx_report_executions_report', table_name='report_executions')
    op.drop_index('idx_report_executions_status', table_name='report_executions')
    op.drop_index('idx_report_executions_user', table_name='report_executions')
    op.drop_table('report_executions')
    op.drop_index('idx_insurance_payers_active', table_name='insurance_payers')
    op.drop_index('idx_insurance_payers_code', table_name='insurance_payers')
    op.drop_table('insurance_payers')
    op.drop_index('idx_product_history_change', table_name='product_history')
    op.drop_index('idx_product_history_field', table_name='product_history')
    op.drop_index('idx_product_history_product', table_name='product_history')
    op.drop_table('product_history')
    op.drop_index('idx_insurance_groups_name', table_name='insurance_company_groups')
    op.drop_index('idx_insurance_groups_parent', table_name='insurance_company_groups')
    op.drop_table('insurance_company_groups')
    op.drop_index('idx_insurance_claims_dates', table_name='insurance_claims')
    op.drop_index('idx_insurance_claims_number', table_name='insurance_claims')
    op.drop_index('idx_insurance_claims_policy', table_name='insurance_claims')
    op.drop_index('idx_insurance_claims_status', table_name='insurance_claims')
    op.drop_table('insurance_claims')
    op.drop_index('idx_widget_instances_dashboard', table_name='widget_instances')
    op.drop_index('idx_widget_instances_widget', table_name='widget_instances')
    op.drop_table('widget_instances')
    op.drop_index('idx_integration_endpoints_active', table_name='integration_endpoints')
    op.drop_index('idx_integration_endpoints_connection', table_name='integration_endpoints')
    op.drop_index('idx_integration_endpoints_method', table_name='integration_endpoints')
    op.drop_index('idx_integration_endpoints_type', table_name='integration_endpoints')
    op.drop_table('integration_endpoints')
    op.drop_table('globals')
    op.drop_index('idx_cmn_forms_0903_customer', table_name='cmn_forms_0903')
    op.drop_index('idx_cmn_forms_0903_medical', table_name='cmn_forms_0903')
    op.drop_table('cmn_forms_0903')
    op.drop_index('idx_price_codes_active', table_name='price_codes')
    op.drop_table('price_codes')
    op.drop_table('integration_logs')
    op.drop_table('communication_logs')
    op.drop_table('feedback_categories')
    op.drop_index('idx_cmn_forms_0702a_customer', table_name='cmn_forms_0702a')
    op.drop_index('idx_cmn_forms_0702a_medical', table_name='cmn_forms_0702a')
    op.drop_table('cmn_forms_0702a')
    op.drop_table('customer_notes')
    op.drop_table('order_status_histories')
    op.drop_index('idx_vendors_status', table_name='vendors')
    op.drop_index('idx_vendors_type', table_name='vendors')
    op.drop_table('vendors')
    op.drop_index('idx_set_val_def', table_name='setting_values')
    op.drop_table('setting_values')
    op.drop_index('idx_denial_reasons_active', table_name='denial_reasons')
    op.drop_index('idx_denial_reasons_category', table_name='denial_reasons')
    op.drop_index('idx_denial_reasons_code', table_name='denial_reasons')
    op.drop_table('denial_reasons')
    op.drop_index('idx_workflow_conditions_order', table_name='workflow_conditions')
    op.drop_index('idx_workflow_conditions_type', table_name='workflow_conditions')
    op.drop_index('idx_workflow_conditions_workflow', table_name='workflow_conditions')
    op.drop_table('workflow_conditions')
    op.drop_index('idx_audit_field_changes_field', table_name='audit_field_changes')
    op.drop_index('idx_audit_field_changes_log', table_name='audit_field_changes')
    op.drop_table('audit_field_changes')
    op.drop_table('table_rename_log')
    op.drop_index('idx_file_categories_name', table_name='file_categories')
    op.drop_index('idx_file_categories_parent', table_name='file_categories')
    op.drop_table('file_categories')
    op.drop_index('idx_shipping_carriers_active', table_name='shipping_carriers')
    op.drop_table('shipping_carriers')
    op.drop_table('order_trackings')
    op.drop_table('integration_schedules')
    op.drop_index('idx_api_keys_active', table_name='api_keys')
    op.drop_index('idx_api_keys_dates', table_name='api_keys')
    op.drop_index('idx_api_keys_identifier', table_name='api_keys')
    op.drop_index('idx_api_keys_owner', table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_table('employee_schedules')
    op.drop_index('idx_compliance_notes_compliance', table_name='compliance_notes')
    op.drop_index('idx_compliance_notes_type', table_name='compliance_notes')
    op.drop_table('compliance_notes')
    op.drop_index('idx_workflow_actions_order', table_name='workflow_actions')
    op.drop_index('idx_workflow_actions_target', table_name='workflow_actions')
    op.drop_index('idx_workflow_actions_type', table_name='workflow_actions')
    op.drop_index('idx_workflow_actions_workflow', table_name='workflow_actions')
    op.drop_table('workflow_actions')
    op.drop_table('customer_address')
    op.drop_table('configuration_settings')
    op.drop_table('claim_status_histories')
    op.drop_index('idx_payers_ids', table_name='payers')
    op.drop_index('idx_payers_insurance_group', table_name='payers')
    op.drop_index('idx_payers_name', table_name='payers')
    op.drop_table('payers')
    op.drop_index('idx_deposit_details_deposit', table_name='deposit_details')
    op.drop_index('idx_deposit_details_type', table_name='deposit_details')
    op.drop_table('deposit_details')
    op.drop_index('idx_cmn_forms_0404c_customer', table_name='cmn_forms_0404c')
    op.drop_index('idx_cmn_forms_0404c_medical', table_name='cmn_forms_0404c')
    op.drop_table('cmn_forms_0404c')
    op.drop_index('idx_order_types_active', table_name='order_types')
    op.drop_index('idx_order_types_workflow', table_name='order_types')
    op.drop_table('order_types')
    op.drop_index('idx_cmn_fields_active', table_name='cmn_form_fields')
    op.drop_index('idx_cmn_fields_order', table_name='cmn_form_fields')
    op.drop_index('idx_cmn_fields_section', table_name='cmn_form_fields')
    op.drop_index('idx_cmn_fields_type', table_name='cmn_form_fields')
    op.drop_table('cmn_form_fields')
    op.drop_index('idx_var_hist_val', table_name='variable_history')
    op.drop_table('variable_history')
    op.drop_index('idx_payment_allocations_date', table_name='payment_allocations')
    op.drop_index('idx_payment_allocations_invoice', table_name='payment_allocations')
    op.drop_index('idx_payment_allocations_transaction', table_name='payment_allocations')
    op.drop_table('payment_allocations')
    op.drop_table('customer_orders')
    op.drop_index('idx_delivery_stops_package', table_name='delivery_stops')
    op.drop_index('idx_delivery_stops_route', table_name='delivery_stops')
    op.drop_index('idx_delivery_stops_status', table_name='delivery_stops')
    op.drop_index('idx_delivery_stops_times', table_name='delivery_stops')
    op.drop_table('delivery_stops')
    op.drop_index('idx_product_categories_active', table_name='product_categories')
    op.drop_index('idx_product_categories_parent', table_name='product_categories')
    op.drop_table('product_categories')
    op.drop_index('idx_icd_codes_billable', table_name='icd_codes')
    op.drop_index('idx_icd_codes_category', table_name='icd_codes')
    op.drop_index('idx_icd_codes_code', table_name='icd_codes')
    op.drop_index('idx_icd_codes_dates', table_name='icd_codes')
    op.drop_index('idx_icd_codes_type', table_name='icd_codes')
    op.drop_table('icd_codes')
    op.drop_table('changes')
    op.drop_index('idx_availability_schedules_day', table_name='availability_schedules')
    op.drop_index('idx_availability_schedules_user', table_name='availability_schedules')
    op.drop_table('availability_schedules')
    op.drop_index('idx_order_fulfillments_date', table_name='order_fulfillments')
    op.drop_index('idx_order_fulfillments_order', table_name='order_fulfillments')
    op.drop_index('idx_order_fulfillments_package', table_name='order_fulfillments')
    op.drop_index('idx_order_fulfillments_status', table_name='order_fulfillments')
    op.drop_table('order_fulfillments')
    op.drop_index('idx_icd9_codes_code', table_name='icd9_codes')
    op.drop_table('icd9_codes')
    op.drop_index('idx_preference_definitions_category', table_name='preference_definitions')
    op.drop_index('idx_preference_definitions_configurable', table_name='preference_definitions')
    op.drop_index('idx_preference_definitions_system', table_name='preference_definitions')
    op.drop_table('preference_definitions')
    op.drop_index('idx_template_categories_active', table_name='template_categories')
    op.drop_index('idx_template_categories_parent', table_name='template_categories')
    op.drop_table('template_categories')
    op.drop_table('ability_eligibility_requests')
    op.drop_index('idx_cfg_val_def', table_name='configuration_values')
    op.drop_table('configuration_values')
    op.drop_index('idx_api_metrics_endpoint', table_name='api_metrics')
    op.drop_index('idx_api_metrics_key', table_name='api_metrics')
    op.drop_index('idx_api_metrics_timestamp', table_name='api_metrics')
    op.drop_table('api_metrics')
    op.drop_index('idx_appointments_calendar', table_name='appointments')
    op.drop_index('idx_appointments_customer', table_name='appointments')
    op.drop_index('idx_appointments_dates', table_name='appointments')
    op.drop_index('idx_appointments_status', table_name='appointments')
    op.drop_index('idx_appointments_type', table_name='appointments')
    op.drop_table('appointments')
    op.drop_index('idx_file_attachments_category', table_name='file_attachments')
    op.drop_index('idx_file_attachments_entity', table_name='file_attachments')
    op.drop_index('idx_file_attachments_expiry', table_name='file_attachments')
    op.drop_index('idx_file_attachments_public', table_name='file_attachments')
    op.drop_table('file_attachments')
    op.drop_table('kb_articles')
    op.drop_index('idx_general_ledger_account', table_name='general_ledger')
    op.drop_index('idx_general_ledger_date', table_name='general_ledger')
    op.drop_index('idx_general_ledger_document', table_name='general_ledger')
    op.drop_index('idx_general_ledger_period', table_name='general_ledger')
    op.drop_index('idx_general_ledger_posted', table_name='general_ledger')
    op.drop_table('general_ledger')
    op.drop_index('idx_invoice_details_invoice', table_name='invoice_details')
    op.drop_index('idx_invoice_details_product', table_name='invoice_details')
    op.drop_table('invoice_details')
    op.add_column('audit_logs', sa.Column('resource', sa.String(length=50), nullable=False))
    op.add_column('audit_logs', sa.Column('resource_id', sa.Integer(), nullable=True))
    op.add_column('audit_logs', sa.Column('details', sa.String(length=1000), nullable=True))
    op.add_column('audit_logs', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('audit_logs', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.add_column('audit_logs', sa.Column('created_by', sa.String(length=50), nullable=True))
    op.add_column('audit_logs', sa.Column('updated_by', sa.String(length=50), nullable=True))
    op.alter_column('audit_logs', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('audit_logs', 'ip_address',
               existing_type=sa.VARCHAR(length=45),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.drop_index('idx_audit_logs_action', table_name='audit_logs')
    op.drop_index('idx_audit_logs_date', table_name='audit_logs')
    op.drop_index('idx_audit_logs_record', table_name='audit_logs')
    op.drop_index('idx_audit_logs_table', table_name='audit_logs')
    op.drop_index('idx_audit_logs_user', table_name='audit_logs')
    op.drop_table_comment(
        'audit_logs',
        existing_comment='System-wide audit logging',
        schema=None
    )
    op.drop_column('audit_logs', 'record_id')
    op.drop_column('audit_logs', 'timestamp')
    op.drop_column('audit_logs', 'old_data')
    op.drop_column('audit_logs', 'table_name')
    op.drop_column('audit_logs', 'user_agent')
    op.drop_column('audit_logs', 'new_data')
    op.create_foreign_key(None, 'claims', 'orders', ['order_id'], ['id'])
    op.create_foreign_key(None, 'customer_doctors', 'doctors', ['doctor_id'], ['id'])
    op.create_foreign_key(None, 'delivery_schedules', 'orders', ['order_id'], ['id'])
    op.add_column('doctors', sa.Column('suffix', sa.String(length=10), nullable=True))
    op.add_column('doctors', sa.Column('npi', sa.String(length=10), nullable=False))
    op.add_column('doctors', sa.Column('license_expiry', sa.Date(), nullable=True))
    op.add_column('doctors', sa.Column('upin_number', sa.String(length=20), nullable=True))
    op.add_column('doctors', sa.Column('medicaid_number', sa.String(length=20), nullable=True))
    op.add_column('doctors', sa.Column('address1', sa.String(length=100), nullable=False))
    op.add_column('doctors', sa.Column('address2', sa.String(length=100), nullable=True))
    op.add_column('doctors', sa.Column('city', sa.String(length=50), nullable=False))
    op.add_column('doctors', sa.Column('state', sa.String(length=2), nullable=False))
    op.add_column('doctors', sa.Column('zip_code', sa.String(length=10), nullable=False))
    op.add_column('doctors', sa.Column('phone', sa.String(length=20), nullable=True))
    op.add_column('doctors', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.alter_column('doctors', 'first_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('doctors', 'last_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('doctors', 'middle_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=1),
               existing_nullable=True)
    op.alter_column('doctors', 'email',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('doctors', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('doctors', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_doctors_license', table_name='doctors')
    op.drop_index('idx_doctors_name', table_name='doctors')
    op.drop_index('idx_doctors_npi', table_name='doctors')
    op.drop_index('idx_doctors_status', table_name='doctors')
    op.drop_constraint('uq_doctor_license', 'doctors', type_='unique')
    op.drop_constraint('uq_doctor_npi', 'doctors', type_='unique')
    op.create_unique_constraint(None, 'doctors', ['npi'])
    op.drop_constraint('fk_doctor_address', 'doctors', type_='foreignkey')
    op.drop_table_comment(
        'doctors',
        existing_comment='Healthcare provider information',
        schema=None
    )
    op.drop_column('doctors', 'npi_number')
    op.drop_column('doctors', 'phone_primary')
    op.drop_column('doctors', 'status')
    op.drop_column('doctors', 'address_id')
    op.drop_column('doctors', 'metadata')
    op.drop_column('doctors', 'phone_secondary')
    op.drop_column('doctors', 'specialty')
    op.create_foreign_key(None, 'order_details', 'orders', ['order_id'], ['id'])
    op.add_column('order_status_history', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.add_column('order_status_history', sa.Column('updated_by', sa.String(length=50), nullable=True))
    op.alter_column('order_status_history', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('PENDING', 'APPROVED', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED', 'ON_HOLD', name='orderstatus'),
               existing_nullable=False)
    op.alter_column('order_status_history', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_order_status_history_date', table_name='order_status_history')
    op.drop_index('idx_order_status_history_order', table_name='order_status_history')
    op.drop_index('idx_order_status_history_status', table_name='order_status_history')
    op.drop_table_comment(
        'order_status_history',
        existing_comment='Order status change history',
        schema=None
    )
    op.add_column('orders', sa.Column('delivery_date', sa.DateTime(), nullable=True))
    op.add_column('orders', sa.Column('tracking_number', sa.String(length=100), nullable=True))
    op.add_column('orders', sa.Column('bill_date', sa.DateTime(), nullable=True))
    op.add_column('orders', sa.Column('insurance1_id', sa.Integer(), nullable=True))
    op.add_column('orders', sa.Column('insurance2_id', sa.Integer(), nullable=True))
    op.add_column('orders', sa.Column('icd10_codes', sa.String(length=500), nullable=True))
    op.add_column('orders', sa.Column('prescribing_doctor_id', sa.Integer(), nullable=True))
    op.add_column('orders', sa.Column('special_instructions', sa.Text(), nullable=True))
    op.add_column('orders', sa.Column('internal_notes', sa.Text(), nullable=True))
    op.alter_column('orders', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('PENDING', 'APPROVED', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED', 'ON_HOLD', name='orderstatus'),
               nullable=False,
               existing_server_default=sa.text("'draft'::character varying"))
    op.alter_column('orders', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('orders', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_orders_company', table_name='orders')
    op.drop_index('idx_orders_customer', table_name='orders')
    op.drop_index('idx_orders_dates', table_name='orders')
    op.drop_index('idx_orders_number', table_name='orders')
    op.drop_index('idx_orders_status', table_name='orders')
    op.drop_index('idx_orders_type', table_name='orders')
    op.drop_constraint('fk_order_company', 'orders', type_='foreignkey')
    op.drop_constraint('fk_order_type', 'orders', type_='foreignkey')
    op.create_foreign_key(None, 'orders', 'customer_insurances', ['insurance1_id'], ['id'])
    op.create_foreign_key(None, 'orders', 'doctors', ['prescribing_doctor_id'], ['id'])
    op.create_foreign_key(None, 'orders', 'customer_insurances', ['insurance2_id'], ['id'])
    op.drop_table_comment(
        'orders',
        existing_comment='Main order management table',
        schema=None
    )
    op.drop_column('orders', 'tax_amount')
    op.drop_column('orders', 'shipping_address_id')
    op.drop_column('orders', 'company_id')
    op.drop_column('orders', 'notes')
    op.drop_column('orders', 'order_type_id')
    op.drop_column('orders', 'metadata')
    op.drop_column('orders', 'shipping_cost')
    op.drop_column('orders', 'billing_address_id')
    op.drop_column('orders', 'due_date')
    op.drop_column('orders', 'subtotal')
    op.drop_column('orders', 'discount_amount')
    op.create_foreign_key(None, 'payments', 'orders', ['order_id'], ['id'])
    op.add_column('shipping_methods', sa.Column('description', sa.String(length=255), nullable=True))
    op.add_column('shipping_methods', sa.Column('carrier', sa.String(length=50), nullable=False))
    op.add_column('shipping_methods', sa.Column('tracking_url_template', sa.String(length=255), nullable=True))
    op.alter_column('shipping_methods', 'name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('shipping_methods', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('shipping_methods', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_shipping_methods_active', table_name='shipping_methods')
    op.drop_index('idx_shipping_methods_carrier', table_name='shipping_methods')
    op.drop_constraint('uq_shipping_method_carrier', 'shipping_methods', type_='unique')
    op.drop_constraint('fk_shipping_method_carrier', 'shipping_methods', type_='foreignkey')
    op.drop_table_comment(
        'shipping_methods',
        existing_comment='Available shipping methods per carrier',
        schema=None
    )
    op.drop_column('shipping_methods', 'cutoff_time')
    op.drop_column('shipping_methods', 'handling_time')
    op.drop_column('shipping_methods', 'is_signature_required')
    op.drop_column('shipping_methods', 'settings')
    op.drop_column('shipping_methods', 'carrier_id')
    op.drop_column('shipping_methods', 'service_code')
    op.drop_column('shipping_methods', 'is_insurance_required')
    op.drop_column('shipping_methods', 'estimated_days')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('shipping_methods', sa.Column('estimated_days', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('shipping_methods', sa.Column('is_insurance_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('shipping_methods', sa.Column('service_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('shipping_methods', sa.Column('carrier_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('shipping_methods', sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('shipping_methods', sa.Column('is_signature_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('shipping_methods', sa.Column('handling_time', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('shipping_methods', sa.Column('cutoff_time', postgresql.TIME(), autoincrement=False, nullable=True))
    op.create_table_comment(
        'shipping_methods',
        'Available shipping methods per carrier',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key('fk_shipping_method_carrier', 'shipping_methods', 'shipping_carriers', ['carrier_id'], ['id'])
    op.create_unique_constraint('uq_shipping_method_carrier', 'shipping_methods', ['carrier_id', 'service_code'])
    op.create_index('idx_shipping_methods_carrier', 'shipping_methods', ['carrier_id'], unique=False)
    op.create_index('idx_shipping_methods_active', 'shipping_methods', ['is_active'], unique=False)
    op.alter_column('shipping_methods', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('shipping_methods', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('shipping_methods', 'name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_column('shipping_methods', 'tracking_url_template')
    op.drop_column('shipping_methods', 'carrier')
    op.drop_column('shipping_methods', 'description')
    op.drop_constraint(None, 'payments', type_='foreignkey')
    op.add_column('orders', sa.Column('discount_amount', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('orders', sa.Column('subtotal', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False))
    op.add_column('orders', sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('orders', sa.Column('billing_address_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('orders', sa.Column('shipping_cost', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('orders', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('orders', sa.Column('order_type_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('orders', sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('orders', sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('orders', sa.Column('shipping_address_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('orders', sa.Column('tax_amount', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.create_table_comment(
        'orders',
        'Main order management table',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'orders', type_='foreignkey')
    op.drop_constraint(None, 'orders', type_='foreignkey')
    op.drop_constraint(None, 'orders', type_='foreignkey')
    op.create_foreign_key('fk_order_type', 'orders', 'order_types', ['order_type_id'], ['id'])
    op.create_foreign_key('fk_order_company', 'orders', 'companies', ['company_id'], ['id'])
    op.create_index('idx_orders_type', 'orders', ['order_type_id'], unique=False)
    op.create_index('idx_orders_status', 'orders', ['status'], unique=False)
    op.create_index('idx_orders_number', 'orders', ['order_number'], unique=False)
    op.create_index('idx_orders_dates', 'orders', ['order_date', 'due_date'], unique=False)
    op.create_index('idx_orders_customer', 'orders', ['customer_id'], unique=False)
    op.create_index('idx_orders_company', 'orders', ['company_id'], unique=False)
    op.alter_column('orders', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('orders', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('orders', 'status',
               existing_type=sa.Enum('PENDING', 'APPROVED', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED', 'ON_HOLD', name='orderstatus'),
               type_=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'draft'::character varying"))
    op.drop_column('orders', 'internal_notes')
    op.drop_column('orders', 'special_instructions')
    op.drop_column('orders', 'prescribing_doctor_id')
    op.drop_column('orders', 'icd10_codes')
    op.drop_column('orders', 'insurance2_id')
    op.drop_column('orders', 'insurance1_id')
    op.drop_column('orders', 'bill_date')
    op.drop_column('orders', 'tracking_number')
    op.drop_column('orders', 'delivery_date')
    op.create_table_comment(
        'order_status_history',
        'Order status change history',
        existing_comment=None,
        schema=None
    )
    op.create_index('idx_order_status_history_status', 'order_status_history', ['status'], unique=False)
    op.create_index('idx_order_status_history_order', 'order_status_history', ['order_id'], unique=False)
    op.create_index('idx_order_status_history_date', 'order_status_history', ['created_at'], unique=False)
    op.alter_column('order_status_history', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('order_status_history', 'status',
               existing_type=sa.Enum('PENDING', 'APPROVED', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED', 'ON_HOLD', name='orderstatus'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.drop_column('order_status_history', 'updated_by')
    op.drop_column('order_status_history', 'updated_at')
    op.drop_constraint(None, 'order_details', type_='foreignkey')
    op.add_column('doctors', sa.Column('specialty', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('doctors', sa.Column('phone_secondary', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('doctors', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('doctors', sa.Column('address_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('doctors', sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True))
    op.add_column('doctors', sa.Column('phone_primary', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('doctors', sa.Column('npi_number', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.create_table_comment(
        'doctors',
        'Healthcare provider information',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key('fk_doctor_address', 'doctors', 'addresses', ['address_id'], ['id'])
    op.drop_constraint(None, 'doctors', type_='unique')
    op.create_unique_constraint('uq_doctor_npi', 'doctors', ['npi_number'])
    op.create_unique_constraint('uq_doctor_license', 'doctors', ['license_number'])
    op.create_index('idx_doctors_status', 'doctors', ['status'], unique=False)
    op.create_index('idx_doctors_npi', 'doctors', ['npi_number'], unique=False)
    op.create_index('idx_doctors_name', 'doctors', ['last_name', 'first_name'], unique=False)
    op.create_index('idx_doctors_license', 'doctors', ['license_number'], unique=False)
    op.alter_column('doctors', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('doctors', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('doctors', 'email',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('doctors', 'middle_name',
               existing_type=sa.String(length=1),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.alter_column('doctors', 'last_name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.alter_column('doctors', 'first_name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_column('doctors', 'is_active')
    op.drop_column('doctors', 'phone')
    op.drop_column('doctors', 'zip_code')
    op.drop_column('doctors', 'state')
    op.drop_column('doctors', 'city')
    op.drop_column('doctors', 'address2')
    op.drop_column('doctors', 'address1')
    op.drop_column('doctors', 'medicaid_number')
    op.drop_column('doctors', 'upin_number')
    op.drop_column('doctors', 'license_expiry')
    op.drop_column('doctors', 'npi')
    op.drop_column('doctors', 'suffix')
    op.drop_constraint(None, 'delivery_schedules', type_='foreignkey')
    op.drop_constraint(None, 'customer_doctors', type_='foreignkey')
    op.drop_constraint(None, 'claims', type_='foreignkey')
    op.add_column('audit_logs', sa.Column('new_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('table_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('old_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('record_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_table_comment(
        'audit_logs',
        'System-wide audit logging',
        existing_comment=None,
        schema=None
    )
    op.create_index('idx_audit_logs_user', 'audit_logs', ['user_id'], unique=False)
    op.create_index('idx_audit_logs_table', 'audit_logs', ['table_name'], unique=False)
    op.create_index('idx_audit_logs_record', 'audit_logs', ['record_id'], unique=False)
    op.create_index('idx_audit_logs_date', 'audit_logs', ['timestamp'], unique=False)
    op.create_index('idx_audit_logs_action', 'audit_logs', ['action'], unique=False)
    op.alter_column('audit_logs', 'ip_address',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=45),
               existing_nullable=True)
    op.alter_column('audit_logs', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('audit_logs', 'updated_by')
    op.drop_column('audit_logs', 'created_by')
    op.drop_column('audit_logs', 'updated_at')
    op.drop_column('audit_logs', 'created_at')
    op.drop_column('audit_logs', 'details')
    op.drop_column('audit_logs', 'resource_id')
    op.drop_column('audit_logs', 'resource')
    op.create_table('invoice_details',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('invoice_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('unit_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('discount_percent', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('tax_percent', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('line_total', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('quantity > 0', name='chk_invoice_detail_quantity'),
    sa.CheckConstraint('unit_price >= 0::numeric AND discount_percent >= 0::numeric AND discount_percent <= 100::numeric AND tax_percent >= 0::numeric AND tax_percent <= 100::numeric AND line_total >= 0::numeric', name='chk_invoice_detail_amounts'),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoice_forms.id'], name='fk_invoice_detail_invoice'),
    sa.PrimaryKeyConstraint('id', name='invoice_details_pkey'),
    comment='Line items for invoices'
    )
    op.create_index('idx_invoice_details_product', 'invoice_details', ['product_id'], unique=False)
    op.create_index('idx_invoice_details_invoice', 'invoice_details', ['invoice_id'], unique=False)
    op.create_table('general_ledger',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('account_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('period_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('transaction_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('document_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('debit_amount', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('credit_amount', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('running_balance', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('is_posted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('posted_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('posted_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('debit_amount >= 0::numeric AND credit_amount >= 0::numeric AND (debit_amount = 0::numeric OR credit_amount = 0::numeric)', name='chk_ledger_amounts'),
    sa.ForeignKeyConstraint(['account_id'], ['chart_of_accounts.id'], name='fk_ledger_account'),
    sa.ForeignKeyConstraint(['period_id'], ['accounting_periods.id'], name='fk_ledger_period'),
    sa.PrimaryKeyConstraint('id', name='general_ledger_pkey'),
    comment='General ledger transactions'
    )
    op.create_index('idx_general_ledger_posted', 'general_ledger', ['is_posted', 'posted_date'], unique=False)
    op.create_index('idx_general_ledger_period', 'general_ledger', ['period_id'], unique=False)
    op.create_index('idx_general_ledger_document', 'general_ledger', ['document_type', 'document_id'], unique=False)
    op.create_index('idx_general_ledger_date', 'general_ledger', ['transaction_date'], unique=False)
    op.create_index('idx_general_ledger_account', 'general_ledger', ['account_id'], unique=False)
    op.create_table('kb_articles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('kb_article_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('categoryid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('authorid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'Draft'::character varying"), autoincrement=False, nullable=False),
    sa.Column('tags', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('viewcount', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('publisheddate', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['categoryid'], ['kb_categories.id'], name='fk_kb_article_category'),
    sa.PrimaryKeyConstraint('id', name='kb_article_pkey'),
    comment='Knowledge base articles',
    postgresql_ignore_search_path=False
    )
    op.create_table('file_attachments',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('file_attachments_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('original_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('file_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('expiry_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['file_categories.id'], name='fk_file_category'),
    sa.PrimaryKeyConstraint('id', name='file_attachments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_file_attachments_public', 'file_attachments', ['is_public'], unique=False)
    op.create_index('idx_file_attachments_expiry', 'file_attachments', ['expiry_date'], unique=False)
    op.create_index('idx_file_attachments_entity', 'file_attachments', ['entity_type', 'entity_id'], unique=False)
    op.create_index('idx_file_attachments_category', 'file_attachments', ['category_id'], unique=False)
    op.create_table('appointments',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('appointments_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('calendar_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('appointment_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'scheduled'::character varying"), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('is_all_day', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_recurring', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('recurrence_rule', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reminder_before', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('reminder_before > 0 OR reminder_before IS NULL', name='chk_appointment_reminder'),
    sa.CheckConstraint('start_time < end_time', name='chk_appointment_times'),
    sa.ForeignKeyConstraint(['appointment_type_id'], ['appointment_types.id'], name='fk_appointment_type'),
    sa.ForeignKeyConstraint(['calendar_id'], ['calendars.id'], name='fk_appointment_calendar'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_appointment_customer'),
    sa.PrimaryKeyConstraint('id', name='appointments_pkey'),
    comment='Main appointment scheduling table',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_appointments_type', 'appointments', ['appointment_type_id'], unique=False)
    op.create_index('idx_appointments_status', 'appointments', ['status'], unique=False)
    op.create_index('idx_appointments_dates', 'appointments', ['start_time', 'end_time'], unique=False)
    op.create_index('idx_appointments_customer', 'appointments', ['customer_id'], unique=False)
    op.create_index('idx_appointments_calendar', 'appointments', ['calendar_id'], unique=False)
    op.create_table('api_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('api_key_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('endpoint_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('requests_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('success_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('error_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_duration', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('avg_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('min_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status_codes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_types', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['api_key_id'], ['api_keys.id'], name='fk_api_metric_key'),
    sa.ForeignKeyConstraint(['endpoint_id'], ['integration_endpoints.id'], name='fk_api_metric_endpoint'),
    sa.PrimaryKeyConstraint('id', name='api_metrics_pkey'),
    comment='API usage metrics'
    )
    op.create_index('idx_api_metrics_timestamp', 'api_metrics', ['timestamp'], unique=False)
    op.create_index('idx_api_metrics_key', 'api_metrics', ['api_key_id'], unique=False)
    op.create_index('idx_api_metrics_endpoint', 'api_metrics', ['endpoint_id'], unique=False)
    op.create_table('configuration_values',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('configuration_values_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('definition_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('environment', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('valid_from', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('valid_to', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['definition_id'], ['configuration_definitions.id'], name='configuration_values_definition_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='configuration_values_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_cfg_val_def', 'configuration_values', ['definition_id'], unique=False)
    op.create_table('ability_eligibility_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('customerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('customerinsuranceid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('requesttime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('requesttext', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('responsetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('responsetext', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('submissiontime', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('submissiontext', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='ability_eligibility_request_pkey')
    )
    op.create_table('template_categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('template_categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['template_categories.id'], name='fk_template_category_parent'),
    sa.PrimaryKeyConstraint('id', name='template_categories_pkey'),
    sa.UniqueConstraint('name', name='uq_template_category_name'),
    comment='Communication template categories',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_template_categories_parent', 'template_categories', ['parent_id'], unique=False)
    op.create_index('idx_template_categories_active', 'template_categories', ['is_active'], unique=False)
    op.create_table('preference_definitions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('preference_definitions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('default_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('possible_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_system_preference', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_user_configurable', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='preference_definitions_pkey'),
    sa.UniqueConstraint('category', 'name', name='uq_preference_definition_name'),
    comment='System and user preference definitions',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_preference_definitions_system', 'preference_definitions', ['is_system_preference'], unique=False)
    op.create_index('idx_preference_definitions_configurable', 'preference_definitions', ['is_user_configurable'], unique=False)
    op.create_index('idx_preference_definitions_category', 'preference_definitions', ['category'], unique=False)
    op.create_table('icd9_codes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='icd9_codes_pkey'),
    sa.UniqueConstraint('code', name='uq_icd9_code'),
    comment='ICD-9 diagnosis codes reference table'
    )
    op.create_index('idx_icd9_codes_code', 'icd9_codes', ['code'], unique=False)
    op.create_table('order_fulfillments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('fulfillment_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('shipping_package_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tracking_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='fk_order_fulfillment_order'),
    sa.ForeignKeyConstraint(['shipping_package_id'], ['shipping_packages.id'], name='fk_order_fulfillment_package'),
    sa.PrimaryKeyConstraint('id', name='order_fulfillments_pkey'),
    comment='Order fulfillment tracking'
    )
    op.create_index('idx_order_fulfillments_status', 'order_fulfillments', ['status'], unique=False)
    op.create_index('idx_order_fulfillments_package', 'order_fulfillments', ['shipping_package_id'], unique=False)
    op.create_index('idx_order_fulfillments_order', 'order_fulfillments', ['order_id'], unique=False)
    op.create_index('idx_order_fulfillments_date', 'order_fulfillments', ['fulfillment_date'], unique=False)
    op.create_table('availability_schedules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('schedule_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('day_of_week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('day_of_week >= 0 AND day_of_week <= 6', name='chk_availability_day'),
    sa.CheckConstraint('start_time < end_time', name='chk_availability_times'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_availability_user'),
    sa.PrimaryKeyConstraint('id', name='availability_schedules_pkey'),
    comment='Regular availability schedules'
    )
    op.create_index('idx_availability_schedules_user', 'availability_schedules', ['user_id'], unique=False)
    op.create_index('idx_availability_schedules_day', 'availability_schedules', ['day_of_week'], unique=False)
    op.create_table('changes',
    sa.Column('tablename', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('sessionid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('tablename', 'sessionid', name='changes_pkey')
    )
    op.create_table('icd_codes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('code_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('sub_category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_billable', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('effective_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("code_type::text = ANY (ARRAY['ICD-9'::character varying, 'ICD-10'::character varying]::text[])", name='chk_code_type'),
    sa.CheckConstraint('effective_date <= end_date OR end_date IS NULL', name='chk_icd_dates'),
    sa.PrimaryKeyConstraint('id', name='icd_codes_pkey'),
    sa.UniqueConstraint('code_type', 'code', name='uq_icd_code'),
    comment='ICD-9 and ICD-10 diagnosis codes'
    )
    op.create_index('idx_icd_codes_type', 'icd_codes', ['code_type'], unique=False)
    op.create_index('idx_icd_codes_dates', 'icd_codes', ['effective_date', 'end_date'], unique=False)
    op.create_index('idx_icd_codes_code', 'icd_codes', ['code'], unique=False)
    op.create_index('idx_icd_codes_category', 'icd_codes', ['category', 'sub_category'], unique=False)
    op.create_index('idx_icd_codes_billable', 'icd_codes', ['is_billable'], unique=False)
    op.create_table('product_categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('product_categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['product_categories.id'], name='fk_product_category_parent'),
    sa.PrimaryKeyConstraint('id', name='product_categories_pkey'),
    sa.UniqueConstraint('name', name='uq_product_category_name'),
    comment='Product category hierarchy',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_product_categories_parent', 'product_categories', ['parent_id'], unique=False)
    op.create_index('idx_product_categories_active', 'product_categories', ['is_active'], unique=False)
    op.create_table('delivery_stops',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('delivery_stops_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('route_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('package_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stop_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('planned_arrival_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('actual_arrival_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('planned_departure_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('actual_departure_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('signature_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('signature_image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('photo_proof', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('planned_arrival_time < planned_departure_time AND (actual_arrival_time IS NULL OR actual_departure_time IS NULL OR actual_arrival_time < actual_departure_time)', name='chk_delivery_stop_times'),
    sa.ForeignKeyConstraint(['package_id'], ['shipping_packages.id'], name='fk_delivery_stop_package'),
    sa.ForeignKeyConstraint(['route_id'], ['delivery_routes.id'], name='fk_delivery_stop_route'),
    sa.PrimaryKeyConstraint('id', name='delivery_stops_pkey'),
    comment='Individual stops on delivery routes',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_delivery_stops_times', 'delivery_stops', ['planned_arrival_time', 'actual_arrival_time'], unique=False)
    op.create_index('idx_delivery_stops_status', 'delivery_stops', ['status'], unique=False)
    op.create_index('idx_delivery_stops_route', 'delivery_stops', ['route_id'], unique=False)
    op.create_index('idx_delivery_stops_package', 'delivery_stops', ['package_id'], unique=False)
    op.create_table('customer_orders',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('customer_order_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('customerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('orderdate', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('statusid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('shippingaddressid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('billingaddressid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('subtotal', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('taxamount', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('totalamount', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['billingaddressid'], ['customer_address.id'], name='fk_customer_order_billing_address'),
    sa.ForeignKeyConstraint(['shippingaddressid'], ['customer_address.id'], name='fk_customer_order_shipping_address'),
    sa.ForeignKeyConstraint(['statusid'], ['order_status.id'], name='fk_customer_order_status'),
    sa.PrimaryKeyConstraint('id', name='customer_order_pkey'),
    comment='Customer orders',
    postgresql_ignore_search_path=False
    )
    op.create_table('payment_allocations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('payment_transaction_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('invoice_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('allocation_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('amount > 0::numeric', name='chk_payment_allocation_amount'),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoice_forms.id'], name='fk_payment_allocation_invoice'),
    sa.ForeignKeyConstraint(['payment_transaction_id'], ['payment_transactions.id'], name='fk_payment_allocation_transaction'),
    sa.PrimaryKeyConstraint('id', name='payment_allocations_pkey'),
    comment='Payment to invoice allocations'
    )
    op.create_index('idx_payment_allocations_transaction', 'payment_allocations', ['payment_transaction_id'], unique=False)
    op.create_index('idx_payment_allocations_invoice', 'payment_allocations', ['invoice_id'], unique=False)
    op.create_index('idx_payment_allocations_date', 'payment_allocations', ['allocation_date'], unique=False)
    op.create_table('variable_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('value_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('old_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('new_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('change_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('changed_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('change_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['value_id'], ['variable_values.id'], name='variable_history_value_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='variable_history_pkey')
    )
    op.create_index('idx_var_hist_val', 'variable_history', ['value_id'], unique=False)
    op.create_table('cmn_form_fields',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('section_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('field_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('field_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('label', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('default_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("field_type::text = ANY (ARRAY['text'::character varying, 'number'::character varying, 'date'::character varying, 'boolean'::character varying, 'select'::character varying, 'multi-select'::character varying, 'radio'::character varying, 'checkbox'::character varying]::text[])", name='chk_field_type'),
    sa.ForeignKeyConstraint(['section_id'], ['cmn_form_sections.id'], name='fk_cmn_field_section'),
    sa.PrimaryKeyConstraint('id', name='cmn_form_fields_pkey'),
    sa.UniqueConstraint('section_id', 'field_name', name='uq_cmn_field'),
    comment='Field definitions for CMN form sections'
    )
    op.create_index('idx_cmn_fields_type', 'cmn_form_fields', ['field_type'], unique=False)
    op.create_index('idx_cmn_fields_section', 'cmn_form_fields', ['section_id'], unique=False)
    op.create_index('idx_cmn_fields_order', 'cmn_form_fields', ['display_order'], unique=False)
    op.create_index('idx_cmn_fields_active', 'cmn_form_fields', ['is_active'], unique=False)
    op.create_table('order_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('workflow_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('requires_approval', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('auto_fulfill', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='order_types_pkey'),
    sa.UniqueConstraint('name', name='uq_order_type_name'),
    comment='Order type configurations'
    )
    op.create_index('idx_order_types_workflow', 'order_types', ['workflow_type'], unique=False)
    op.create_index('idx_order_types_active', 'order_types', ['is_active'], unique=False)
    op.create_table('cmn_forms_0404c',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0404c'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0404c_pkey'),
    comment='CMN Form Type 04.04 Part C'
    )
    op.create_index('idx_cmn_forms_0404c_medical', 'cmn_forms_0404c', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0404c_customer', 'cmn_forms_0404c', ['customer_id'], unique=False)
    op.create_table('deposit_details',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('deposit_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('payment_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('payment_reference', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("payment_type::text = ANY (ARRAY['cash'::character varying, 'check'::character varying, 'credit_card'::character varying, 'ach'::character varying, 'other'::character varying]::text[])", name='chk_payment_type'),
    sa.ForeignKeyConstraint(['deposit_id'], ['deposits.id'], name='fk_deposit_detail_deposit'),
    sa.PrimaryKeyConstraint('id', name='deposit_details_pkey')
    )
    op.create_index('idx_deposit_details_type', 'deposit_details', ['payment_type'], unique=False)
    op.create_index('idx_deposit_details_deposit', 'deposit_details', ['deposit_id'], unique=False)
    op.create_table('payers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('insurance_group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('payer_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('payer_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('npi', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('tax_id', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('contact_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('contact_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('contact_email', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("npi::text ~ '^\\d{10}$'::text OR npi IS NULL", name='chk_payer_npi'),
    sa.ForeignKeyConstraint(['insurance_group_id'], ['insurance_company_groups.id'], name='fk_payer_insurance_group'),
    sa.PrimaryKeyConstraint('id', name='payers_pkey'),
    comment='Insurance payers and their identification details'
    )
    op.create_index('idx_payers_name', 'payers', ['name'], unique=False)
    op.create_index('idx_payers_insurance_group', 'payers', ['insurance_group_id'], unique=False)
    op.create_index('idx_payers_ids', 'payers', ['payer_id', 'npi', 'tax_id'], unique=False)
    op.create_table('claim_status_histories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('claim_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('DRAFT', 'READY', 'SUBMITTED', 'ACCEPTED', 'REJECTED', 'PAID', 'DENIED', 'APPEALED', name='claimstatus'), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['claim_id'], ['claims.id'], name='claim_status_history_claim_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='claim_status_history_pkey')
    )
    op.create_table('configuration_settings',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('configuration_setting_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('categoryid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('datatype', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isencrypted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('isreadonly', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['categoryid'], ['configuration_categories.id'], name='fk_configuration_setting_category'),
    sa.PrimaryKeyConstraint('id', name='configuration_setting_pkey'),
    comment='System configuration settings',
    postgresql_ignore_search_path=False
    )
    op.create_table('customer_address',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('customer_address_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('customerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('addresstype', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('address1', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('address2', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('state', sa.VARCHAR(length=2), autoincrement=False, nullable=False),
    sa.Column('zipcode', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('isprimary', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='customer_address_pkey'),
    comment='Customer shipping and billing addresses',
    postgresql_ignore_search_path=False
    )
    op.create_table('workflow_actions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('workflow_actions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('workflow_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('action_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('target_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('target_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timeout', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('sequence_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('error_handling', sa.VARCHAR(length=20), server_default=sa.text("'stop'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_async', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("error_handling::text = ANY (ARRAY['stop'::character varying, 'continue'::character varying, 'retry'::character varying, 'skip'::character varying]::text[])", name='chk_workflow_action_error'),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflow_definitions.id'], name='fk_workflow_action_workflow'),
    sa.PrimaryKeyConstraint('id', name='workflow_actions_pkey'),
    sa.UniqueConstraint('workflow_id', 'sequence_order', name='uq_workflow_action_order'),
    comment='Workflow action steps',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_workflow_actions_workflow', 'workflow_actions', ['workflow_id'], unique=False)
    op.create_index('idx_workflow_actions_type', 'workflow_actions', ['action_type'], unique=False)
    op.create_index('idx_workflow_actions_target', 'workflow_actions', ['target_type', 'target_id'], unique=False)
    op.create_index('idx_workflow_actions_order', 'workflow_actions', ['sequence_order'], unique=False)
    op.create_table('compliance_notes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('compliance_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('note_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('note_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_internal', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['compliance_id'], ['compliance.id'], name='fk_compliance_note'),
    sa.PrimaryKeyConstraint('id', name='compliance_notes_pkey'),
    comment='Notes and documentation related to compliance records'
    )
    op.create_index('idx_compliance_notes_type', 'compliance_notes', ['note_type'], unique=False)
    op.create_index('idx_compliance_notes_compliance', 'compliance_notes', ['compliance_id'], unique=False)
    op.create_table('employee_schedules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('employeeid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dayofweek', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('starttime', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('endtime', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='employee_schedule_pkey'),
    comment='Employee work schedules'
    )
    op.create_table('api_keys',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('api_keys_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('key_identifier', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('key_secret', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('rate_limit', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rate_limit_period', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('ip_whitelist', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('valid_from', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('valid_until', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('valid_from < valid_until OR valid_until IS NULL', name='chk_api_key_dates'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='fk_api_key_owner'),
    sa.PrimaryKeyConstraint('id', name='api_keys_pkey'),
    sa.UniqueConstraint('key_identifier', name='api_keys_key_identifier_key'),
    comment='API key management',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_api_keys_owner', 'api_keys', ['owner_id'], unique=False)
    op.create_index('idx_api_keys_identifier', 'api_keys', ['key_identifier'], unique=False)
    op.create_index('idx_api_keys_dates', 'api_keys', ['valid_from', 'valid_until'], unique=False)
    op.create_index('idx_api_keys_active', 'api_keys', ['is_active'], unique=False)
    op.create_table('integration_schedules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('endpointid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cronexpression', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('lastruntime', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('nextruntime', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='integration_schedule_pkey'),
    comment='Scheduled integration jobs'
    )
    op.create_table('order_trackings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('orderid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('statusid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createduserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('createddatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['orderid'], ['customer_orders.id'], name='fk_order_tracking_order'),
    sa.ForeignKeyConstraint(['statusid'], ['order_status.id'], name='fk_order_tracking_status'),
    sa.PrimaryKeyConstraint('id', name='order_tracking_pkey'),
    comment='Order status history'
    )
    op.create_table('shipping_carriers',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('shipping_carriers_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('account_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('api_key', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('api_secret', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='shipping_carriers_pkey'),
    sa.UniqueConstraint('name', name='uq_shipping_carrier_name'),
    comment='Shipping carrier configurations',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_shipping_carriers_active', 'shipping_carriers', ['is_active'], unique=False)
    op.create_table('file_categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('file_categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('allowed_extensions', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('max_file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retention_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['file_categories.id'], name='fk_file_category_parent'),
    sa.PrimaryKeyConstraint('id', name='file_categories_pkey'),
    sa.UniqueConstraint('name', name='uq_file_category_name'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_file_categories_parent', 'file_categories', ['parent_id'], unique=False)
    op.create_index('idx_file_categories_name', 'file_categories', ['name'], unique=False)
    op.create_table('table_rename_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('schema_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('old_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('new_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('validation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='table_rename_log_pkey')
    )
    op.create_table('audit_field_changes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('audit_log_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('field_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('old_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('new_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('change_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['audit_log_id'], ['audit_logs.id'], name='fk_audit_field_log'),
    sa.PrimaryKeyConstraint('id', name='audit_field_changes_pkey'),
    comment='Detailed field-level changes'
    )
    op.create_index('idx_audit_field_changes_log', 'audit_field_changes', ['audit_log_id'], unique=False)
    op.create_index('idx_audit_field_changes_field', 'audit_field_changes', ['field_name'], unique=False)
    op.create_table('workflow_conditions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workflow_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('condition_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('operator', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('field_path', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('expected_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('custom_logic', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sequence_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("operator::text = ANY (ARRAY['equals'::character varying, 'not_equals'::character varying, 'greater_than'::character varying, 'less_than'::character varying, 'contains'::character varying, 'not_contains'::character varying, 'in'::character varying, 'not_in'::character varying, 'exists'::character varying, 'not_exists'::character varying]::text[])", name='chk_workflow_condition_operator'),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflow_definitions.id'], name='fk_workflow_condition_workflow'),
    sa.PrimaryKeyConstraint('id', name='workflow_conditions_pkey'),
    sa.UniqueConstraint('workflow_id', 'sequence_order', name='uq_workflow_condition_order'),
    comment='Workflow conditional logic'
    )
    op.create_index('idx_workflow_conditions_workflow', 'workflow_conditions', ['workflow_id'], unique=False)
    op.create_index('idx_workflow_conditions_type', 'workflow_conditions', ['condition_type'], unique=False)
    op.create_index('idx_workflow_conditions_order', 'workflow_conditions', ['sequence_order'], unique=False)
    op.create_table('denial_reasons',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('denial_reasons_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='denial_reasons_pkey'),
    sa.UniqueConstraint('code', name='uq_denial_reason_code'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_denial_reasons_code', 'denial_reasons', ['code'], unique=False)
    op.create_index('idx_denial_reasons_category', 'denial_reasons', ['category'], unique=False)
    op.create_index('idx_denial_reasons_active', 'denial_reasons', ['is_active'], unique=False)
    op.create_table('setting_values',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('setting_values_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('definition_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('valid_from', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('valid_to', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['definition_id'], ['setting_definitions.id'], name='setting_values_definition_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='setting_values_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_set_val_def', 'setting_values', ['definition_id'], unique=False)
    op.create_table('vendors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('company_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tax_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('contact_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('address_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('payment_terms', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('credit_limit', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['active'::character varying, 'inactive'::character varying, 'pending'::character varying, 'suspended'::character varying]::text[])", name='chk_vendor_status'),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='chk_vendor_rating'),
    sa.ForeignKeyConstraint(['address_id'], ['addresses.id'], name='fk_vendor_address'),
    sa.ForeignKeyConstraint(['company_type_id'], ['company_types.id'], name='fk_vendor_company_type'),
    sa.PrimaryKeyConstraint('id', name='vendors_pkey'),
    sa.UniqueConstraint('name', name='uq_vendor_name'),
    comment='Vendor and supplier management'
    )
    op.create_index('idx_vendors_type', 'vendors', ['company_type_id'], unique=False)
    op.create_index('idx_vendors_status', 'vendors', ['status'], unique=False)
    op.create_table('order_status_histories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'APPROVED', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED', 'ON_HOLD', name='orderstatus'), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='order_status_history_pkey')
    )
    op.create_table('customer_notes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('customerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('notetype', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('notetext', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createduserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('createddatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='customer_note_pkey'),
    comment='Customer-related notes and comments'
    )
    op.create_table('cmn_forms_0702a',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0702a'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0702a_pkey'),
    comment='CMN Form Type 07.02 Part A'
    )
    op.create_index('idx_cmn_forms_0702a_medical', 'cmn_forms_0702a', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0702a_customer', 'cmn_forms_0702a', ['customer_id'], unique=False)
    op.create_table('feedback_categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('feedback_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='feedback_category_pkey'),
    comment='Categories for customer feedback',
    postgresql_ignore_search_path=False
    )
    op.create_table('communication_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('notificationid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('communicationtype', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('recipienttype', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('recipientid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('subject', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createddatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['notificationid'], ['notifications.id'], name='fk_communication_log_notification'),
    sa.PrimaryKeyConstraint('id', name='communication_log_pkey'),
    comment='Communication history log'
    )
    op.create_table('integration_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('endpointid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('direction', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('requestdata', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('responsedata', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('statuscode', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('errormessage', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('starttime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('endtime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='integration_log_pkey'),
    comment='Integration execution history'
    )
    op.create_table('price_codes',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('price_codes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('calculation_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('markup_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('discount_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("calculation_method::text = ANY (ARRAY['fixed'::character varying, 'markup'::character varying, 'discount'::character varying, 'custom'::character varying]::text[])", name='chk_calculation_method'),
    sa.PrimaryKeyConstraint('id', name='price_codes_pkey'),
    sa.UniqueConstraint('code', name='uq_price_code'),
    comment='Price code and calculation methods',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_price_codes_active', 'price_codes', ['is_active'], unique=False)
    op.create_table('cmn_forms_0903',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0903'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0903_pkey'),
    comment='CMN Form Type 09.03'
    )
    op.create_index('idx_cmn_forms_0903_medical', 'cmn_forms_0903', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0903_customer', 'cmn_forms_0903', ['customer_id'], unique=False)
    op.create_table('globals',
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name='tbl_globals_pkey'),
    comment='Stores global system settings'
    )
    op.create_table('integration_endpoints',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('integration_endpoints_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('connection_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('endpoint_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('method', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('url_pattern', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('request_template', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_template', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('headers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timeout', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retry_policy', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('rate_limit', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rate_limit_period', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("method::text = ANY (ARRAY['GET'::character varying, 'POST'::character varying, 'PUT'::character varying, 'DELETE'::character varying, 'PATCH'::character varying]::text[])", name='chk_integration_endpoint_method'),
    sa.ForeignKeyConstraint(['connection_id'], ['integration_connections.id'], name='fk_integration_endpoint_connection'),
    sa.PrimaryKeyConstraint('id', name='integration_endpoints_pkey'),
    sa.UniqueConstraint('connection_id', 'name', name='uq_integration_endpoint_name'),
    comment='Integration endpoint definitions',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_integration_endpoints_type', 'integration_endpoints', ['endpoint_type'], unique=False)
    op.create_index('idx_integration_endpoints_method', 'integration_endpoints', ['method'], unique=False)
    op.create_index('idx_integration_endpoints_connection', 'integration_endpoints', ['connection_id'], unique=False)
    op.create_index('idx_integration_endpoints_active', 'integration_endpoints', ['is_active'], unique=False)
    op.create_table('widget_instances',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('dashboard_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('widget_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('instance_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('position_x', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('position_y', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('width', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('height', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('refresh_interval', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_minimized', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('position_x >= 0 AND position_y >= 0', name='chk_widget_instance_position'),
    sa.CheckConstraint('refresh_interval IS NULL OR refresh_interval > 0', name='chk_widget_instance_refresh'),
    sa.CheckConstraint('width > 0 AND height > 0', name='chk_widget_instance_size'),
    sa.ForeignKeyConstraint(['dashboard_id'], ['user_dashboards.id'], name='fk_widget_instance_dashboard'),
    sa.ForeignKeyConstraint(['widget_id'], ['dashboard_widgets.id'], name='fk_widget_instance_widget'),
    sa.PrimaryKeyConstraint('id', name='widget_instances_pkey'),
    comment='Dashboard widget instances'
    )
    op.create_index('idx_widget_instances_widget', 'widget_instances', ['widget_id'], unique=False)
    op.create_index('idx_widget_instances_dashboard', 'widget_instances', ['dashboard_id'], unique=False)
    op.create_table('insurance_claims',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('insurance_claims_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('policy_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('claim_number', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('service_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('filing_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('diagnosis_codes', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('procedure_codes', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('claim_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('approved_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('paid_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'submitted'::character varying"), autoincrement=False, nullable=True),
    sa.Column('adjudication_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['draft'::character varying, 'submitted'::character varying, 'pending'::character varying, 'approved'::character varying, 'paid'::character varying, 'denied'::character varying, 'appealed'::character varying]::text[])", name='chk_claim_status'),
    sa.ForeignKeyConstraint(['policy_id'], ['insurance_policies.id'], name='fk_claim_policy'),
    sa.PrimaryKeyConstraint('id', name='insurance_claims_pkey'),
    sa.UniqueConstraint('claim_number', name='uq_claim_number'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_insurance_claims_status', 'insurance_claims', ['status'], unique=False)
    op.create_index('idx_insurance_claims_policy', 'insurance_claims', ['policy_id'], unique=False)
    op.create_index('idx_insurance_claims_number', 'insurance_claims', ['claim_number'], unique=False)
    op.create_index('idx_insurance_claims_dates', 'insurance_claims', ['service_date', 'filing_date'], unique=False)
    op.create_table('insurance_company_groups',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('insurance_company_groups_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parent_group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_group_id'], ['insurance_company_groups.id'], name='fk_insurance_group_parent'),
    sa.PrimaryKeyConstraint('id', name='insurance_company_groups_pkey'),
    comment='Groups of insurance companies with hierarchical structure',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_insurance_groups_parent', 'insurance_company_groups', ['parent_group_id'], unique=False)
    op.create_index('idx_insurance_groups_name', 'insurance_company_groups', ['name'], unique=False)
    op.create_table('product_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('field_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('old_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('new_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('change_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('change_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("change_type::text = ANY (ARRAY['create'::character varying, 'update'::character varying, 'delete'::character varying, 'restore'::character varying]::text[])", name='chk_change_type'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='fk_product_history_product'),
    sa.PrimaryKeyConstraint('id', name='product_history_pkey'),
    comment='Product change history'
    )
    op.create_index('idx_product_history_product', 'product_history', ['product_id'], unique=False)
    op.create_index('idx_product_history_field', 'product_history', ['field_name'], unique=False)
    op.create_index('idx_product_history_change', 'product_history', ['change_type'], unique=False)
    op.create_table('insurance_payers',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('insurance_payers_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('payer_code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('contact_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('billing_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='insurance_payers_pkey'),
    sa.UniqueConstraint('payer_code', name='uq_payer_code'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_insurance_payers_code', 'insurance_payers', ['payer_code'], unique=False)
    op.create_index('idx_insurance_payers_active', 'insurance_payers', ['is_active'], unique=False)
    op.create_table('report_executions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('report_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('execution_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('output_format', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('output_size', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('output_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('row_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('execution_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('start_time <= end_time OR end_time IS NULL', name='chk_report_execution_time'),
    sa.ForeignKeyConstraint(['report_id'], ['report_definitions.id'], name='fk_report_execution_report'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_report_execution_user'),
    sa.PrimaryKeyConstraint('id', name='report_executions_pkey'),
    sa.UniqueConstraint('execution_id', name='report_executions_execution_id_key'),
    comment='Report execution history'
    )
    op.create_index('idx_report_executions_user', 'report_executions', ['user_id'], unique=False)
    op.create_index('idx_report_executions_status', 'report_executions', ['status'], unique=False)
    op.create_index('idx_report_executions_report', 'report_executions', ['report_id'], unique=False)
    op.create_index('idx_report_executions_dates', 'report_executions', ['start_time', 'end_time'], unique=False)
    op.create_table('billing_cycles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('billing_cycles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('frequency_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('frequency_interval', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("(frequency_type::text = ANY (ARRAY['daily'::character varying, 'weekly'::character varying, 'monthly'::character varying, 'yearly'::character varying]::text[])) AND frequency_interval > 0", name='chk_billing_cycle_frequency'),
    sa.PrimaryKeyConstraint('id', name='billing_cycles_pkey'),
    sa.UniqueConstraint('name', name='uq_billing_cycle_name'),
    comment='Billing cycle configurations',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_billing_cycles_frequency', 'billing_cycles', ['frequency_type', 'frequency_interval'], unique=False)
    op.create_index('idx_billing_cycles_active', 'billing_cycles', ['is_active'], unique=False)
    op.create_table('system_settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('setting_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('setting_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('setting_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_encrypted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='system_settings_pkey'),
    sa.UniqueConstraint('setting_key', name='uq_setting_key'),
    comment='System-wide configuration settings'
    )
    op.create_index('idx_system_settings_key', 'system_settings', ['setting_key'], unique=False)
    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('templateid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recipienttype', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('recipientid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('subject', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'Pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('sentattempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('lasterror', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createddatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('sentdatetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['templateid'], ['notification_templates.id'], name='fk_notification_template'),
    sa.PrimaryKeyConstraint('id', name='notification_pkey'),
    comment='System notifications'
    )
    op.create_table('availability_exceptions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exception_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('is_unavailable', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('reason', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('start_time IS NULL AND end_time IS NULL OR start_time < end_time', name='chk_exception_times'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_exception_user'),
    sa.PrimaryKeyConstraint('id', name='availability_exceptions_pkey'),
    comment='Exceptions to regular availability'
    )
    op.create_index('idx_availability_exceptions_user', 'availability_exceptions', ['user_id'], unique=False)
    op.create_index('idx_availability_exceptions_date', 'availability_exceptions', ['exception_date'], unique=False)
    op.create_table('batch_status',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('batchid', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdat', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='batch_status_pkey')
    )
    op.create_table('cmn_forms_0403c',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0403c'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0403c_pkey'),
    comment='CMN Form Type 04.03 Part C'
    )
    op.create_index('idx_cmn_forms_0403c_medical', 'cmn_forms_0403c', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0403c_customer', 'cmn_forms_0403c', ['customer_id'], unique=False)
    op.create_table('invoice_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('invoiceid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('itemtype', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('itemid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('unitprice', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('discount', sa.NUMERIC(precision=18, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('taxrate', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('total', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['invoiceid'], ['invoices.id'], name='fk_invoice_item_invoice'),
    sa.PrimaryKeyConstraint('id', name='invoice_item_pkey'),
    comment='Individual line items in invoices'
    )
    op.create_table('user_dashboards',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('layout_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_system_dashboard', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_user_dashboard_user'),
    sa.PrimaryKeyConstraint('id', name='user_dashboards_pkey'),
    sa.UniqueConstraint('user_id', 'name', name='uq_user_dashboard_name'),
    comment='User dashboard configurations'
    )
    op.create_index('idx_user_dashboards_user', 'user_dashboards', ['user_id'], unique=False)
    op.create_index('idx_user_dashboards_system', 'user_dashboards', ['is_system_dashboard'], unique=False)
    op.create_index('idx_user_dashboards_default', 'user_dashboards', ['is_default'], unique=False)
    op.create_table('batches',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('region', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('company', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('workflow', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('filename', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('filetype', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('createddate', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('statusdate', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('archived', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tbl_batches_pkey'),
    comment='Stores batch processing information'
    )
    op.create_table('maintenance_checklists',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('maintenance_checklist_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('equipmenttypeid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['equipmenttypeid'], ['equipment_types.id'], name='fk_maintenance_checklist_equipment_type'),
    sa.PrimaryKeyConstraint('id', name='maintenance_checklist_pkey'),
    comment='Maintenance checklists by equipment type',
    postgresql_ignore_search_path=False
    )
    op.create_table('task_comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comment_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_internal', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('parent_comment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_comment_id'], ['task_comments.id'], name='fk_task_comment_parent'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='fk_task_comment_task'),
    sa.PrimaryKeyConstraint('id', name='task_comments_pkey'),
    comment='Comments and discussions on tasks'
    )
    op.create_index('idx_task_comments_task', 'task_comments', ['task_id'], unique=False)
    op.create_index('idx_task_comments_parent', 'task_comments', ['parent_comment_id'], unique=False)
    op.create_table('cmn_forms_0902',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0902'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0902_pkey'),
    comment='CMN Form Type 09.02'
    )
    op.create_index('idx_cmn_forms_0902_medical', 'cmn_forms_0902', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0902_customer', 'cmn_forms_0902', ['customer_id'], unique=False)
    op.create_table('price_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price_code_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('old_price', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('new_price', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('change_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('effective_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('effective_date <= end_date OR end_date IS NULL', name='chk_price_dates'),
    sa.ForeignKeyConstraint(['price_code_id'], ['price_codes.id'], name='fk_price_history_code'),
    sa.PrimaryKeyConstraint('id', name='price_history_pkey'),
    comment='Historical price changes'
    )
    op.create_index('idx_price_history_entity', 'price_history', ['entity_type', 'entity_id'], unique=False)
    op.create_index('idx_price_history_dates', 'price_history', ['effective_date', 'end_date'], unique=False)
    op.create_table('document_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('document_type_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retentionperiod', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('isrequired', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='document_type_pkey'),
    comment='Types of documents that can be stored',
    postgresql_ignore_search_path=False
    )
    op.create_table('compliance_checklists',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('compliance_checklist_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('frequency', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='compliance_checklist_pkey'),
    comment='Compliance checklists for audits',
    postgresql_ignore_search_path=False
    )
    op.create_table('insurance_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('insurance_types_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('coverage_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_primary', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='insurance_types_pkey'),
    comment='Types of insurance coverage available',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_insurance_types_name', 'insurance_types', ['name'], unique=False)
    op.create_index('idx_insurance_types_coverage', 'insurance_types', ['coverage_type'], unique=False)
    op.create_table('eligibility_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('insurance_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('request_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('service_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('response_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_eligible', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('coverage_start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('coverage_end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('benefit_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('request_date <= response_date OR response_date IS NULL', name='chk_eligibility_dates'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_eligibility_customer'),
    sa.ForeignKeyConstraint(['insurance_id'], ['insurance_types.id'], name='fk_eligibility_insurance'),
    sa.PrimaryKeyConstraint('id', name='eligibility_requests_pkey'),
    comment='Insurance eligibility verification requests and responses'
    )
    op.create_index('idx_eligibility_status', 'eligibility_requests', ['status'], unique=False)
    op.create_index('idx_eligibility_insurance', 'eligibility_requests', ['insurance_id'], unique=False)
    op.create_index('idx_eligibility_dates', 'eligibility_requests', ['request_date', 'response_date'], unique=False)
    op.create_index('idx_eligibility_customer', 'eligibility_requests', ['customer_id'], unique=False)
    op.create_index('idx_eligibility_coverage', 'eligibility_requests', ['coverage_start_date', 'coverage_end_date'], unique=False)
    op.create_table('kb_article_feedbacks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('articleid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('userid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('submissiondate', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['articleid'], ['kb_articles.id'], name='fk_kb_article_feedback_article'),
    sa.PrimaryKeyConstraint('id', name='kb_article_feedback_pkey'),
    comment='Feedback on knowledge base articles'
    )
    op.create_table('compliance_checklist_items',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('compliance_checklist_item_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('checklistid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('itemtext', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('isrequired', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('ordinal', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['checklistid'], ['compliance_checklists.id'], name='fk_compliance_checklist_item_checklist'),
    sa.PrimaryKeyConstraint('id', name='compliance_checklist_item_pkey'),
    comment='Individual items in compliance checklists',
    postgresql_ignore_search_path=False
    )
    op.create_table('environment_settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('environment', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('setting_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('setting_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_encrypted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_editable', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("data_type::text = ANY (ARRAY['string'::character varying, 'number'::character varying, 'boolean'::character varying, 'json'::character varying, 'array'::character varying]::text[])", name='chk_environment_setting_type'),
    sa.PrimaryKeyConstraint('id', name='environment_settings_pkey'),
    sa.UniqueConstraint('environment', 'category', 'setting_key', name='uq_environment_setting'),
    comment='Environment-specific configuration settings'
    )
    op.create_index('idx_environment_settings_env', 'environment_settings', ['environment'], unique=False)
    op.create_index('idx_environment_settings_editable', 'environment_settings', ['is_editable'], unique=False)
    op.create_index('idx_environment_settings_category', 'environment_settings', ['category'], unique=False)
    op.create_table('task_dependencies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dependent_task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dependency_type', sa.VARCHAR(length=20), server_default=sa.text("'finish_to_start'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("dependency_type::text = ANY (ARRAY['finish_to_start'::character varying, 'start_to_start'::character varying, 'finish_to_finish'::character varying, 'start_to_finish'::character varying]::text[])", name='chk_task_dependency_type'),
    sa.ForeignKeyConstraint(['dependent_task_id'], ['tasks.id'], name='fk_task_dependency_dependent'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='fk_task_dependency_task'),
    sa.PrimaryKeyConstraint('id', name='task_dependencies_pkey'),
    comment='Dependencies between tasks'
    )
    op.create_index('idx_task_dependencies_type', 'task_dependencies', ['dependency_type'], unique=False)
    op.create_index('idx_task_dependencies_task', 'task_dependencies', ['task_id'], unique=False)
    op.create_index('idx_task_dependencies_dependent', 'task_dependencies', ['dependent_task_id'], unique=False)
    op.create_table('configuration_definitions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('configuration_definitions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('config_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('module', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('default_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_system', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_sensitive', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("data_type::text = ANY (ARRAY['string'::character varying, 'number'::character varying, 'boolean'::character varying, 'date'::character varying, 'json'::character varying, 'array'::character varying]::text[])", name='chk_config_type'),
    sa.PrimaryKeyConstraint('id', name='configuration_definitions_pkey'),
    sa.UniqueConstraint('config_name', name='configuration_definitions_config_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_cfg_def_name', 'configuration_definitions', ['config_name'], unique=False)
    op.create_table('locations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('address_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('manager_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('operating_hours', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('capacity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("type::text = ANY (ARRAY['warehouse'::character varying, 'office'::character varying, 'retail'::character varying, 'distribution'::character varying, 'storage'::character varying]::text[])", name='chk_location_type'),
    sa.ForeignKeyConstraint(['address_id'], ['addresses.id'], name='fk_location_address'),
    sa.ForeignKeyConstraint(['manager_id'], ['employees.id'], name='fk_location_manager'),
    sa.ForeignKeyConstraint(['parent_id'], ['locations.id'], name='fk_location_parent'),
    sa.PrimaryKeyConstraint('id', name='locations_pkey'),
    sa.UniqueConstraint('name', name='uq_location_name'),
    comment='Physical location and facility management'
    )
    op.create_index('idx_locations_type', 'locations', ['type'], unique=False)
    op.create_index('idx_locations_parent', 'locations', ['parent_id'], unique=False)
    op.create_index('idx_locations_manager', 'locations', ['manager_id'], unique=False)
    op.create_index('idx_locations_active', 'locations', ['is_active'], unique=False)
    op.create_table('template_versions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('template_versions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('template_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('version_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('subject_template', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('body_template', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('published_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('published_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['template_id'], ['communication_templates.id'], name='fk_template_version_template'),
    sa.PrimaryKeyConstraint('id', name='template_versions_pkey'),
    sa.UniqueConstraint('template_id', 'version_number', name='uq_template_version'),
    comment='Version history for communication templates',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_template_versions_template', 'template_versions', ['template_id'], unique=False)
    op.create_index('idx_template_versions_published', 'template_versions', ['published_at'], unique=False)
    op.create_index('idx_template_versions_active', 'template_versions', ['is_active'], unique=False)
    op.create_table('email_templates',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('email_templates_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('template_code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('subject', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('body_html', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('body_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='email_templates_pkey'),
    sa.UniqueConstraint('template_code', name='uq_email_template_code'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_email_templates_code', 'email_templates', ['template_code'], unique=False)
    op.create_index('idx_email_templates_active', 'email_templates', ['is_active'], unique=False)
    op.create_table('denials',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('denials_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('insurance_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('claim_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('denial_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('denial_reason', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('denial_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('amount_denied', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'new'::character varying"), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('appeal_deadline', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('appeal_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('appeal_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('resolution_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('resolution_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('amount_denied >= 0::numeric', name='chk_denial_amount'),
    sa.CheckConstraint('denial_date <= appeal_deadline OR appeal_deadline IS NULL', name='chk_denial_dates'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_denial_customer'),
    sa.ForeignKeyConstraint(['insurance_id'], ['insurance_types.id'], name='fk_denial_insurance'),
    sa.PrimaryKeyConstraint('id', name='denials_pkey'),
    comment='Insurance claim denials tracking',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_denials_status', 'denials', ['status'], unique=False)
    op.create_index('idx_denials_insurance', 'denials', ['insurance_id'], unique=False)
    op.create_index('idx_denials_dates', 'denials', ['denial_date', 'appeal_deadline', 'resolution_date'], unique=False)
    op.create_index('idx_denials_customer', 'denials', ['customer_id'], unique=False)
    op.create_index('idx_denials_claim', 'denials', ['claim_number'], unique=False)
    op.create_index('idx_denials_appeal', 'denials', ['appeal_status'], unique=False)
    op.create_table('service_histories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('servicerequestid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('actiondate', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('actiontype', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('technicianid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hours', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('parts', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cost', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['servicerequestid'], ['service_requests.id'], name='fk_service_history_service_request'),
    sa.PrimaryKeyConstraint('id', name='service_history_pkey'),
    comment='Service request history and actions'
    )
    op.create_table('task_time_entries',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_billable', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('billing_rate', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('end_time IS NULL AND duration IS NULL OR end_time IS NOT NULL AND duration > 0', name='chk_task_time_duration'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='fk_task_time_task'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_task_time_user'),
    sa.PrimaryKeyConstraint('id', name='task_time_entries_pkey'),
    comment='Time tracking for tasks'
    )
    op.create_index('idx_task_time_entries_user', 'task_time_entries', ['user_id'], unique=False)
    op.create_index('idx_task_time_entries_task', 'task_time_entries', ['task_id'], unique=False)
    op.create_index('idx_task_time_entries_dates', 'task_time_entries', ['start_time', 'end_time'], unique=False)
    op.create_table('customer_contacts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('customerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('contacttype', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('contactvalue', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('isprimary', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='customer_contact_pkey'),
    comment='Customer contact information (phone, email, etc)'
    )
    op.create_table('task_priorities',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sla_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('color_code', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='task_priority_pkey'),
    comment='Priority levels for tasks'
    )
    op.create_table('message_attachments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('message_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('storage_path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_inline', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('content_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['message_id'], ['message_queue.id'], name='fk_message_attachment_message'),
    sa.PrimaryKeyConstraint('id', name='message_attachments_pkey'),
    comment='Message attachment information'
    )
    op.create_index('idx_message_attachments_type', 'message_attachments', ['file_type'], unique=False)
    op.create_index('idx_message_attachments_message', 'message_attachments', ['message_id'], unique=False)
    op.create_table('setting_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('value_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('old_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('new_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('change_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('changed_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('change_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['value_id'], ['setting_values.id'], name='setting_history_value_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='setting_history_pkey')
    )
    op.create_index('idx_set_hist_val', 'setting_history', ['value_id'], unique=False)
    op.create_table('equipment_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('equipment_type_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('manufacturer', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('model', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('hcpcs', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('defaultprice', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='equipment_type_pkey'),
    comment='Equipment categories and default settings',
    postgresql_ignore_search_path=False
    )
    op.create_table('claim_denials',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('claim_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reason_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('denial_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('appeal_deadline', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('appeal_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('appeal_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('resolution_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('resolution_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("appeal_status::text = ANY (ARRAY['pending'::character varying, 'submitted'::character varying, 'approved'::character varying, 'denied'::character varying, 'expired'::character varying]::text[])", name='chk_appeal_status'),
    sa.ForeignKeyConstraint(['claim_id'], ['insurance_claims.id'], name='fk_denial_claim'),
    sa.ForeignKeyConstraint(['reason_id'], ['denial_reasons.id'], name='fk_denial_reason'),
    sa.PrimaryKeyConstraint('id', name='claim_denials_pkey')
    )
    op.create_index('idx_claim_denials_status', 'claim_denials', ['appeal_status'], unique=False)
    op.create_index('idx_claim_denials_reason', 'claim_denials', ['reason_id'], unique=False)
    op.create_index('idx_claim_denials_dates', 'claim_denials', ['denial_date', 'appeal_deadline'], unique=False)
    op.create_index('idx_claim_denials_claim', 'claim_denials', ['claim_id'], unique=False)
    op.create_table('system_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('metrictypeid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['metrictypeid'], ['metric_types.id'], name='fk_system_metric_type'),
    sa.PrimaryKeyConstraint('id', name='system_metric_pkey'),
    comment='System metric measurements'
    )
    op.create_table('cmn_forms_0403b',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0403b'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0403b_pkey'),
    comment='CMN Form Type 04.03 Part B'
    )
    op.create_index('idx_cmn_forms_0403b_medical', 'cmn_forms_0403b', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0403b_customer', 'cmn_forms_0403b', ['customer_id'], unique=False)
    op.create_table('insurance_policies',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('insurance_policies_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('payer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('policy_number', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('group_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('policy_holder', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('coverage_start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('coverage_end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('policy_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('verification_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('verification_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['active'::character varying, 'inactive'::character varying, 'expired'::character varying, 'cancelled'::character varying]::text[])", name='chk_policy_status'),
    sa.CheckConstraint("verification_status::text = ANY (ARRAY['pending'::character varying, 'verified'::character varying, 'failed'::character varying, 'expired'::character varying]::text[])", name='chk_verification_status'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name='fk_policy_patient'),
    sa.ForeignKeyConstraint(['payer_id'], ['insurance_payers.id'], name='fk_policy_payer'),
    sa.PrimaryKeyConstraint('id', name='insurance_policies_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_insurance_policies_status', 'insurance_policies', ['status'], unique=False)
    op.create_index('idx_insurance_policies_payer', 'insurance_policies', ['payer_id'], unique=False)
    op.create_index('idx_insurance_policies_patient', 'insurance_policies', ['patient_id'], unique=False)
    op.create_index('idx_insurance_policies_dates', 'insurance_policies', ['coverage_start_date', 'coverage_end_date'], unique=False)
    op.create_table('compliance_audits',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('compliance_audit_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('checklistid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auditdate', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('auditorid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'In Progress'::character varying"), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('completeddate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['checklistid'], ['compliance_checklists.id'], name='fk_compliance_audit_checklist'),
    sa.PrimaryKeyConstraint('id', name='compliance_audit_pkey'),
    comment='Compliance audit records',
    postgresql_ignore_search_path=False
    )
    op.create_table('order_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('change_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('changed_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['doctor_orders.id'], name='fk_history_order'),
    sa.PrimaryKeyConstraint('id', name='order_history_pkey')
    )
    op.create_index('idx_order_history_status', 'order_history', ['status'], unique=False)
    op.create_index('idx_order_history_order', 'order_history', ['order_id'], unique=False)
    op.create_index('idx_order_history_date', 'order_history', ['change_date'], unique=False)
    op.create_table('inventory_transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('inventoryid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('transactiontype', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('referencetype', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('referenceid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createduserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('createddatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['inventoryid'], ['inventories.id'], name='fk_inventory_transaction_inventory'),
    sa.PrimaryKeyConstraint('id', name='inventory_transaction_pkey'),
    comment='Inventory movement transactions'
    )
    op.create_table('cmn_form_responses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('responses', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('submitted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('reviewed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('reviewed_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['draft'::character varying, 'submitted'::character varying, 'reviewed'::character varying, 'approved'::character varying, 'rejected'::character varying]::text[])", name='chk_response_status'),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], name='fk_cmn_response_doctor'),
    sa.ForeignKeyConstraint(['form_id'], ['cmn_forms.id'], name='fk_cmn_response_form'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name='fk_cmn_response_patient'),
    sa.PrimaryKeyConstraint('id', name='cmn_form_responses_pkey'),
    comment='Completed CMN form responses'
    )
    op.create_index('idx_cmn_responses_status', 'cmn_form_responses', ['status'], unique=False)
    op.create_index('idx_cmn_responses_patient', 'cmn_form_responses', ['patient_id'], unique=False)
    op.create_index('idx_cmn_responses_form', 'cmn_form_responses', ['form_id'], unique=False)
    op.create_index('idx_cmn_responses_doctor', 'cmn_form_responses', ['doctor_id'], unique=False)
    op.create_index('idx_cmn_responses_dates', 'cmn_form_responses', ['submitted_at', 'reviewed_at'], unique=False)
    op.create_table('table_backup_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('original_schema', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('original_table', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('backup_schema', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('backup_table', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('backup_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('row_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='table_backup_log_pkey')
    )
    op.create_table('inventories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('warehouseid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('equipmenttypeid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('reorderpoint', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('reorderquantity', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['equipmenttypeid'], ['equipment_types.id'], name='fk_inventory_equipment_type'),
    sa.PrimaryKeyConstraint('id', name='inventory_pkey'),
    comment='Equipment inventory by warehouse'
    )
    op.create_table('appointment_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('appointment_types_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('requires_approval', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('duration > 0', name='chk_appointment_duration'),
    sa.PrimaryKeyConstraint('id', name='appointment_types_pkey'),
    sa.UniqueConstraint('name', name='uq_appointment_type_name'),
    comment='Predefined types of appointments',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_appointment_types_name', 'appointment_types', ['name'], unique=False)
    op.create_table('maintenance_checklist_items',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('maintenance_checklist_item_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('checklistid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('itemorder', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('requiredaction', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expectedvalue', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isrequired', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['checklistid'], ['maintenance_checklists.id'], name='fk_maintenance_checklist_item_checklist'),
    sa.PrimaryKeyConstraint('id', name='maintenance_checklist_item_pkey'),
    comment='Individual items in maintenance checklists',
    postgresql_ignore_search_path=False
    )
    op.create_table('order_fulfillment',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('fulfilled_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('fulfilled_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('quantity_fulfilled', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['fulfilled_by'], ['employees.id'], name='fk_fulfillment_employee'),
    sa.ForeignKeyConstraint(['order_id'], ['doctor_orders.id'], name='fk_fulfillment_order'),
    sa.PrimaryKeyConstraint('id', name='order_fulfillment_pkey')
    )
    op.create_index('idx_order_fulfillment_order', 'order_fulfillment', ['order_id'], unique=False)
    op.create_index('idx_order_fulfillment_employee', 'order_fulfillment', ['fulfilled_by'], unique=False)
    op.create_index('idx_order_fulfillment_date', 'order_fulfillment', ['fulfilled_date'], unique=False)
    op.create_table('document_templates',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('document_templates_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('file_extension', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_system_template', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['document_categories.id'], name='fk_document_template_category'),
    sa.PrimaryKeyConstraint('id', name='document_templates_pkey'),
    sa.UniqueConstraint('name', name='uq_document_template_name'),
    comment='Document templates with variable support',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_document_templates_name', 'document_templates', ['name'], unique=False)
    op.create_index('idx_document_templates_category', 'document_templates', ['category_id'], unique=False)
    op.create_table('notification_templates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('subject', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('bodytemplate', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('templatetype', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('parameters', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='notification_template_pkey'),
    comment='Templates for system notifications'
    )
    op.create_table('product_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('product_types_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['product_groups.id'], name='fk_product_type_group'),
    sa.PrimaryKeyConstraint('id', name='product_types_pkey'),
    sa.UniqueConstraint('name', name='uq_product_type_name'),
    comment='Product type classifications',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_product_types_group', 'product_types', ['group_id'], unique=False)
    op.create_index('idx_product_types_active', 'product_types', ['is_active'], unique=False)
    op.create_table('quality_inspections',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('equipmentid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('checklistid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('inspectiondate', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('inspectorid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'In Progress'::character varying"), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('completiondate', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['checklistid'], ['quality_checklists.id'], name='fk_quality_inspection_checklist'),
    sa.ForeignKeyConstraint(['equipmentid'], ['equipments.id'], name='fk_quality_inspection_equipment'),
    sa.PrimaryKeyConstraint('id', name='quality_inspection_pkey'),
    comment='Quality control inspection records'
    )
    op.create_table('report_schedules',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('report_schedules_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('report_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('schedule_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('frequency', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('output_format', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('recipients', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_run_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('next_run_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('start_date <= end_date OR end_date IS NULL', name='chk_report_schedule_dates'),
    sa.ForeignKeyConstraint(['report_id'], ['report_definitions.id'], name='fk_report_schedule_report'),
    sa.PrimaryKeyConstraint('id', name='report_schedules_pkey'),
    comment='Report scheduling configuration',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_report_schedules_report', 'report_schedules', ['report_id'], unique=False)
    op.create_index('idx_report_schedules_next_run', 'report_schedules', ['next_run_time'], unique=False)
    op.create_index('idx_report_schedules_dates', 'report_schedules', ['start_date', 'end_date'], unique=False)
    op.create_index('idx_report_schedules_active', 'report_schedules', ['is_active'], unique=False)
    op.create_table('configuration_audits',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('settingid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('oldvalue', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('newvalue', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changeuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('changedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['settingid'], ['configuration_settings.id'], name='fk_configuration_audit_setting'),
    sa.PrimaryKeyConstraint('id', name='configuration_audit_pkey'),
    comment='Audit trail for configuration changes'
    )
    op.create_table('tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completion_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('assigned_to', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('assigned_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('parent_task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('progress', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('estimated_hours', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('actual_hours', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('estimated_hours >= 0::numeric AND (actual_hours >= 0::numeric OR actual_hours IS NULL)', name='chk_task_hours'),
    sa.CheckConstraint('priority >= 0', name='chk_task_priority'),
    sa.CheckConstraint('progress >= 0 AND progress <= 100', name='chk_task_progress'),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.id'], name='fk_task_assigned_by'),
    sa.ForeignKeyConstraint(['assigned_to'], ['users.id'], name='fk_task_assigned_to'),
    sa.ForeignKeyConstraint(['parent_task_id'], ['tasks.id'], name='fk_task_parent'),
    sa.ForeignKeyConstraint(['task_type_id'], ['task_types.id'], name='fk_task_type'),
    sa.PrimaryKeyConstraint('id', name='tasks_pkey'),
    comment='Main task tracking table'
    )
    op.create_index('idx_tasks_type', 'tasks', ['task_type_id'], unique=False)
    op.create_index('idx_tasks_status', 'tasks', ['status'], unique=False)
    op.create_index('idx_tasks_parent', 'tasks', ['parent_task_id'], unique=False)
    op.create_index('idx_tasks_entity', 'tasks', ['entity_type', 'entity_id'], unique=False)
    op.create_index('idx_tasks_dates', 'tasks', ['due_date', 'start_date', 'completion_date'], unique=False)
    op.create_index('idx_tasks_assigned', 'tasks', ['assigned_to'], unique=False)
    op.create_table('document_categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('document_categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parent_category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_system_category', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_category_id'], ['document_categories.id'], name='fk_document_category_parent'),
    sa.PrimaryKeyConstraint('id', name='document_categories_pkey'),
    sa.UniqueConstraint('name', name='uq_document_category_name'),
    comment='Hierarchical categories for document organization',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_document_categories_parent', 'document_categories', ['parent_category_id'], unique=False)
    op.create_index('idx_document_categories_name', 'document_categories', ['name'], unique=False)
    op.create_table('batch_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('batchid', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('processname', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('starttime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('endtime', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('recordsprocessed', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('errormessage', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='batch_log_pkey')
    )
    op.create_table('message_queue',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('message_queue_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('template_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('template_version_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('message_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('subject', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('scheduled_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('processed_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('max_retries', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("message_type::text = ANY (ARRAY['email'::character varying, 'sms'::character varying, 'push'::character varying, 'letter'::character varying]::text[])", name='chk_message_type'),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'sent'::character varying, 'failed'::character varying, 'cancelled'::character varying]::text[])", name='chk_message_status'),
    sa.ForeignKeyConstraint(['template_id'], ['communication_templates.id'], name='fk_message_template'),
    sa.ForeignKeyConstraint(['template_version_id'], ['template_versions.id'], name='fk_message_template_version'),
    sa.PrimaryKeyConstraint('id', name='message_queue_pkey'),
    comment='Message processing queue',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_message_queue_version', 'message_queue', ['template_version_id'], unique=False)
    op.create_index('idx_message_queue_type', 'message_queue', ['message_type'], unique=False)
    op.create_index('idx_message_queue_template', 'message_queue', ['template_id'], unique=False)
    op.create_index('idx_message_queue_status', 'message_queue', ['status'], unique=False)
    op.create_index('idx_message_queue_scheduled', 'message_queue', ['scheduled_time'], unique=False)
    op.create_index('idx_message_queue_processed', 'message_queue', ['processed_time'], unique=False)
    op.create_table('doctor_orders',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('doctor_orders_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('order_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('order_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('diagnosis_codes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('instructions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('frequency', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('duration', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('refills', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), server_default=sa.text("'routine'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("priority::text = ANY (ARRAY['stat'::character varying, 'urgent'::character varying, 'routine'::character varying, 'low'::character varying]::text[])", name='chk_order_priority'),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'approved'::character varying, 'completed'::character varying, 'cancelled'::character varying, 'expired'::character varying]::text[])", name='chk_order_status'),
    sa.CheckConstraint('start_date <= end_date OR end_date IS NULL', name='chk_order_dates'),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], name='fk_doctor_order_doctor'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name='fk_doctor_order_patient'),
    sa.PrimaryKeyConstraint('id', name='doctor_orders_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_doctor_orders_type', 'doctor_orders', ['order_type'], unique=False)
    op.create_index('idx_doctor_orders_status', 'doctor_orders', ['status'], unique=False)
    op.create_index('idx_doctor_orders_priority', 'doctor_orders', ['priority'], unique=False)
    op.create_index('idx_doctor_orders_patient', 'doctor_orders', ['patient_id'], unique=False)
    op.create_index('idx_doctor_orders_doctor', 'doctor_orders', ['doctor_id'], unique=False)
    op.create_index('idx_doctor_orders_dates', 'doctor_orders', ['order_date', 'start_date', 'end_date'], unique=False)
    op.create_table('setting_definitions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('setting_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('default_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('allowed_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_system', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_readonly', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("data_type::text = ANY (ARRAY['string'::character varying, 'number'::character varying, 'boolean'::character varying, 'date'::character varying, 'json'::character varying, 'array'::character varying]::text[])", name='chk_setting_type'),
    sa.PrimaryKeyConstraint('id', name='setting_definitions_pkey'),
    sa.UniqueConstraint('setting_name', name='setting_definitions_setting_name_key')
    )
    op.create_index('idx_set_def_name', 'setting_definitions', ['setting_name'], unique=False)
    op.create_table('legal_representatives',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('relationship', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('address_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('documentation_path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('valid_from', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('valid_until', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('valid_from <= valid_until OR valid_until IS NULL', name='chk_legal_rep_dates'),
    sa.ForeignKeyConstraint(['address_id'], ['addresses.id'], name='fk_legal_rep_address'),
    sa.PrimaryKeyConstraint('id', name='legal_representatives_pkey'),
    comment='Legal representative information'
    )
    op.create_index('idx_legal_reps_entity', 'legal_representatives', ['entity_type', 'entity_id'], unique=False)
    op.create_index('idx_legal_reps_dates', 'legal_representatives', ['valid_from', 'valid_until'], unique=False)
    op.create_index('idx_legal_reps_active', 'legal_representatives', ['is_active'], unique=False)
    op.create_table('cmn_forms_0203b',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0203b'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0203b_pkey'),
    comment='CMN Form Type 02.03 Part B'
    )
    op.create_index('idx_cmn_forms_0203b_medical', 'cmn_forms_0203b', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0203b_customer', 'cmn_forms_0203b', ['customer_id'], unique=False)
    op.create_table('user_preferences',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('preference_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('preference_value', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['preference_id'], ['preference_definitions.id'], name='fk_user_preference_definition'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_user_preference_user'),
    sa.PrimaryKeyConstraint('id', name='user_preferences_pkey'),
    sa.UniqueConstraint('user_id', 'preference_id', name='uq_user_preference'),
    comment='User preference values'
    )
    op.create_index('idx_user_preferences_user', 'user_preferences', ['user_id'], unique=False)
    op.create_index('idx_user_preferences_definition', 'user_preferences', ['preference_id'], unique=False)
    op.create_index('idx_user_preferences_default', 'user_preferences', ['is_default'], unique=False)
    op.create_table('cmn_forms_1003',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_1003'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_1003_pkey'),
    comment='CMN Form Type 10.03'
    )
    op.create_index('idx_cmn_forms_1003_medical', 'cmn_forms_1003', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_1003_customer', 'cmn_forms_1003', ['customer_id'], unique=False)
    op.create_table('workflow_executions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workflow_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('execution_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('trigger_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('schedule_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('input_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('output_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('current_action_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('execution_path', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'running'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying, 'timeout'::character varying]::text[])", name='chk_workflow_execution_status'),
    sa.CheckConstraint('started_at <= completed_at OR completed_at IS NULL', name='chk_workflow_execution_dates'),
    sa.ForeignKeyConstraint(['current_action_id'], ['workflow_actions.id'], name='fk_workflow_execution_action'),
    sa.ForeignKeyConstraint(['schedule_id'], ['workflow_schedules.id'], name='fk_workflow_execution_schedule'),
    sa.ForeignKeyConstraint(['trigger_id'], ['workflow_triggers.id'], name='fk_workflow_execution_trigger'),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflow_definitions.id'], name='fk_workflow_execution_workflow'),
    sa.PrimaryKeyConstraint('id', name='workflow_executions_pkey'),
    sa.UniqueConstraint('execution_id', name='workflow_executions_execution_id_key'),
    comment='Workflow execution history'
    )
    op.create_index('idx_workflow_executions_workflow', 'workflow_executions', ['workflow_id'], unique=False)
    op.create_index('idx_workflow_executions_trigger', 'workflow_executions', ['trigger_id'], unique=False)
    op.create_index('idx_workflow_executions_status', 'workflow_executions', ['status'], unique=False)
    op.create_index('idx_workflow_executions_schedule', 'workflow_executions', ['schedule_id'], unique=False)
    op.create_index('idx_workflow_executions_dates', 'workflow_executions', ['started_at', 'completed_at'], unique=False)
    op.create_table('employees',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('middle_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('employee_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('position', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('hire_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('termination_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('address_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['addresses.id'], name='fk_employee_address'),
    sa.PrimaryKeyConstraint('id', name='employees_pkey'),
    sa.UniqueConstraint('employee_id', name='uq_employee_id'),
    comment='Employee records'
    )
    op.create_index('idx_employees_status', 'employees', ['status'], unique=False)
    op.create_index('idx_employees_name', 'employees', ['last_name', 'first_name'], unique=False)
    op.create_index('idx_employees_department', 'employees', ['department'], unique=False)
    op.create_table('variable_definitions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('variable_definitions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('variable_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('default_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_system', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_encrypted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("data_type::text = ANY (ARRAY['string'::character varying, 'number'::character varying, 'boolean'::character varying, 'date'::character varying, 'json'::character varying, 'array'::character varying]::text[])", name='chk_variable_type'),
    sa.PrimaryKeyConstraint('id', name='variable_definitions_pkey'),
    sa.UniqueConstraint('variable_name', name='variable_definitions_variable_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_var_def_name', 'variable_definitions', ['variable_name'], unique=False)
    op.create_table('payment_transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('billing_account_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('payment_method_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transaction_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('transaction_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('processed_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('settlement_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('reference_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('authorization_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('response_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('response_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gateway_response', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("transaction_type::text = ANY (ARRAY['payment'::character varying, 'refund'::character varying, 'chargeback'::character varying, 'adjustment'::character varying]::text[])", name='chk_payment_transaction_type'),
    sa.CheckConstraint('amount > 0::numeric', name='chk_payment_transaction_amount'),
    sa.ForeignKeyConstraint(['billing_account_id'], ['billing_accounts.id'], name='fk_payment_transaction_account'),
    sa.ForeignKeyConstraint(['payment_method_id'], ['payment_methods.id'], name='fk_payment_transaction_method'),
    sa.PrimaryKeyConstraint('id', name='payment_transactions_pkey'),
    sa.UniqueConstraint('transaction_number', name='payment_transactions_transaction_number_key'),
    comment='Payment transaction records'
    )
    op.create_index('idx_payment_transactions_status', 'payment_transactions', ['status'], unique=False)
    op.create_index('idx_payment_transactions_number', 'payment_transactions', ['transaction_number'], unique=False)
    op.create_index('idx_payment_transactions_method', 'payment_transactions', ['payment_method_id'], unique=False)
    op.create_index('idx_payment_transactions_dates', 'payment_transactions', ['processed_date', 'settlement_date'], unique=False)
    op.create_index('idx_payment_transactions_account', 'payment_transactions', ['billing_account_id'], unique=False)
    op.create_table('activity_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('activity_types_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('requires_notes', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_system_type', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='activity_types_pkey'),
    sa.UniqueConstraint('name', name='uq_activity_type_name'),
    comment='Predefined types of system activities',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_activity_types_name', 'activity_types', ['name'], unique=False)
    op.create_index('idx_activity_types_category', 'activity_types', ['category'], unique=False)
    op.create_table('journal_entries',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('entry_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('period_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('entry_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('entry_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reference_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_recurring', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_reversal', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('reversed_entry_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('posted_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['draft'::character varying, 'posted'::character varying, 'reversed'::character varying]::text[])", name='chk_journal_status'),
    sa.ForeignKeyConstraint(['period_id'], ['accounting_periods.id'], name='fk_journal_period'),
    sa.ForeignKeyConstraint(['reversed_entry_id'], ['journal_entries.id'], name='fk_journal_reversal'),
    sa.PrimaryKeyConstraint('id', name='journal_entries_pkey'),
    sa.UniqueConstraint('entry_number', name='journal_entries_entry_number_key'),
    comment='Journal entry header records'
    )
    op.create_index('idx_journal_entries_type', 'journal_entries', ['entry_type'], unique=False)
    op.create_index('idx_journal_entries_status', 'journal_entries', ['status'], unique=False)
    op.create_index('idx_journal_entries_period', 'journal_entries', ['period_id'], unique=False)
    op.create_index('idx_journal_entries_number', 'journal_entries', ['entry_number'], unique=False)
    op.create_index('idx_journal_entries_date', 'journal_entries', ['entry_date'], unique=False)
    op.create_table('regions',
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('receiverid', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('receivername', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('receivercode', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('submitterid', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('submittername', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('submitternumber', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('submittercontact', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('submitterphone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('submitteraddress1', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('submitteraddress2', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('submittercity', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('submitterstate', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('submitterzip', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('production', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('login', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('zipability', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('updateallowable', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('postzeropay', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('uploadmask', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('downloadmask', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name='tbl_regions_pkey'),
    comment='Stores region-specific configuration'
    )
    op.create_table('kits',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('kits_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('kit_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('product_group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='kits_pkey'),
    comment='Product kits or bundles configuration',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_kits_type', 'kits', ['kit_type'], unique=False)
    op.create_index('idx_kits_name', 'kits', ['name'], unique=False)
    op.create_index('idx_kits_group', 'kits', ['product_group_id'], unique=False)
    op.create_table('metric_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('datatype', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='metric_type_pkey'),
    comment='Types of system metrics'
    )
    op.create_table('equipments',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('equipment_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('equipmenttypeid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('serialnumber', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('purchasedate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('purchaseprice', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('warrantyexpiration', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'Available'::character varying"), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['equipmenttypeid'], ['equipment_types.id'], name='fk_equipment_type'),
    sa.PrimaryKeyConstraint('id', name='equipment_pkey'),
    comment='Medical equipment inventory',
    postgresql_ignore_search_path=False
    )
    op.create_table('icd10_codes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='icd10_codes_pkey'),
    sa.UniqueConstraint('code', name='uq_icd10_code'),
    comment='ICD-10 diagnosis codes reference table'
    )
    op.create_index('idx_icd10_codes_code', 'icd10_codes', ['code'], unique=False)
    op.create_table('system_modules',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('system_modules_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('dependencies', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_core', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('install_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['active'::character varying, 'inactive'::character varying, 'error'::character varying, 'updating'::character varying]::text[])", name='chk_system_module_status'),
    sa.PrimaryKeyConstraint('id', name='system_modules_pkey'),
    sa.UniqueConstraint('name', name='uq_system_module_name'),
    comment='System module registry and configuration',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_system_modules_status', 'system_modules', ['status'], unique=False)
    op.create_index('idx_system_modules_enabled', 'system_modules', ['is_enabled'], unique=False)
    op.create_index('idx_system_modules_core', 'system_modules', ['is_core'], unique=False)
    op.create_table('workflow_triggers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workflow_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('trigger_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('event_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('schedule_pattern', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('cooldown_period', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("trigger_type::text = ANY (ARRAY['event'::character varying, 'schedule'::character varying, 'manual'::character varying, 'api'::character varying]::text[])", name='chk_workflow_trigger_type'),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflow_definitions.id'], name='fk_workflow_trigger_workflow'),
    sa.PrimaryKeyConstraint('id', name='workflow_triggers_pkey'),
    comment='Workflow trigger configurations'
    )
    op.create_index('idx_workflow_triggers_workflow', 'workflow_triggers', ['workflow_id'], unique=False)
    op.create_index('idx_workflow_triggers_type', 'workflow_triggers', ['trigger_type'], unique=False)
    op.create_index('idx_workflow_triggers_event', 'workflow_triggers', ['event_source', 'event_type'], unique=False)
    op.create_index('idx_workflow_triggers_active', 'workflow_triggers', ['is_active'], unique=False)
    op.create_table('report_parameters',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('report_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('parameter_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('parameter_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('default_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('help_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['report_definitions.id'], name='fk_report_parameter_report'),
    sa.PrimaryKeyConstraint('id', name='report_parameters_pkey'),
    sa.UniqueConstraint('report_id', 'parameter_name', name='uq_report_parameter_name'),
    comment='Report parameter configurations'
    )
    op.create_index('idx_report_parameters_type', 'report_parameters', ['parameter_type'], unique=False)
    op.create_index('idx_report_parameters_report', 'report_parameters', ['report_id'], unique=False)
    op.create_table('configuration_categories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='configuration_category_pkey'),
    comment='System configuration categories'
    )
    op.create_table('message_recipients',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('message_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recipient_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('recipient_address', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('recipient_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('sent_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("recipient_type::text = ANY (ARRAY['to'::character varying, 'cc'::character varying, 'bcc'::character varying]::text[])", name='chk_recipient_type'),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'sent'::character varying, 'failed'::character varying, 'bounced'::character varying]::text[])", name='chk_recipient_status'),
    sa.ForeignKeyConstraint(['message_id'], ['message_queue.id'], name='fk_message_recipient_message'),
    sa.PrimaryKeyConstraint('id', name='message_recipients_pkey'),
    comment='Message recipient details'
    )
    op.create_index('idx_message_recipients_type', 'message_recipients', ['recipient_type'], unique=False)
    op.create_index('idx_message_recipients_status', 'message_recipients', ['status'], unique=False)
    op.create_index('idx_message_recipients_message', 'message_recipients', ['message_id'], unique=False)
    op.create_index('idx_message_recipients_address', 'message_recipients', ['recipient_address'], unique=False)
    op.create_table('backup_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('backuptype', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('starttime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('endtime', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'In Progress'::character varying"), autoincrement=False, nullable=False),
    sa.Column('filesize', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('filepath', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('compressiontype', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('retentiondays', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('errormessage', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('initiatedby', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='backup_log_pkey'),
    comment='System backup history and metadata'
    )
    op.create_table('cmnform_0484s',
    sa.Column('cmnformid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('answer1_hcpcs', sa.VARCHAR(length=5), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False),
    sa.Column('answer1_mg', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('answer1_times', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('answer1_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['cmnformid'], ['cmnforms.id'], name='fk_cmnform_0484_cmnform'),
    sa.PrimaryKeyConstraint('cmnformid', name='cmnform_0484_pkey')
    )
    op.create_table('billing_accounts',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('billing_accounts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('account_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('billing_cycle_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('credit_limit', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('current_balance', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_invoice_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('next_invoice_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('payment_terms', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('payment_due_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('auto_pay', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('(credit_limit IS NULL OR credit_limit > 0::numeric) AND current_balance IS NOT NULL', name='chk_billing_account_amounts'),
    sa.CheckConstraint('payment_due_days > 0 OR payment_due_days IS NULL', name='chk_billing_account_terms'),
    sa.ForeignKeyConstraint(['billing_cycle_id'], ['billing_cycles.id'], name='fk_billing_account_cycle'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_billing_account_customer'),
    sa.PrimaryKeyConstraint('id', name='billing_accounts_pkey'),
    sa.UniqueConstraint('account_number', name='billing_accounts_account_number_key'),
    comment='Customer billing accounts',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_billing_accounts_status', 'billing_accounts', ['status'], unique=False)
    op.create_index('idx_billing_accounts_number', 'billing_accounts', ['account_number'], unique=False)
    op.create_index('idx_billing_accounts_dates', 'billing_accounts', ['last_invoice_date', 'next_invoice_date'], unique=False)
    op.create_index('idx_billing_accounts_cycle', 'billing_accounts', ['billing_cycle_id'], unique=False)
    op.create_index('idx_billing_accounts_customer', 'billing_accounts', ['customer_id'], unique=False)
    op.create_table('health_account_organizations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('insurance_group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('organization_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('contract_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('contract_start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('contract_end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('billing_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('payment_terms', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('contract_start_date <= contract_end_date OR contract_end_date IS NULL', name='chk_hao_contract_dates'),
    sa.ForeignKeyConstraint(['insurance_group_id'], ['insurance_company_groups.id'], name='fk_hao_insurance_group'),
    sa.PrimaryKeyConstraint('id', name='health_account_organizations_pkey'),
    comment='Health Account Organizations (HAOs) with contract details'
    )
    op.create_index('idx_hao_insurance_group', 'health_account_organizations', ['insurance_group_id'], unique=False)
    op.create_index('idx_hao_dates', 'health_account_organizations', ['contract_start_date', 'contract_end_date'], unique=False)
    op.create_index('idx_hao_contract', 'health_account_organizations', ['contract_number'], unique=False)
    op.create_table('company_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['company_types.id'], name='fk_company_type_parent'),
    sa.PrimaryKeyConstraint('id', name='company_types_pkey'),
    sa.UniqueConstraint('name', name='uq_company_type_name'),
    comment='Company classification types'
    )
    op.create_index('idx_company_types_parent', 'company_types', ['parent_id'], unique=False)
    op.create_index('idx_company_types_active', 'company_types', ['is_active'], unique=False)
    op.create_table('predefined_text',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_system_text', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='predefined_text_pkey'),
    sa.UniqueConstraint('name', name='uq_predefined_text_name'),
    comment='Reusable text templates'
    )
    op.create_index('idx_predefined_text_name', 'predefined_text', ['name'], unique=False)
    op.create_index('idx_predefined_text_category', 'predefined_text', ['category'], unique=False)
    op.create_index('idx_predefined_text_active', 'predefined_text', ['is_active'], unique=False)
    op.create_table('audit_action_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='audit_action_type_pkey'),
    comment='Types of audit actions'
    )
    op.create_table('denial_attachments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('denial_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('file_attachment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('attachment_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['denial_id'], ['denials.id'], name='fk_denial_attachment_denial'),
    sa.PrimaryKeyConstraint('id', name='denial_attachments_pkey'),
    comment='File attachments for denial cases'
    )
    op.create_index('idx_denial_attachments_type', 'denial_attachments', ['attachment_type'], unique=False)
    op.create_index('idx_denial_attachments_denial', 'denial_attachments', ['denial_id'], unique=False)
    op.create_table('billing_schedules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('billing_account_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('schedule_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('next_run_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('frequency', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('day_of_month', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('day_of_week', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_run_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('last_run_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("frequency::text = ANY (ARRAY['daily'::character varying, 'weekly'::character varying, 'monthly'::character varying, 'yearly'::character varying]::text[])", name='chk_billing_schedule_frequency'),
    sa.CheckConstraint('day_of_month IS NULL OR day_of_month >= 1 AND day_of_month <= 31', name='chk_billing_schedule_day_month'),
    sa.CheckConstraint('day_of_week IS NULL OR day_of_week >= 0 AND day_of_week <= 6', name='chk_billing_schedule_day_week'),
    sa.CheckConstraint('start_date <= next_run_date AND (end_date IS NULL OR end_date >= start_date)', name='chk_billing_schedule_dates'),
    sa.ForeignKeyConstraint(['billing_account_id'], ['billing_accounts.id'], name='fk_billing_schedule_account'),
    sa.PrimaryKeyConstraint('id', name='billing_schedules_pkey'),
    comment='Automated billing schedules'
    )
    op.create_index('idx_billing_schedules_dates', 'billing_schedules', ['start_date', 'end_date', 'next_run_date'], unique=False)
    op.create_index('idx_billing_schedules_active', 'billing_schedules', ['is_active'], unique=False)
    op.create_index('idx_billing_schedules_account', 'billing_schedules', ['billing_account_id'], unique=False)
    op.create_table('system_variables',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('module_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_runtime_configurable', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('requires_restart', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('default_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("data_type::text = ANY (ARRAY['string'::character varying, 'number'::character varying, 'boolean'::character varying, 'json'::character varying, 'array'::character varying]::text[])", name='chk_system_variable_type'),
    sa.ForeignKeyConstraint(['module_id'], ['system_modules.id'], name='fk_system_variable_module'),
    sa.PrimaryKeyConstraint('id', name='system_variables_pkey'),
    sa.UniqueConstraint('module_id', 'name', name='uq_system_variable_name'),
    comment='System-wide variable configuration'
    )
    op.create_index('idx_system_variables_restart', 'system_variables', ['requires_restart'], unique=False)
    op.create_index('idx_system_variables_module', 'system_variables', ['module_id'], unique=False)
    op.create_index('idx_system_variables_configurable', 'system_variables', ['is_runtime_configurable'], unique=False)
    op.create_table('payment_plan_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('plan_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('paid_amount', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('paid_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'partial'::character varying, 'paid'::character varying, 'late'::character varying, 'defaulted'::character varying]::text[])", name='chk_plan_item_status'),
    sa.ForeignKeyConstraint(['plan_id'], ['payment_plans.id'], name='fk_plan_item_plan'),
    sa.PrimaryKeyConstraint('id', name='payment_plan_items_pkey')
    )
    op.create_index('idx_payment_plan_items_status', 'payment_plan_items', ['status'], unique=False)
    op.create_index('idx_payment_plan_items_plan', 'payment_plan_items', ['plan_id'], unique=False)
    op.create_index('idx_payment_plan_items_dates', 'payment_plan_items', ['due_date'], unique=False)
    op.create_table('cmn_forms_0702b',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0702b'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0702b_pkey'),
    comment='CMN Form Type 07.02 Part B'
    )
    op.create_index('idx_cmn_forms_0702b_medical', 'cmn_forms_0702b', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0702b_customer', 'cmn_forms_0702b', ['customer_id'], unique=False)
    op.create_table('medical_conditions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('icd_codes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('chronic', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('symptoms', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('treatments', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("severity::text = ANY (ARRAY['mild'::character varying, 'moderate'::character varying, 'severe'::character varying, 'critical'::character varying]::text[])", name='chk_condition_severity'),
    sa.PrimaryKeyConstraint('id', name='medical_conditions_pkey'),
    sa.UniqueConstraint('name', name='uq_medical_condition_name'),
    comment='Medical condition definitions and metadata'
    )
    op.create_index('idx_medical_conditions_severity', 'medical_conditions', ['severity'], unique=False)
    op.create_index('idx_medical_conditions_chronic', 'medical_conditions', ['chronic'], unique=False)
    op.create_index('idx_medical_conditions_category', 'medical_conditions', ['category'], unique=False)
    op.create_table('cmn_forms_uro',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_uro'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_uro_pkey'),
    comment='CMN Form Urology Type'
    )
    op.create_index('idx_cmn_forms_uro_medical', 'cmn_forms_uro', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_uro_customer', 'cmn_forms_uro', ['customer_id'], unique=False)
    op.create_table('appointment_reminders',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('appointmentid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('remindertype', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('remindertime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'Pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('lastsendattempt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='appointment_reminder_pkey'),
    comment='Appointment reminders and their status'
    )
    op.create_table('order_status',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='order_status_pkey'),
    comment='Order status types'
    )
    op.create_table('quality_checklist_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('checklistid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('itemorder', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('testmethod', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('acceptancecriteria', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('isrequired', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['checklistid'], ['quality_checklists.id'], name='fk_quality_checklist_item_checklist'),
    sa.PrimaryKeyConstraint('id', name='quality_checklist_item_pkey'),
    comment='Quality control checklist items'
    )
    op.create_table('employee_roles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('employee_role_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('permissions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='employee_role_pkey'),
    comment='Employee roles and permissions',
    postgresql_ignore_search_path=False
    )
    op.create_table('cmnforms',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('cmnform_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('cmntype', postgresql.ENUM('DME 484.03', 'DME 484.04', 'DME 0484', name='cmn_type_enum'), server_default=sa.text("'DME 484.03'::cmn_type_enum"), autoincrement=False, nullable=False),
    sa.Column('initialdate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('reviseddate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('customerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('doctorid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('supplierid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lengthofneed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='cmnform_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('workflow_definitions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('workflow_definitions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('timeout', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retry_policy', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_handling', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['draft'::character varying, 'active'::character varying, 'deprecated'::character varying, 'archived'::character varying]::text[])", name='chk_workflow_definition_status'),
    sa.PrimaryKeyConstraint('id', name='workflow_definitions_pkey'),
    sa.UniqueConstraint('name', 'version', name='uq_workflow_definition_name'),
    comment='Workflow process definitions',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_workflow_definitions_status', 'workflow_definitions', ['status'], unique=False)
    op.create_index('idx_workflow_definitions_category', 'workflow_definitions', ['category'], unique=False)
    op.create_index('idx_workflow_definitions_active', 'workflow_definitions', ['is_active'], unique=False)
    op.create_table('healthcare_providers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('middle_name', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('license_number', sa.VARCHAR(length=16), autoincrement=False, nullable=False),
    sa.Column('license_expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('medicaid_number', sa.VARCHAR(length=16), autoincrement=False, nullable=False),
    sa.Column('dea_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('upin_number', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('tax_id', sa.VARCHAR(length=9), autoincrement=False, nullable=True),
    sa.Column('npi', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('pecos_enrolled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('address_line1', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('address_line2', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('phone2', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('fax', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('provider_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='healthcare_providers_pkey')
    )
    op.create_table('calendar_sharing',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('calendar_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permission_level', sa.VARCHAR(length=20), server_default=sa.text("'read'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("permission_level::text = ANY (ARRAY['read'::character varying, 'write'::character varying, 'admin'::character varying]::text[])", name='chk_calendar_permission'),
    sa.ForeignKeyConstraint(['calendar_id'], ['calendars.id'], name='fk_calendar_sharing_calendar'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_calendar_sharing_user'),
    sa.PrimaryKeyConstraint('id', name='calendar_sharing_pkey'),
    comment='Calendar sharing permissions'
    )
    op.create_index('idx_calendar_sharing_user', 'calendar_sharing', ['user_id'], unique=False)
    op.create_index('idx_calendar_sharing_calendar', 'calendar_sharing', ['calendar_id'], unique=False)
    op.create_table('compliance',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('form_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('compliance_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('last_review_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('next_review_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_compliant', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('compliance_date <= expiry_date AND last_review_date <= next_review_date', name='chk_compliance_dates'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='fk_compliance_company'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_compliance_customer'),
    sa.PrimaryKeyConstraint('id', name='compliance_pkey'),
    comment='Tracks compliance status for companies and customers'
    )
    op.create_index('idx_compliance_status', 'compliance', ['status'], unique=False)
    op.create_index('idx_compliance_dates', 'compliance', ['compliance_date', 'expiry_date', 'next_review_date'], unique=False)
    op.create_index('idx_compliance_customer', 'compliance', ['customer_id'], unique=False)
    op.create_index('idx_compliance_company', 'compliance', ['company_id'], unique=False)
    op.create_table('customer_documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('customerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('documenttypeid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('filepath', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('filesize', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mimetype', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('uploaddate', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('expirydate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'Active'::character varying"), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['documenttypeid'], ['document_types.id'], name='fk_customer_document_type'),
    sa.PrimaryKeyConstraint('id', name='customer_document_pkey'),
    comment='Customer-related documents and files'
    )
    op.create_table('shipping_zones',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('zip_codes', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='shipping_zones_pkey'),
    sa.UniqueConstraint('name', name='uq_shipping_zone_name'),
    comment='Geographic shipping zones'
    )
    op.create_index('idx_shipping_zones_active', 'shipping_zones', ['is_active'], unique=False)
    op.create_table('activity_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('activity_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['activity_type_id'], ['activity_types.id'], name='fk_activity_type'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_activity_user'),
    sa.PrimaryKeyConstraint('id', name='activity_logs_pkey'),
    comment='User activity tracking'
    )
    op.create_index('idx_activity_logs_user', 'activity_logs', ['user_id'], unique=False)
    op.create_index('idx_activity_logs_type', 'activity_logs', ['activity_type_id'], unique=False)
    op.create_index('idx_activity_logs_entity', 'activity_logs', ['entity_type', 'entity_id'], unique=False)
    op.create_index('idx_activity_logs_date', 'activity_logs', ['created_at'], unique=False)
    op.create_index('idx_activity_logs_action', 'activity_logs', ['action'], unique=False)
    op.create_table('communication_templates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('template_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('subject_template', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('body_template', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('format', sa.VARCHAR(length=20), server_default=sa.text("'text'::character varying"), autoincrement=False, nullable=True),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_system_template', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("format::text = ANY (ARRAY['text'::character varying, 'html'::character varying, 'markdown'::character varying]::text[])", name='chk_template_format'),
    sa.CheckConstraint("template_type::text = ANY (ARRAY['email'::character varying, 'sms'::character varying, 'push'::character varying, 'letter'::character varying, 'report'::character varying]::text[])", name='chk_template_type'),
    sa.ForeignKeyConstraint(['category_id'], ['template_categories.id'], name='fk_communication_template_category'),
    sa.PrimaryKeyConstraint('id', name='communication_templates_pkey'),
    sa.UniqueConstraint('name', name='uq_communication_template_name'),
    comment='Communication template definitions'
    )
    op.create_index('idx_communication_templates_type', 'communication_templates', ['template_type'], unique=False)
    op.create_index('idx_communication_templates_system', 'communication_templates', ['is_system_template'], unique=False)
    op.create_index('idx_communication_templates_category', 'communication_templates', ['category_id'], unique=False)
    op.create_index('idx_communication_templates_active', 'communication_templates', ['is_active'], unique=False)
    op.create_table('product_prices',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price_code_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('base_price', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('min_price', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('max_price', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('effective_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('effective_date <= end_date OR end_date IS NULL', name='chk_product_price_dates'),
    sa.CheckConstraint('min_price <= base_price AND (max_price IS NULL OR base_price <= max_price)', name='chk_product_price_range'),
    sa.ForeignKeyConstraint(['price_code_id'], ['price_codes.id'], name='fk_product_price_code'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='fk_product_price_product'),
    sa.PrimaryKeyConstraint('id', name='product_prices_pkey'),
    sa.UniqueConstraint('product_id', 'price_code_id', 'effective_date', name='uq_product_price'),
    comment='Product pricing information'
    )
    op.create_index('idx_product_prices_product', 'product_prices', ['product_id'], unique=False)
    op.create_index('idx_product_prices_dates', 'product_prices', ['effective_date', 'end_date'], unique=False)
    op.create_index('idx_product_prices_code', 'product_prices', ['price_code_id'], unique=False)
    op.create_index('idx_product_prices_active', 'product_prices', ['is_active'], unique=False)
    op.create_table('cmn_forms_0102a',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0102a'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0102a_pkey'),
    comment='CMN Form Type 01.02 Part A'
    )
    op.create_index('idx_cmn_forms_0102a_medical', 'cmn_forms_0102a', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0102a_customer', 'cmn_forms_0102a', ['customer_id'], unique=False)
    op.create_table('quality_checklists',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('equipmenttypeid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['equipmenttypeid'], ['equipment_types.id'], name='fk_quality_checklist_equipment_type'),
    sa.PrimaryKeyConstraint('id', name='quality_checklist_pkey'),
    comment='Quality control checklists'
    )
    op.create_table('product_groups',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('product_groups_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['product_categories.id'], name='fk_product_group_category'),
    sa.PrimaryKeyConstraint('id', name='product_groups_pkey'),
    sa.UniqueConstraint('name', name='uq_product_group_name'),
    comment='Product grouping definitions',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_product_groups_category', 'product_groups', ['category_id'], unique=False)
    op.create_index('idx_product_groups_active', 'product_groups', ['is_active'], unique=False)
    op.create_table('insurance_coverage',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('policy_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('coverage_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('benefit_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('copay_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('coinsurance_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('deductible_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('out_of_pocket_max', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('prior_auth_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['policy_id'], ['insurance_policies.id'], name='fk_coverage_policy'),
    sa.PrimaryKeyConstraint('id', name='insurance_coverage_pkey')
    )
    op.create_index('idx_insurance_coverage_type', 'insurance_coverage', ['coverage_type'], unique=False)
    op.create_index('idx_insurance_coverage_policy', 'insurance_coverage', ['policy_id'], unique=False)
    op.create_table('user_notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('notification_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_archived', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('link_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_user_notification_user'),
    sa.PrimaryKeyConstraint('id', name='user_notifications_pkey'),
    comment='User-specific notifications and alerts'
    )
    op.create_index('idx_user_notifications_user', 'user_notifications', ['user_id'], unique=False)
    op.create_index('idx_user_notifications_type', 'user_notifications', ['notification_type'], unique=False)
    op.create_index('idx_user_notifications_read', 'user_notifications', ['is_read'], unique=False)
    op.create_index('idx_user_notifications_archived', 'user_notifications', ['is_archived'], unique=False)
    op.create_table('accounting_periods',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('period_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'open'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_adjustment_period', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('closed_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('closed_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('start_date < end_date', name='chk_accounting_period_dates'),
    sa.PrimaryKeyConstraint('id', name='accounting_periods_pkey'),
    sa.UniqueConstraint('start_date', 'end_date', name='uq_accounting_period_dates'),
    comment='Accounting period definitions'
    )
    op.create_index('idx_accounting_periods_status', 'accounting_periods', ['status'], unique=False)
    op.create_index('idx_accounting_periods_dates', 'accounting_periods', ['start_date', 'end_date'], unique=False)
    op.create_table('prescriptions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('prescriptions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medication_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('strength', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('form', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('sig', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('refills', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('dispense_as_written', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['active'::character varying, 'completed'::character varying, 'discontinued'::character varying, 'expired'::character varying]::text[])", name='chk_prescription_status'),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], name='fk_prescription_doctor'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name='fk_prescription_patient'),
    sa.PrimaryKeyConstraint('id', name='prescriptions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_prescriptions_status', 'prescriptions', ['status'], unique=False)
    op.create_index('idx_prescriptions_patient', 'prescriptions', ['patient_id'], unique=False)
    op.create_index('idx_prescriptions_doctor', 'prescriptions', ['doctor_id'], unique=False)
    op.create_index('idx_prescriptions_dates', 'prescriptions', ['start_date', 'end_date'], unique=False)
    op.create_table('migration_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('migration_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('table_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('records_migrated', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='migration_log_pkey')
    )
    op.create_table('batchpayments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('insurancecompanyid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('checknumber', sa.VARCHAR(length=14), autoincrement=False, nullable=False),
    sa.Column('checkdate', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('checkamount', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('amountused', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='batchpayment_pkey')
    )
    op.create_table('insurance_authorizations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('policy_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_number', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('service_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('authorized_units', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('used_units', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'active'::character varying, 'expired'::character varying, 'cancelled'::character varying]::text[])", name='chk_auth_status'),
    sa.ForeignKeyConstraint(['policy_id'], ['insurance_policies.id'], name='fk_auth_policy'),
    sa.PrimaryKeyConstraint('id', name='insurance_authorizations_pkey'),
    sa.UniqueConstraint('auth_number', name='uq_auth_number')
    )
    op.create_index('idx_insurance_auth_status', 'insurance_authorizations', ['status'], unique=False)
    op.create_index('idx_insurance_auth_policy', 'insurance_authorizations', ['policy_id'], unique=False)
    op.create_index('idx_insurance_auth_number', 'insurance_authorizations', ['auth_number'], unique=False)
    op.create_index('idx_insurance_auth_dates', 'insurance_authorizations', ['start_date', 'end_date'], unique=False)
    op.create_table('cmn_forms_drorder',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_drorder'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_drorder_pkey'),
    comment='CMN Form Doctor Order Type'
    )
    op.create_index('idx_cmn_forms_drorder_medical', 'cmn_forms_drorder', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_drorder_doctor', 'cmn_forms_drorder', ['doctor_id'], unique=False)
    op.create_index('idx_cmn_forms_drorder_customer', 'cmn_forms_drorder', ['customer_id'], unique=False)
    op.create_table('notification_recipients',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('notification_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recipient_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('recipient_address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('sent_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("recipient_type::text = ANY (ARRAY['to'::character varying, 'cc'::character varying, 'bcc'::character varying]::text[])", name='chk_recipient_type'),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'sent'::character varying, 'failed'::character varying, 'bounced'::character varying]::text[])", name='chk_recipient_status'),
    sa.ForeignKeyConstraint(['notification_id'], ['notification_queue.id'], name='fk_notification_queue'),
    sa.PrimaryKeyConstraint('id', name='notification_recipients_pkey')
    )
    op.create_index('idx_notification_recipients_type', 'notification_recipients', ['recipient_type'], unique=False)
    op.create_index('idx_notification_recipients_status', 'notification_recipients', ['status'], unique=False)
    op.create_index('idx_notification_recipients_notification', 'notification_recipients', ['notification_id'], unique=False)
    op.create_table('report_subscriptions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('report_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('schedule_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('subscription_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('delivery_method', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('format_preference', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_delivered_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['report_definitions.id'], name='fk_report_subscription_report'),
    sa.ForeignKeyConstraint(['schedule_id'], ['report_schedules.id'], name='fk_report_subscription_schedule'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_report_subscription_user'),
    sa.PrimaryKeyConstraint('id', name='report_subscriptions_pkey'),
    sa.UniqueConstraint('report_id', 'user_id', 'subscription_type', name='uq_report_subscription'),
    comment='User report subscriptions'
    )
    op.create_index('idx_report_subscriptions_user', 'report_subscriptions', ['user_id'], unique=False)
    op.create_index('idx_report_subscriptions_schedule', 'report_subscriptions', ['schedule_id'], unique=False)
    op.create_index('idx_report_subscriptions_report', 'report_subscriptions', ['report_id'], unique=False)
    op.create_index('idx_report_subscriptions_active', 'report_subscriptions', ['is_active'], unique=False)
    op.create_table('products',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('products_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('sku', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('manufacturer', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('model_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('unit_of_measure', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('dimensions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('weight', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('specifications', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='products_pkey'),
    sa.UniqueConstraint('sku', name='uq_product_sku'),
    comment='Product catalog information',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_products_sku', 'products', ['sku'], unique=False)
    op.create_index('idx_products_category', 'products', ['category_id'], unique=False)
    op.create_index('idx_products_active', 'products', ['is_active'], unique=False)
    op.create_table('cmn_forms_0703a',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0703a'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0703a_pkey'),
    comment='CMN Form Type 07.03 Part A'
    )
    op.create_index('idx_cmn_forms_0703a_medical', 'cmn_forms_0703a', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0703a_customer', 'cmn_forms_0703a', ['customer_id'], unique=False)
    op.create_table('document_tags',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tag_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='fk_document_tag_document'),
    sa.PrimaryKeyConstraint('id', name='document_tags_pkey'),
    sa.UniqueConstraint('document_id', 'tag_name', name='uq_document_tag'),
    comment='Document tagging system'
    )
    op.create_index('idx_document_tags_name', 'document_tags', ['tag_name'], unique=False)
    op.create_index('idx_document_tags_document', 'document_tags', ['document_id'], unique=False)
    op.create_table('employee_role_assignments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('employeeid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('roleid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('startdate', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('enddate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['roleid'], ['employee_roles.id'], name='fk_employee_role_assignment_role'),
    sa.PrimaryKeyConstraint('id', name='employee_role_assignment_pkey'),
    comment='Role assignments for employees'
    )
    op.create_table('task_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('default_priority', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('estimated_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('requires_approval', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_system_type', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('default_priority >= 0', name='chk_task_type_priority'),
    sa.CheckConstraint('estimated_duration > 0 OR estimated_duration IS NULL', name='chk_task_type_duration'),
    sa.PrimaryKeyConstraint('id', name='task_types_pkey'),
    sa.UniqueConstraint('name', name='uq_task_type_name'),
    comment='Predefined types of tasks with default settings'
    )
    op.create_index('idx_task_types_name', 'task_types', ['name'], unique=False)
    op.create_index('idx_task_types_category', 'task_types', ['category'], unique=False)
    op.create_table('customer_classes',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('customer_classes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('priority_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('discount_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('credit_limit', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('payment_terms', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='customer_classes_pkey'),
    sa.UniqueConstraint('name', name='uq_customer_class_name'),
    comment='Customer classification and priority levels',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_customer_classes_priority', 'customer_classes', ['priority_level'], unique=False)
    op.create_index('idx_customer_classes_active', 'customer_classes', ['is_active'], unique=False)
    op.create_table('feature_flags',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('percentage_rollout', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('dependencies', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('percentage_rollout IS NULL OR percentage_rollout >= 0 AND percentage_rollout <= 100', name='chk_feature_flag_rollout'),
    sa.CheckConstraint('start_date IS NULL OR end_date IS NULL OR start_date <= end_date', name='chk_feature_flag_dates'),
    sa.PrimaryKeyConstraint('id', name='feature_flags_pkey'),
    sa.UniqueConstraint('name', name='uq_feature_flag_name'),
    comment='Feature flag management'
    )
    op.create_index('idx_feature_flags_enabled', 'feature_flags', ['is_enabled'], unique=False)
    op.create_index('idx_feature_flags_dates', 'feature_flags', ['start_date', 'end_date'], unique=False)
    op.create_table('document_versions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('change_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('file_size >= 0', name='chk_document_version_size'),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='fk_document_version_document'),
    sa.PrimaryKeyConstraint('id', name='document_versions_pkey'),
    sa.UniqueConstraint('document_id', 'version', name='uq_document_version'),
    comment='Document version history'
    )
    op.create_index('idx_document_versions_version', 'document_versions', ['version'], unique=False)
    op.create_index('idx_document_versions_document', 'document_versions', ['document_id'], unique=False)
    op.create_table('cmn_forms_0602b',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0602b'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0602b_pkey'),
    comment='CMN Form Type 06.02 Part B'
    )
    op.create_index('idx_cmn_forms_0602b_medical', 'cmn_forms_0602b', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0602b_customer', 'cmn_forms_0602b', ['customer_id'], unique=False)
    op.create_table('customer_feedbacks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('customerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('categoryid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('servicerequestid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('submissiondate', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'New'::character varying"), autoincrement=False, nullable=False),
    sa.Column('response', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('responseuserid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('responsedatetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['categoryid'], ['feedback_categories.id'], name='fk_customer_feedback_category'),
    sa.ForeignKeyConstraint(['servicerequestid'], ['service_requests.id'], name='fk_customer_feedback_service_request'),
    sa.PrimaryKeyConstraint('id', name='customer_feedback_pkey'),
    comment='Customer feedback and ratings'
    )
    op.create_table('kb_categories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parentcategoryid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['parentcategoryid'], ['kb_categories.id'], name='fk_kb_category_parent'),
    sa.PrimaryKeyConstraint('id', name='kb_category_pkey'),
    comment='Knowledge base article categories'
    )
    op.create_table('invoice_forms',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('invoice_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('invoice_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('subtotal', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('tax_amount', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('discount_amount', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('invoice_date <= due_date', name='chk_invoice_dates'),
    sa.CheckConstraint('subtotal >= 0::numeric AND tax_amount >= 0::numeric AND discount_amount >= 0::numeric AND total_amount >= 0::numeric', name='chk_invoice_amounts'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='fk_invoice_company'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_invoice_customer'),
    sa.PrimaryKeyConstraint('id', name='invoice_forms_pkey'),
    sa.UniqueConstraint('invoice_number', name='invoice_forms_invoice_number_key'),
    comment='Main invoice records'
    )
    op.create_index('idx_invoice_forms_status', 'invoice_forms', ['status'], unique=False)
    op.create_index('idx_invoice_forms_number', 'invoice_forms', ['invoice_number'], unique=False)
    op.create_index('idx_invoice_forms_dates', 'invoice_forms', ['invoice_date', 'due_date'], unique=False)
    op.create_index('idx_invoice_forms_customer', 'invoice_forms', ['customer_id'], unique=False)
    op.create_index('idx_invoice_forms_company', 'invoice_forms', ['company_id'], unique=False)
    op.create_table('billingtypes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='billingtype_pkey')
    )
    op.create_table('tax_rates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_compound', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('rate >= 0::numeric AND rate <= 100::numeric', name='chk_tax_rate'),
    sa.PrimaryKeyConstraint('id', name='tax_rates_pkey'),
    sa.UniqueConstraint('name', name='uq_tax_rate_name'),
    comment='Tax rate configurations'
    )
    op.create_index('idx_tax_rates_active', 'tax_rates', ['is_active'], unique=False)
    op.create_table('payment_plans',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('down_payment', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('number_of_payments', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('payment_frequency', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("payment_frequency::text = ANY (ARRAY['weekly'::character varying, 'biweekly'::character varying, 'monthly'::character varying, 'quarterly'::character varying]::text[])", name='chk_payment_frequency'),
    sa.CheckConstraint("status::text = ANY (ARRAY['draft'::character varying, 'active'::character varying, 'completed'::character varying, 'defaulted'::character varying, 'cancelled'::character varying]::text[])", name='chk_plan_status'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name='fk_plan_patient'),
    sa.PrimaryKeyConstraint('id', name='payment_plans_pkey')
    )
    op.create_index('idx_payment_plans_status', 'payment_plans', ['status'], unique=False)
    op.create_index('idx_payment_plans_patient', 'payment_plans', ['patient_id'], unique=False)
    op.create_index('idx_payment_plans_dates', 'payment_plans', ['start_date', 'end_date'], unique=False)
    op.create_table('report_definitions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('report_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('data_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('query_definition', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('template_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('output_formats', postgresql.ARRAY(sa.VARCHAR(length=50)), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('custom_logic', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_system_report', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_featured', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['report_categories.id'], name='fk_report_definition_category'),
    sa.PrimaryKeyConstraint('id', name='report_definitions_pkey'),
    sa.UniqueConstraint('name', name='uq_report_definition_name'),
    comment='Report template definitions'
    )
    op.create_index('idx_report_definitions_type', 'report_definitions', ['report_type'], unique=False)
    op.create_index('idx_report_definitions_featured', 'report_definitions', ['is_featured'], unique=False)
    op.create_index('idx_report_definitions_category', 'report_definitions', ['category_id'], unique=False)
    op.create_index('idx_report_definitions_active', 'report_definitions', ['is_active'], unique=False)
    op.create_table('variable_values',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('definition_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('valid_from', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('valid_to', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['definition_id'], ['variable_definitions.id'], name='variable_values_definition_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='variable_values_pkey')
    )
    op.create_index('idx_var_val_def', 'variable_values', ['definition_id'], unique=False)
    op.create_table('chart_of_accounts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('account_number', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('account_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('parent_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_header', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_control_account', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('normal_balance', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('current_balance', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("account_type::text = ANY (ARRAY['asset'::character varying, 'liability'::character varying, 'equity'::character varying, 'revenue'::character varying, 'expense'::character varying]::text[])", name='chk_account_type'),
    sa.CheckConstraint("normal_balance::text = ANY (ARRAY['debit'::character varying, 'credit'::character varying]::text[])", name='chk_normal_balance'),
    sa.ForeignKeyConstraint(['parent_account_id'], ['chart_of_accounts.id'], name='fk_account_parent'),
    sa.PrimaryKeyConstraint('id', name='chart_of_accounts_pkey'),
    sa.UniqueConstraint('account_number', name='chart_of_accounts_account_number_key'),
    comment='Chart of accounts structure'
    )
    op.create_index('idx_chart_of_accounts_type', 'chart_of_accounts', ['account_type'], unique=False)
    op.create_index('idx_chart_of_accounts_parent', 'chart_of_accounts', ['parent_account_id'], unique=False)
    op.create_index('idx_chart_of_accounts_number', 'chart_of_accounts', ['account_number'], unique=False)
    op.create_index('idx_chart_of_accounts_active', 'chart_of_accounts', ['is_active'], unique=False)
    op.create_table('variables',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('variable_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_system', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='variables_pkey'),
    sa.UniqueConstraint('name', name='uq_variable_name'),
    comment='System and user-defined variables'
    )
    op.create_index('idx_variables_name', 'variables', ['name'], unique=False)
    op.create_table('integration_mappings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('endpoint_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mapping_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('source_model', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('target_model', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('field_mappings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('transformation_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['endpoint_id'], ['integration_endpoints.id'], name='fk_integration_mapping_endpoint'),
    sa.PrimaryKeyConstraint('id', name='integration_mappings_pkey'),
    sa.UniqueConstraint('endpoint_id', 'mapping_type', 'source_model', 'target_model', name='uq_integration_mapping'),
    comment='Data mapping configurations'
    )
    op.create_index('idx_integration_mappings_type', 'integration_mappings', ['mapping_type'], unique=False)
    op.create_index('idx_integration_mappings_models', 'integration_mappings', ['source_model', 'target_model'], unique=False)
    op.create_index('idx_integration_mappings_endpoint', 'integration_mappings', ['endpoint_id'], unique=False)
    op.create_index('idx_integration_mappings_active', 'integration_mappings', ['is_active'], unique=False)
    op.create_table('shipping_packages',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('shipping_packages_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('tracking_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('shipping_method_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('ship_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('estimated_delivery_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('actual_delivery_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('weight', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('length', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('width', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('height', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('declared_value', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('insurance_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('shipping_cost', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('label_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('tracking_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('declared_value >= 0::numeric AND insurance_amount >= 0::numeric AND shipping_cost >= 0::numeric', name='chk_shipping_package_amounts'),
    sa.CheckConstraint('ship_date <= estimated_delivery_date AND (actual_delivery_date IS NULL OR ship_date <= actual_delivery_date)', name='chk_shipping_package_dates'),
    sa.CheckConstraint('weight > 0::numeric AND length > 0::numeric AND width > 0::numeric AND height > 0::numeric', name='chk_shipping_package_dimensions'),
    sa.ForeignKeyConstraint(['shipping_method_id'], ['shipping_methods.id'], name='fk_shipping_package_method'),
    sa.PrimaryKeyConstraint('id', name='shipping_packages_pkey'),
    comment='Package tracking and delivery status',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_shipping_packages_tracking', 'shipping_packages', ['tracking_number'], unique=False)
    op.create_index('idx_shipping_packages_status', 'shipping_packages', ['status'], unique=False)
    op.create_index('idx_shipping_packages_order', 'shipping_packages', ['order_id'], unique=False)
    op.create_index('idx_shipping_packages_method', 'shipping_packages', ['shipping_method_id'], unique=False)
    op.create_index('idx_shipping_packages_dates', 'shipping_packages', ['ship_date', 'estimated_delivery_date', 'actual_delivery_date'], unique=False)
    op.create_table('cmn_form_sections',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('section_type', sa.CHAR(length=1), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_required', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("section_type = ANY (ARRAY['A'::bpchar, 'B'::bpchar, 'C'::bpchar])", name='chk_section_type'),
    sa.ForeignKeyConstraint(['form_id'], ['cmn_forms.id'], name='fk_cmn_section_form'),
    sa.PrimaryKeyConstraint('id', name='cmn_form_sections_pkey'),
    sa.UniqueConstraint('form_id', 'section_type', name='uq_cmn_section'),
    comment='Sections within CMN forms'
    )
    op.create_index('idx_cmn_sections_type', 'cmn_form_sections', ['section_type'], unique=False)
    op.create_index('idx_cmn_sections_order', 'cmn_form_sections', ['display_order'], unique=False)
    op.create_index('idx_cmn_sections_form', 'cmn_form_sections', ['form_id'], unique=False)
    op.create_table('delivery_routes',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('delivery_routes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('driver_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('vehicle_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('route_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'planned'::character varying"), autoincrement=False, nullable=True),
    sa.Column('total_stops', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_distance', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('total_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('start_time < end_time OR end_time IS NULL', name='chk_delivery_route_times'),
    sa.CheckConstraint('total_stops >= 0 OR total_stops IS NULL) AND (total_distance >= 0::numeric OR total_distance IS NULL) AND (total_duration >= 0 OR total_duration IS NULL', name='chk_delivery_route_metrics'),
    sa.ForeignKeyConstraint(['driver_id'], ['users.id'], name='fk_delivery_route_driver'),
    sa.PrimaryKeyConstraint('id', name='delivery_routes_pkey'),
    comment='Delivery route planning',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_delivery_routes_status', 'delivery_routes', ['status'], unique=False)
    op.create_index('idx_delivery_routes_driver', 'delivery_routes', ['driver_id'], unique=False)
    op.create_index('idx_delivery_routes_date', 'delivery_routes', ['route_date'], unique=False)
    op.create_table('api_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('api_key_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('endpoint_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('request_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('request_method', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('request_path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('request_headers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('request_body', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_headers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_body', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['api_key_id'], ['api_keys.id'], name='fk_api_log_key'),
    sa.ForeignKeyConstraint(['endpoint_id'], ['integration_endpoints.id'], name='fk_api_log_endpoint'),
    sa.PrimaryKeyConstraint('id', name='api_logs_pkey'),
    comment='API request/response logs'
    )
    op.create_index('idx_api_logs_status', 'api_logs', ['response_status'], unique=False)
    op.create_index('idx_api_logs_request', 'api_logs', ['request_id'], unique=False)
    op.create_index('idx_api_logs_key', 'api_logs', ['api_key_id'], unique=False)
    op.create_index('idx_api_logs_endpoint', 'api_logs', ['endpoint_id'], unique=False)
    op.create_index('idx_api_logs_date', 'api_logs', ['created_at'], unique=False)
    op.create_table('cmn_forms_0603b',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0603b'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0603b_pkey'),
    comment='CMN Form Type 06.03 Part B'
    )
    op.create_index('idx_cmn_forms_0603b_medical', 'cmn_forms_0603b', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0603b_customer', 'cmn_forms_0603b', ['customer_id'], unique=False)
    op.create_table('delivery_confirmations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('stop_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('confirmation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('confirmed_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('confirmation_time', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['stop_id'], ['delivery_stops.id'], name='fk_delivery_confirmation_stop'),
    sa.PrimaryKeyConstraint('id', name='delivery_confirmations_pkey'),
    comment='Delivery confirmation records'
    )
    op.create_index('idx_delivery_confirmations_type', 'delivery_confirmations', ['confirmation_type'], unique=False)
    op.create_index('idx_delivery_confirmations_stop', 'delivery_confirmations', ['stop_id'], unique=False)
    op.create_table('email_attachments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('file_attachment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['file_attachment_id'], ['file_attachments.id'], name='fk_email_attachment_file'),
    sa.PrimaryKeyConstraint('id', name='email_attachments_pkey')
    )
    op.create_index('idx_email_attachments_file', 'email_attachments', ['file_attachment_id'], unique=False)
    op.create_index('idx_email_attachments_email', 'email_attachments', ['email_id'], unique=False)
    op.create_table('appointment_attendees',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('appointment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('attendee_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('attendee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('response_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'accepted'::character varying, 'declined'::character varying, 'tentative'::character varying]::text[])", name='chk_appointment_attendee_status'),
    sa.ForeignKeyConstraint(['appointment_id'], ['appointments.id'], name='fk_appointment_attendee_appointment'),
    sa.PrimaryKeyConstraint('id', name='appointment_attendees_pkey'),
    comment='Appointment participants and their responses'
    )
    op.create_index('idx_appointment_attendees_status', 'appointment_attendees', ['status'], unique=False)
    op.create_index('idx_appointment_attendees_attendee', 'appointment_attendees', ['attendee_type', 'attendee_id'], unique=False)
    op.create_index('idx_appointment_attendees_appointment', 'appointment_attendees', ['appointment_id'], unique=False)
    op.create_table('report_categories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parent_category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_category_id'], ['report_categories.id'], name='fk_report_category_parent'),
    sa.PrimaryKeyConstraint('id', name='report_categories_pkey'),
    sa.UniqueConstraint('name', name='uq_report_category_name'),
    comment='Report category hierarchy'
    )
    op.create_index('idx_report_categories_parent', 'report_categories', ['parent_category_id'], unique=False)
    op.create_index('idx_report_categories_active', 'report_categories', ['is_active'], unique=False)
    op.create_table('deposits',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('deposit_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('deposit_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('bank_account', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('total_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'completed'::character varying, 'reconciled'::character varying, 'voided'::character varying]::text[])", name='chk_deposit_status'),
    sa.PrimaryKeyConstraint('id', name='deposits_pkey'),
    sa.UniqueConstraint('deposit_number', name='uq_deposit_number')
    )
    op.create_index('idx_deposits_status', 'deposits', ['status'], unique=False)
    op.create_index('idx_deposits_number', 'deposits', ['deposit_number'], unique=False)
    op.create_index('idx_deposits_date', 'deposits', ['deposit_date'], unique=False)
    op.create_table('inventory_transaction_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('affects_quantity', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('requires_approval', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_system_type', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("affects_quantity::text = ANY (ARRAY['increase'::character varying, 'decrease'::character varying, 'none'::character varying]::text[])", name='inventory_transaction_types_affects_quantity_check'),
    sa.PrimaryKeyConstraint('id', name='inventory_transaction_types_pkey'),
    comment='Types of inventory transactions'
    )
    op.create_index('idx_inventory_transaction_types_name', 'inventory_transaction_types', ['name'], unique=False)
    op.create_table('kit_templates',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('kit_templates_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('product_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_type_id'], ['product_types.id'], name='fk_kit_template_type'),
    sa.PrimaryKeyConstraint('id', name='kit_templates_pkey'),
    sa.UniqueConstraint('name', 'version', name='uq_kit_template_name'),
    comment='Product kit templates',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_kit_templates_type', 'kit_templates', ['product_type_id'], unique=False)
    op.create_index('idx_kit_templates_active', 'kit_templates', ['is_active'], unique=False)
    op.create_table('cmn_forms_0102b',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0102b'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0102b_pkey'),
    comment='CMN Form Type 01.02 Part B'
    )
    op.create_index('idx_cmn_forms_0102b_medical', 'cmn_forms_0102b', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0102b_customer', 'cmn_forms_0102b', ['customer_id'], unique=False)
    op.create_table('cmn_forms_0203a',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0203a'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0203a_pkey'),
    comment='CMN Form Type 02.03 Part A'
    )
    op.create_index('idx_cmn_forms_0203a_medical', 'cmn_forms_0203a', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0203a_customer', 'cmn_forms_0203a', ['customer_id'], unique=False)
    op.create_table('provider_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='provider_types_pkey')
    )
    op.create_table('patients',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('patients_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('middle_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('date_of_birth', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('gender', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('ssn', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone_primary', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('phone_secondary', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('address_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('emergency_contact', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('insurance_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('medical_history', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['addresses.id'], name='fk_patient_address'),
    sa.PrimaryKeyConstraint('id', name='patients_pkey'),
    comment='Patient demographic and contact information',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_patients_status', 'patients', ['status'], unique=False)
    op.create_index('idx_patients_name', 'patients', ['last_name', 'first_name'], unique=False)
    op.create_index('idx_patients_dob', 'patients', ['date_of_birth'], unique=False)
    op.create_table('departments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('managerid', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='department_pkey'),
    comment='Company departments'
    )
    op.create_table('kit_details',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('kit_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('is_required', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('quantity > 0', name='chk_kit_detail_quantity'),
    sa.ForeignKeyConstraint(['kit_id'], ['kits.id'], name='fk_kit_detail_kit'),
    sa.PrimaryKeyConstraint('id', name='kit_details_pkey'),
    comment='Individual products within kits'
    )
    op.create_index('idx_kit_details_product', 'kit_details', ['product_id'], unique=False)
    op.create_index('idx_kit_details_kit', 'kit_details', ['kit_id'], unique=False)
    op.create_table('dashboard_widgets',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('widget_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('default_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('min_width', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('min_height', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_width', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_height', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('refresh_interval', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_system_widget', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('min_width > 0 AND min_height > 0 AND (max_width IS NULL OR max_width >= min_width) AND (max_height IS NULL OR max_height >= min_height)', name='chk_widget_dimensions'),
    sa.CheckConstraint('refresh_interval IS NULL OR refresh_interval > 0', name='chk_widget_refresh'),
    sa.PrimaryKeyConstraint('id', name='dashboard_widgets_pkey'),
    sa.UniqueConstraint('name', name='uq_dashboard_widget_name'),
    comment='Available dashboard widgets'
    )
    op.create_index('idx_dashboard_widgets_type', 'dashboard_widgets', ['widget_type'], unique=False)
    op.create_index('idx_dashboard_widgets_system', 'dashboard_widgets', ['is_system_widget'], unique=False)
    op.create_index('idx_dashboard_widgets_category', 'dashboard_widgets', ['category'], unique=False)
    op.create_index('idx_dashboard_widgets_active', 'dashboard_widgets', ['is_active'], unique=False)
    op.create_table('compliance_audit_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('auditid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('checklistitemid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'Pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('completeddate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['auditid'], ['compliance_audits.id'], name='fk_compliance_audit_item_audit'),
    sa.ForeignKeyConstraint(['checklistitemid'], ['compliance_checklist_items.id'], name='fk_compliance_audit_item_checklist_item'),
    sa.PrimaryKeyConstraint('id', name='compliance_audit_item_pkey'),
    comment='Individual compliance audit findings'
    )
    op.create_table('notification_queue',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('notification_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('subject', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('scheduled_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sent_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('max_retries', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'sent'::character varying, 'failed'::character varying, 'cancelled'::character varying]::text[])", name='chk_notification_status'),
    sa.ForeignKeyConstraint(['template_id'], ['email_templates.id'], name='fk_notification_template'),
    sa.PrimaryKeyConstraint('id', name='notification_queue_pkey')
    )
    op.create_index('idx_notification_queue_type', 'notification_queue', ['notification_type'], unique=False)
    op.create_index('idx_notification_queue_status', 'notification_queue', ['status'], unique=False)
    op.create_index('idx_notification_queue_schedule', 'notification_queue', ['scheduled_at'], unique=False)
    op.create_index('idx_notification_queue_priority', 'notification_queue', ['priority'], unique=False)
    op.create_table('customer_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('class_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('billing_cycle', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('payment_methods', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('requirements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['class_id'], ['customer_classes.id'], name='fk_customer_type_class'),
    sa.PrimaryKeyConstraint('id', name='customer_types_pkey'),
    sa.UniqueConstraint('name', name='uq_customer_type_name'),
    comment='Customer type definitions'
    )
    op.create_index('idx_customer_types_class', 'customer_types', ['class_id'], unique=False)
    op.create_index('idx_customer_types_active', 'customer_types', ['is_active'], unique=False)
    op.create_table('certificates',
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('data', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name='tbl_certificates_pkey'),
    comment='Stores security certificates'
    )
    op.create_table('cmn_forms_0802',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0802'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0802_pkey'),
    comment='CMN Form Type 08.02'
    )
    op.create_index('idx_cmn_forms_0802_medical', 'cmn_forms_0802', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0802_customer', 'cmn_forms_0802', ['customer_id'], unique=False)
    op.create_table('cmn_forms_4842',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_4842'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_4842_pkey'),
    comment='CMN Form Type 4842'
    )
    op.create_index('idx_cmn_forms_4842_medical', 'cmn_forms_4842', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_4842_customer', 'cmn_forms_4842', ['customer_id'], unique=False)
    op.create_table('equipment_maintenances',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('equipmentid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('maintenancetype', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('maintenancedate', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('performedby', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('cost', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['equipmentid'], ['equipments.id'], name='fk_equipment_maintenance_equipment'),
    sa.PrimaryKeyConstraint('id', name='equipment_maintenance_pkey'),
    comment='Equipment maintenance records'
    )
    op.create_table('task_categories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isactive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='task_category_pkey'),
    comment='Categories for tasks'
    )
    op.create_table('payment_plan_payments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('payment_plan_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('payment_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('payment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('payment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('reference_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('amount > 0::numeric', name='chk_plan_payment_amount'),
    sa.PrimaryKeyConstraint('id', name='payment_plan_payments_pkey'),
    comment='Individual payments within payment plans'
    )
    op.create_index('idx_plan_payments_status', 'payment_plan_payments', ['status'], unique=False)
    op.create_index('idx_plan_payments_plan', 'payment_plan_payments', ['payment_plan_id'], unique=False)
    op.create_index('idx_plan_payments_dates', 'payment_plan_payments', ['due_date', 'payment_date'], unique=False)
    op.create_table('documents',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('documents_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('template_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_extension', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('is_template_generated', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_locked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('locked_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('locked_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['draft'::character varying, 'review'::character varying, 'approved'::character varying, 'archived'::character varying]::text[])", name='chk_document_status'),
    sa.CheckConstraint('file_size >= 0', name='chk_document_file_size'),
    sa.CheckConstraint('version > 0', name='chk_document_version'),
    sa.ForeignKeyConstraint(['category_id'], ['document_categories.id'], name='fk_document_category'),
    sa.ForeignKeyConstraint(['locked_by'], ['users.id'], name='fk_document_locked_by'),
    sa.ForeignKeyConstraint(['template_id'], ['document_templates.id'], name='fk_document_template'),
    sa.PrimaryKeyConstraint('id', name='documents_pkey'),
    comment='Main document management table',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_documents_template', 'documents', ['template_id'], unique=False)
    op.create_index('idx_documents_status', 'documents', ['status'], unique=False)
    op.create_index('idx_documents_locked', 'documents', ['locked_by', 'locked_at'], unique=False)
    op.create_index('idx_documents_entity', 'documents', ['entity_type', 'entity_id'], unique=False)
    op.create_index('idx_documents_category', 'documents', ['category_id'], unique=False)
    op.create_table('calendars',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('calendar_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('owner_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='calendars_pkey'),
    sa.UniqueConstraint('name', 'owner_type', 'owner_id', name='uq_calendar_name_owner'),
    comment='Calendar management for different entities'
    )
    op.create_index('idx_calendars_type', 'calendars', ['calendar_type'], unique=False)
    op.create_index('idx_calendars_owner', 'calendars', ['owner_type', 'owner_id'], unique=False)
    op.create_table('payment_methods',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('method_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('account_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('verification_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('billing_address_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("method_type::text = ANY (ARRAY['credit_card'::character varying, 'bank_account'::character varying, 'ach'::character varying, 'wire_transfer'::character varying, 'other'::character varying]::text[])", name='chk_payment_method_type'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_payment_method_customer'),
    sa.PrimaryKeyConstraint('id', name='payment_methods_pkey'),
    comment='Stored payment methods'
    )
    op.create_index('idx_payment_methods_type', 'payment_methods', ['method_type'], unique=False)
    op.create_index('idx_payment_methods_status', 'payment_methods', ['status'], unique=False)
    op.create_index('idx_payment_methods_default', 'payment_methods', ['is_default'], unique=False)
    op.create_index('idx_payment_methods_customer', 'payment_methods', ['customer_id'], unique=False)
    op.create_table('denial_notes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('denial_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('note_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('note_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_internal', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['denial_id'], ['denials.id'], name='fk_denial_note'),
    sa.PrimaryKeyConstraint('id', name='denial_notes_pkey'),
    comment='Notes related to denial cases'
    )
    op.create_index('idx_denial_notes_type', 'denial_notes', ['note_type'], unique=False)
    op.create_index('idx_denial_notes_denial', 'denial_notes', ['denial_id'], unique=False)
    op.create_table('invoice_transaction_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('affects_balance', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('requires_approval', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_system_type', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("affects_balance::text = ANY (ARRAY['increase'::character varying, 'decrease'::character varying, 'none'::character varying]::text[])", name='invoice_transaction_types_affects_balance_check'),
    sa.PrimaryKeyConstraint('id', name='invoice_transaction_types_pkey'),
    comment='Types of invoice transactions'
    )
    op.create_index('idx_invoice_transaction_types_name', 'invoice_transaction_types', ['name'], unique=False)
    op.create_table('configuration_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('value_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('old_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('new_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('change_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('changed_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('change_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['value_id'], ['configuration_values.id'], name='configuration_history_value_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='configuration_history_pkey')
    )
    op.create_index('idx_cfg_hist_val', 'configuration_history', ['value_id'], unique=False)
    op.create_table('doctor_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='doctor_types_pkey'),
    comment='Lookup table for doctor types'
    )
    op.create_index('idx_doctor_types_name', 'doctor_types', ['name'], unique=False)
    op.create_table('performance_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('component', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('operation', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('starttime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('endtime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('errordetails', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='performance_log_pkey'),
    comment='System performance monitoring'
    )
    op.create_table('kit_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('kit_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_required', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['kit_id'], ['kit_templates.id'], name='fk_kit_item_kit'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='fk_kit_item_product'),
    sa.PrimaryKeyConstraint('id', name='kit_items_pkey'),
    sa.UniqueConstraint('kit_id', 'product_id', name='uq_kit_item'),
    comment='Items included in product kits'
    )
    op.create_index('idx_kit_items_product', 'kit_items', ['product_id'], unique=False)
    op.create_index('idx_kit_items_order', 'kit_items', ['display_order'], unique=False)
    op.create_index('idx_kit_items_kit', 'kit_items', ['kit_id'], unique=False)
    op.create_table('maintenance_log_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('maintenancelogid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('checklistitemid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('actualvalue', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['checklistitemid'], ['maintenance_checklist_items.id'], name='fk_maintenance_log_item_checklist_item'),
    sa.PrimaryKeyConstraint('id', name='maintenance_log_item_pkey'),
    comment='Individual maintenance checklist item results'
    )
    op.create_table('service_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('customerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('equipmentid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('requestdate', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'Pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('assignedtechnicianid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('scheduleddate', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completiondate', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('resolution', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['equipmentid'], ['equipments.id'], name='fk_service_request_equipment'),
    sa.PrimaryKeyConstraint('id', name='service_request_pkey'),
    comment='Customer service requests'
    )
    op.create_table('cmn_forms_0302',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medical_condition_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('form_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_customer_0302'),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_0302_pkey'),
    comment='CMN Form Type 03.02'
    )
    op.create_index('idx_cmn_forms_0302_medical', 'cmn_forms_0302', ['medical_condition_id'], unique=False)
    op.create_index('idx_cmn_forms_0302_customer', 'cmn_forms_0302', ['customer_id'], unique=False)
    op.create_table('workflow_schedules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workflow_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('schedule_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cron_expression', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_run_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('next_run_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint('start_date <= end_date OR end_date IS NULL', name='chk_workflow_schedule_dates'),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflow_definitions.id'], name='fk_workflow_schedule_workflow'),
    sa.PrimaryKeyConstraint('id', name='workflow_schedules_pkey'),
    comment='Workflow scheduling configuration'
    )
    op.create_index('idx_workflow_schedules_workflow', 'workflow_schedules', ['workflow_id'], unique=False)
    op.create_index('idx_workflow_schedules_next_run', 'workflow_schedules', ['next_run_at'], unique=False)
    op.create_index('idx_workflow_schedules_dates', 'workflow_schedules', ['start_date', 'end_date'], unique=False)
    op.create_index('idx_workflow_schedules_active', 'workflow_schedules', ['is_active'], unique=False)
    op.create_table('document_shares',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('shared_with_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('shared_with_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permission_level', sa.VARCHAR(length=20), server_default=sa.text("'read'::character varying"), autoincrement=False, nullable=True),
    sa.Column('expiry_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("permission_level::text = ANY (ARRAY['read'::character varying, 'write'::character varying, 'admin'::character varying]::text[])", name='chk_document_share_permission'),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='fk_document_share_document'),
    sa.PrimaryKeyConstraint('id', name='document_shares_pkey'),
    comment='Document sharing and permissions'
    )
    op.create_index('idx_document_shares_shared', 'document_shares', ['shared_with_type', 'shared_with_id'], unique=False)
    op.create_index('idx_document_shares_expiry', 'document_shares', ['expiry_date'], unique=False)
    op.create_index('idx_document_shares_document', 'document_shares', ['document_id'], unique=False)
    op.create_table('integration_connections',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('connection_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('credentials', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'inactive'::character varying"), autoincrement=False, nullable=True),
    sa.Column('last_connected_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['active'::character varying, 'inactive'::character varying, 'error'::character varying, 'rate_limited'::character varying]::text[])", name='chk_integration_connection_status'),
    sa.PrimaryKeyConstraint('id', name='integration_connections_pkey'),
    sa.UniqueConstraint('name', name='uq_integration_connection_name'),
    comment='External system connection configurations'
    )
    op.create_index('idx_integration_connections_type', 'integration_connections', ['connection_type'], unique=False)
    op.create_index('idx_integration_connections_status', 'integration_connections', ['status'], unique=False)
    op.create_index('idx_integration_connections_provider', 'integration_connections', ['provider'], unique=False)
    op.create_index('idx_integration_connections_active', 'integration_connections', ['is_active'], unique=False)
    op.create_table('cmn_forms',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('form_version', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='cmn_forms_pkey'),
    sa.UniqueConstraint('form_type', 'form_version', name='uq_cmn_form'),
    comment='Certificate of Medical Necessity form definitions'
    )
    op.create_index('idx_cmn_forms_type', 'cmn_forms', ['form_type', 'form_version'], unique=False)
    op.create_index('idx_cmn_forms_active', 'cmn_forms', ['is_active'], unique=False)
    op.create_table('prescription_refills',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('prescription_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('refill_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pharmacy_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('pharmacy_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'approved'::character varying, 'denied'::character varying, 'filled'::character varying]::text[])", name='chk_refill_status'),
    sa.ForeignKeyConstraint(['prescription_id'], ['prescriptions.id'], name='fk_refill_prescription'),
    sa.PrimaryKeyConstraint('id', name='prescription_refills_pkey')
    )
    op.create_index('idx_prescription_refills_status', 'prescription_refills', ['status'], unique=False)
    op.create_index('idx_prescription_refills_prescription', 'prescription_refills', ['prescription_id'], unique=False)
    op.create_index('idx_prescription_refills_date', 'prescription_refills', ['refill_date'], unique=False)
    op.create_table('order_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('item_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('unit_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('instructions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'cancelled'::character varying]::text[])", name='chk_item_status'),
    sa.ForeignKeyConstraint(['order_id'], ['doctor_orders.id'], name='fk_order_item_order'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='fk_order_item_product'),
    sa.PrimaryKeyConstraint('id', name='order_items_pkey')
    )
    op.create_index('idx_order_items_status', 'order_items', ['status'], unique=False)
    op.create_index('idx_order_items_product', 'order_items', ['product_id'], unique=False)
    op.create_index('idx_order_items_order', 'order_items', ['order_id'], unique=False)
    op.create_table('addresses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('address_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('address_line1', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('address_line2', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('state', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('postal_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('country', sa.VARCHAR(length=100), server_default=sa.text("'USA'::character varying"), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_primary', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='addresses_pkey'),
    comment='Physical and mailing addresses'
    )
    op.create_index('idx_addresses_postal', 'addresses', ['postal_code'], unique=False)
    op.create_index('idx_addresses_city_state', 'addresses', ['city', 'state'], unique=False)
    op.create_table('invoices',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('customerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('invoicenumber', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('invoicedate', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('duedate', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('subtotal', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('taxamount', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('totalamount', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('paidamount', sa.NUMERIC(precision=18, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'Pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lastupdateuserid', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('lastupdatedatetime', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='invoice_pkey'),
    comment='Customer invoices'
    )
    op.create_table('cmnform_0404bs',
    sa.Column('cmnformid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('answer6a', postgresql.ENUM('Y', 'N', 'D', name='answer_enum'), server_default=sa.text("'D'::answer_enum"), autoincrement=False, nullable=False),
    sa.Column('answer6b', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('answer7a', postgresql.ENUM('Y', 'N', 'D', name='answer_enum'), server_default=sa.text("'D'::answer_enum"), autoincrement=False, nullable=False),
    sa.Column('answer7b', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['cmnformid'], ['cmnforms.id'], name='fk_cmnform_0404b_cmnform'),
    sa.PrimaryKeyConstraint('cmnformid', name='cmnform_0404b_pkey')
    )
    op.drop_table('claim_status_history')
    # ### end Alembic commands ###
